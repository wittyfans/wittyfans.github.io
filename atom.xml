<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wittyfans</title>
  
  <subtitle>学则不固,知则不惑</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wittyfans.com/"/>
  <updated>2019-01-31T14:02:31.735Z</updated>
  <id>http://wittyfans.com/</id>
  
  <author>
    <name>wittyfans</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dash 基础</title>
    <link href="http://wittyfans.com/coding/Dash-%E5%9F%BA%E7%A1%80.html"/>
    <id>http://wittyfans.com/coding/Dash-基础.html</id>
    <published>2019-01-31T13:48:29.000Z</published>
    <updated>2019-01-31T14:02:31.735Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Dash is a productive Python framework for building web applications,This part contains dash install, layout of dash, how to style the html tag in dash, using the callbacks, update data in real time,etc.<br>Dash是一个高效的 Web APP构建框架，这个部分包含了Dash的安装，dash中的layout，如何去个性化dash中的html元素，以及复用dash的元素，如何使用dash的回调函数，实时数据监控等.</p></blockquote><a id="more"></a><ul><li>building data visualization apps</li><li>Inherently cross-platform and mobile ready</li></ul><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install dash==0.35.1  # The core dash backend</span><br><span class="line">pip install dash-html-components==0.13.4  # HTML components</span><br><span class="line">pip install dash-core-components==0.42.1  # Supercharged components</span><br><span class="line">pip install dash-table==3.1.11  # Interactive DataTable component (new!)</span><br></pre></td></tr></table></figure><h1 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h1><h2 id="Hello-Dash"><a href="#Hello-Dash" class="headerlink" title="Hello Dash"></a>Hello Dash</h2><blockquote><p>Layout描述了该app是什么样子,所有的可视化组建都用python类来定义，主要有两种dash_core_components和dash_html_components，不过你也可以定义自己的js和react.js类。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import dash</span><br><span class="line">import dash_core_components as dcc</span><br><span class="line">import dash_html_components as html</span><br><span class="line"></span><br><span class="line">external_stylesheets = [&apos;https://codepen.io/chriddyp/pen/bWLwgP.css&apos;]</span><br><span class="line"></span><br><span class="line">app = dash.Dash(__name__, external_stylesheets=external_stylesheets)</span><br><span class="line"></span><br><span class="line">app.layout = html.Div(children=[</span><br><span class="line">    html.H1(children=&apos;Hello Dash&apos;),</span><br><span class="line"></span><br><span class="line">    html.Div(children=&apos;&apos;&apos;</span><br><span class="line">        Dash: A web application framework for Python.</span><br><span class="line">    &apos;&apos;&apos;),</span><br><span class="line"></span><br><span class="line">    dcc.Graph(</span><br><span class="line">        id=&apos;example-graph&apos;,</span><br><span class="line">        figure=&#123;</span><br><span class="line">            &apos;data&apos;: [</span><br><span class="line">                &#123;&apos;x&apos;: [1, 2, 3], &apos;y&apos;: [4, 1, 2], &apos;type&apos;: &apos;bar&apos;, &apos;name&apos;: &apos;SF&apos;&#125;,</span><br><span class="line">                &#123;&apos;x&apos;: [1, 2, 3], &apos;y&apos;: [2, 4, 5], &apos;type&apos;: &apos;bar&apos;, &apos;name&apos;: u&apos;Montréal&apos;&#125;,</span><br><span class="line">            ],</span><br><span class="line">            &apos;layout&apos;: &#123;</span><br><span class="line">                &apos;title&apos;: &apos;Dash Data Visualization&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run_server(debug=True)</span><br></pre></td></tr></table></figure><p>html.Div()是一个div组件，其中可以增加子元素，方法是直接在里面定义children即可，children在html组件中是可以嵌套的，所以在H1元素中，你还可以继续定义children，通过这种嵌套关系，你就可以构建需要的网页元素。</p><p>dcc.Graph()是一个图形元素，其id是这个对象的id，通常我们可以通过这个id来找到这个元素，并与其交互。<br>figure是这个图形对象的数据，比如最重要的数据，以及该图的标题。</p><p>最后，app.run_server(debug=True)会启动服务，我们可以进入到当前文件夹，将该python文件直接运行，随后即可看到相关的服务启动，通过dash提供网址就可以看到app的页面了。</p><p>下面是一些注意事项：</p><ul><li>The dash_core_components describe higher-level components that are interactive and are generated with JavaScript, HTML, and CSS through the React.js library.</li><li>html.H1(children=’Hello Dash’) is the same as html.H1(‘Hello Dash’)</li></ul><p>Dash是 hot-reloading 的，即如果你的app已经运行起来了，你做了任何更改，网页都会自动刷新，你可以直接看到新的变化。</p><blockquote><p>Dash will automatically refresh your browser when you make a change in your code.</p></blockquote><h2 id="Style-html"><a href="#Style-html" class="headerlink" title="Style html"></a>Style html</h2><p>Dash的元素都可以自定义，你可以通过自定义CSS的方式来更改元素的属性和排版，还是上面的代码，可以对比下面和上面的区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import dash</span><br><span class="line">import dash_core_components as dcc</span><br><span class="line">import dash_html_components as html</span><br><span class="line"></span><br><span class="line">external_stylesheets = [&apos;https://codepen.io/chriddyp/pen/bWLwgP.css&apos;]</span><br><span class="line"></span><br><span class="line">app = dash.Dash(__name__, external_stylesheets=external_stylesheets)</span><br><span class="line"></span><br><span class="line">colors = &#123;</span><br><span class="line">    &apos;background&apos;: &apos;#111111&apos;,</span><br><span class="line">    &apos;text&apos;: &apos;#7FDBFF&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.layout = html.Div(style=&#123;&apos;backgroundColor&apos;: colors[&apos;background&apos;]&#125;, children=[</span><br><span class="line">    html.H1(</span><br><span class="line">        children=&apos;Hello Dash&apos;,</span><br><span class="line">        style=&#123;</span><br><span class="line">            &apos;textAlign&apos;: &apos;center&apos;,</span><br><span class="line">            &apos;color&apos;: colors[&apos;text&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    html.Div(children=&apos;Dash: A web application framework for Python.&apos;, style=&#123;</span><br><span class="line">        &apos;textAlign&apos;: &apos;center&apos;,</span><br><span class="line">        &apos;color&apos;: colors[&apos;text&apos;]</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    dcc.Graph(</span><br><span class="line">        id=&apos;example-graph-2&apos;,</span><br><span class="line">        figure=&#123;</span><br><span class="line">            &apos;data&apos;: [</span><br><span class="line">                &#123;&apos;x&apos;: [1, 2, 3], &apos;y&apos;: [4, 1, 2], &apos;type&apos;: &apos;bar&apos;, &apos;name&apos;: &apos;SF&apos;&#125;,</span><br><span class="line">                &#123;&apos;x&apos;: [1, 2, 3], &apos;y&apos;: [2, 4, 5], &apos;type&apos;: &apos;bar&apos;, &apos;name&apos;: u&apos;Montréal&apos;&#125;,</span><br><span class="line">            ],</span><br><span class="line">            &apos;layout&apos;: &#123;</span><br><span class="line">                &apos;plot_bgcolor&apos;: colors[&apos;background&apos;],</span><br><span class="line">                &apos;paper_bgcolor&apos;: colors[&apos;background&apos;],</span><br><span class="line">                &apos;font&apos;: &#123;</span><br><span class="line">                    &apos;color&apos;: colors[&apos;text&apos;]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run_server(debug=True)</span><br></pre></td></tr></table></figure><p>需要注意dash html组件和html元素的区别：</p><ol><li>HTML中的style属性是以分号分隔的字符串。在Dash中用字典</li><li>The children of the HTML tag is specified through the children keyword argument. By convention, this is always the first argument and so it is often omitted.</li></ol><h2 id="复用组件"><a href="#复用组件" class="headerlink" title="复用组件"></a>复用组件</h2><h2 id="Pandas-dataframe到table"><a href="#Pandas-dataframe到table" class="headerlink" title="Pandas dataframe到table"></a>Pandas dataframe到table</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import dash</span><br><span class="line">import dash_core_components as dcc</span><br><span class="line">import dash_html_components as html</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(</span><br><span class="line">    &apos;https://gist.githubusercontent.com/chriddyp/&apos;</span><br><span class="line">    &apos;c78bf172206ce24f77d6363a2d754b59/raw/&apos;</span><br><span class="line">    &apos;c353e8ef842413cae56ae3920b8fd78468aa4cb2/&apos;</span><br><span class="line">    &apos;usa-agricultural-exports-2011.csv&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def generate_table(dataframe, max_rows=10):</span><br><span class="line">    return html.Table(</span><br><span class="line">        # Header</span><br><span class="line">        [html.Tr([html.Th(col) for col in dataframe.columns])] +</span><br><span class="line"></span><br><span class="line">        # Body</span><br><span class="line">        [html.Tr([</span><br><span class="line">            html.Td(dataframe.iloc[i][col]) for col in dataframe.columns</span><br><span class="line">        ]) for i in range(min(len(dataframe), max_rows))]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">external_stylesheets = [&apos;https://codepen.io/chriddyp/pen/bWLwgP.css&apos;]</span><br><span class="line"></span><br><span class="line">app = dash.Dash(__name__, external_stylesheets=external_stylesheets)</span><br><span class="line"></span><br><span class="line">app.layout = html.Div(children=[</span><br><span class="line">    html.H4(children=&apos;US Agriculture Exports (2011)&apos;),</span><br><span class="line">    generate_table(df)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run_server(debug=True)</span><br></pre></td></tr></table></figure><h2 id="更多的可视化组件"><a href="#更多的可视化组件" class="headerlink" title="更多的可视化组件"></a>更多的可视化组件</h2><p>dash_core_components库中，有一个Graph的组件，这是一个绘制可交互的可视化组建，使用开源的plotly.js，支持35种图像绘制。</p><p>graph中的figure参数，跟plotly.py中的figure参数是一样的，你可以参考<a href="https://plot.ly/python/" target="_blank" rel="noopener">plotly</a>的官方文档了解更多。</p><h2 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h2><p>dash支持markdown,用‘’‘括起来，然后在其中写markdown即可，最后在html中，将children指定为该markdown格式的string对象。</p><h2 id="Core-Components"><a href="#Core-Components" class="headerlink" title="Core Components"></a>Core Components</h2><p>The dash_core_components includes a set of higher-level components like dropdowns, graphs, markdown blocks, and more.</p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>你可以在python命令行中，使用help(dcc.Dropdown)类似形式来了解dash的元素。</p><h2 id="Layout-总结"><a href="#Layout-总结" class="headerlink" title="Layout 总结"></a>Layout 总结</h2><p>The layout of a Dash app describes what the app looks like. The layout is a hierarchical tree of components. The dash_html_components library provides classes for all of the HTML tags and the keyword arguments describe the HTML attributes like style, className, and id. The dash_core_components library generates higher-level components like controls and graphs.</p><h1 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h1><p>在上一章，我们学习dash的基本组件，长什么样子，html模块提供了许多python实现的html类，可以用来构建html元素，同时你也可以使用html的属性如stile，classname，id来自定义html的元素。</p><p>这一章，我们来看看如何和Dash交互。</p><h2 id="实时数据跟踪"><a href="#实时数据跟踪" class="headerlink" title="实时数据跟踪"></a>实时数据跟踪</h2><p>首先看一个实时数据显示的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import dash</span><br><span class="line">import dash_core_components as dcc</span><br><span class="line">import dash_html_components as html #for tags like div,table</span><br><span class="line">from dash.dependencies import Input,Output</span><br><span class="line"></span><br><span class="line">app = dash.Dash() # dash is a flask app</span><br><span class="line">app.layout = html.Div(children=[</span><br><span class="line">    dcc.Input(id=&apos;input&apos;,value=&apos;Enter something&apos;,type=&apos;text&apos;)</span><br><span class="line">    html.Div(id=&apos;output&apos;)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">@app.callback(</span><br><span class="line">    Output(component_id=&apos;output&apos;,component_property=&apos;children&apos;),</span><br><span class="line">    [Input(component_id=&apos;input&apos;,component_property=&apos;value&apos;)]</span><br><span class="line">)</span><br><span class="line">def update_value(input_data): # update_value并没有在哪里运行，这个效果是怎么实现的？当input更新的时候，被装饰器包裹的函数，会自动运行</span><br><span class="line">    return &quot;Input: &#123;&#125;&quot;.format(input_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run_server(debug=True)</span><br></pre></td></tr></table></figure><ul><li>在children中，使用的是dcc.Input，不是dependencies中的</li><li>dcc.Input()基本上是类似html中的文本输入框,且必须指定id</li><li>@可以理解为，在之后的函数即update_value运行后，对它的返回值进行二次处理（装饰），在这类是更新网页中的值</li><li>当input更新的时候，被装饰器包裹的函数，会自动运行</li><li>component_id和component_property是可以省略的,The component_id and component_property keywords are optional</li><li>注意到，我们没有去设置input的初值，事实上，dash运行的时候，会先调用一遍callback，这样就能达到设置初始值的目的</li></ul><p>看一下官方的文档:</p><p><em>In Dash, the inputs and outputs of our application are simply the properties of a particular component. In this example, our input is the “value” property of the component that has the ID “my-id”. Our output is the “children” property of the component with the ID “my-div”.</em></p><p>那么，为什么output是 Output() 这样的，input是 [input()] 的呢？</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.jianshu.com/p/fd746acbdf1e" target="_blank" rel="noopener">装饰器</a></li><li><a href="https://dash.plot.ly/getting-started-part-2" target="_blank" rel="noopener">关于这一节的更多例子与解答</a></li></ul><h2 id="Slider图绘制"><a href="#Slider图绘制" class="headerlink" title="Slider图绘制"></a>Slider图绘制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import dash</span><br><span class="line">import dash_core_components as dcc</span><br><span class="line">import dash_html_components as html</span><br><span class="line">import pandas as pd</span><br><span class="line">import plotly.graph_objs as go</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(</span><br><span class="line">    &apos;https://raw.githubusercontent.com/plotly/&apos;</span><br><span class="line">    &apos;datasets/master/gapminderDataFiveYear.csv&apos;)</span><br><span class="line"></span><br><span class="line">external_stylesheets = [&apos;https://codepen.io/chriddyp/pen/bWLwgP.css&apos;]</span><br><span class="line"></span><br><span class="line">app = dash.Dash(__name__, external_stylesheets=external_stylesheets)</span><br><span class="line"></span><br><span class="line">app.layout = html.Div([</span><br><span class="line">    dcc.Graph(id=&apos;graph-with-slider&apos;),</span><br><span class="line">    dcc.Slider(</span><br><span class="line">        id=&apos;year-slider&apos;,</span><br><span class="line">        min=df[&apos;year&apos;].min(),</span><br><span class="line">        max=df[&apos;year&apos;].max(),</span><br><span class="line">        value=df[&apos;year&apos;].min(),</span><br><span class="line">        marks=&#123;str(year): str(year) for year in df[&apos;year&apos;].unique()&#125;</span><br><span class="line">    )</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.callback(</span><br><span class="line">    dash.dependencies.Output(&apos;graph-with-slider&apos;, &apos;figure&apos;),</span><br><span class="line">    [dash.dependencies.Input(&apos;year-slider&apos;, &apos;value&apos;)])</span><br><span class="line">def update_figure(selected_year):</span><br><span class="line">    filtered_df = df[df.year == selected_year]</span><br><span class="line">    traces = []</span><br><span class="line">    for i in filtered_df.continent.unique():</span><br><span class="line">        df_by_continent = filtered_df[filtered_df[&apos;continent&apos;] == i]</span><br><span class="line">        traces.append(go.Scatter(</span><br><span class="line">            x=df_by_continent[&apos;gdpPercap&apos;],</span><br><span class="line">            y=df_by_continent[&apos;lifeExp&apos;],</span><br><span class="line">            text=df_by_continent[&apos;country&apos;],</span><br><span class="line">            mode=&apos;markers&apos;,</span><br><span class="line">            opacity=0.7,</span><br><span class="line">            marker=&#123;</span><br><span class="line">                &apos;size&apos;: 15,</span><br><span class="line">                &apos;line&apos;: &#123;&apos;width&apos;: 0.5, &apos;color&apos;: &apos;white&apos;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            name=i</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        &apos;data&apos;: traces,</span><br><span class="line">        &apos;layout&apos;: go.Layout(</span><br><span class="line">            xaxis=&#123;&apos;type&apos;: &apos;log&apos;, &apos;title&apos;: &apos;GDP Per Capita&apos;&#125;,</span><br><span class="line">            yaxis=&#123;&apos;title&apos;: &apos;Life Expectancy&apos;, &apos;range&apos;: [20, 90]&#125;,</span><br><span class="line">            margin=&#123;&apos;l&apos;: 40, &apos;b&apos;: 40, &apos;t&apos;: 10, &apos;r&apos;: 10&#125;,</span><br><span class="line">            legend=&#123;&apos;x&apos;: 0, &apos;y&apos;: 1&#125;,</span><br><span class="line">            hovermode=&apos;closest&apos;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run_server(debug=True)</span><br></pre></td></tr></table></figure><ul><li>使用pandas读取数据</li><li>dcc.Slider()指定来Slider图的基本属性</li><li>当数据有更新的时候，update_figure方法就会被调用</li><li>go.Scatter定义了每一个Scatter应该是什么样子，其中的数据从df中分析得到</li><li>traces是所有Scatter组成的数组，也是该图的数据源</li></ul><p>⚠️：The callback does not modify the original data, it just creates copies of the dataframe by filtered through pandas filters. This is important: <strong>Your callbacks should never mutate variables outside of their scope</strong></p><h2 id="多个输入"><a href="#多个输入" class="headerlink" title="多个输入"></a>多个输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">import dash</span><br><span class="line">import dash_core_components as dcc</span><br><span class="line">import dash_html_components as html</span><br><span class="line">import pandas as pd</span><br><span class="line">import plotly.graph_objs as go</span><br><span class="line"></span><br><span class="line">external_stylesheets = [&apos;https://codepen.io/chriddyp/pen/bWLwgP.css&apos;]</span><br><span class="line"></span><br><span class="line">app = dash.Dash(__name__, external_stylesheets=external_stylesheets)</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(</span><br><span class="line">    &apos;https://gist.githubusercontent.com/chriddyp/&apos;</span><br><span class="line">    &apos;cb5392c35661370d95f300086accea51/raw/&apos;</span><br><span class="line">    &apos;8e0768211f6b747c0db42a9ce9a0937dafcbd8b2/&apos;</span><br><span class="line">    &apos;indicators.csv&apos;)</span><br><span class="line"></span><br><span class="line">available_indicators = df[&apos;Indicator Name&apos;].unique()</span><br><span class="line"></span><br><span class="line">app.layout = html.Div([</span><br><span class="line">    html.Div([</span><br><span class="line"></span><br><span class="line">        html.Div([</span><br><span class="line">            dcc.Dropdown(</span><br><span class="line">                id=&apos;xaxis-column&apos;,</span><br><span class="line">                options=[&#123;&apos;label&apos;: i, &apos;value&apos;: i&#125; for i in available_indicators],</span><br><span class="line">                value=&apos;Fertility rate, total (births per woman)&apos;</span><br><span class="line">            ),</span><br><span class="line">            dcc.RadioItems(</span><br><span class="line">                id=&apos;xaxis-type&apos;,</span><br><span class="line">                options=[&#123;&apos;label&apos;: i, &apos;value&apos;: i&#125; for i in [&apos;Linear&apos;, &apos;Log&apos;]],</span><br><span class="line">                value=&apos;Linear&apos;,</span><br><span class="line">                labelStyle=&#123;&apos;display&apos;: &apos;inline-block&apos;&#125;</span><br><span class="line">            )</span><br><span class="line">        ],</span><br><span class="line">        style=&#123;&apos;width&apos;: &apos;48%&apos;, &apos;display&apos;: &apos;inline-block&apos;&#125;),</span><br><span class="line"></span><br><span class="line">        html.Div([</span><br><span class="line">            dcc.Dropdown(</span><br><span class="line">                id=&apos;yaxis-column&apos;,</span><br><span class="line">                options=[&#123;&apos;label&apos;: i, &apos;value&apos;: i&#125; for i in available_indicators],</span><br><span class="line">                value=&apos;Life expectancy at birth, total (years)&apos;</span><br><span class="line">            ),</span><br><span class="line">            dcc.RadioItems(</span><br><span class="line">                id=&apos;yaxis-type&apos;,</span><br><span class="line">                options=[&#123;&apos;label&apos;: i, &apos;value&apos;: i&#125; for i in [&apos;Linear&apos;, &apos;Log&apos;]],</span><br><span class="line">                value=&apos;Linear&apos;,</span><br><span class="line">                labelStyle=&#123;&apos;display&apos;: &apos;inline-block&apos;&#125;</span><br><span class="line">            )</span><br><span class="line">        ],style=&#123;&apos;width&apos;: &apos;48%&apos;, &apos;float&apos;: &apos;right&apos;, &apos;display&apos;: &apos;inline-block&apos;&#125;)</span><br><span class="line">    ]),</span><br><span class="line"></span><br><span class="line">    dcc.Graph(id=&apos;indicator-graphic&apos;),</span><br><span class="line"></span><br><span class="line">    dcc.Slider(</span><br><span class="line">        id=&apos;year--slider&apos;,</span><br><span class="line">        min=df[&apos;Year&apos;].min(),</span><br><span class="line">        max=df[&apos;Year&apos;].max(),</span><br><span class="line">        value=df[&apos;Year&apos;].max(),</span><br><span class="line">        marks=&#123;str(year): str(year) for year in df[&apos;Year&apos;].unique()&#125;</span><br><span class="line">    )</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">@app.callback(</span><br><span class="line">    dash.dependencies.Output(&apos;indicator-graphic&apos;, &apos;figure&apos;),</span><br><span class="line">    [dash.dependencies.Input(&apos;xaxis-column&apos;, &apos;value&apos;),</span><br><span class="line">     dash.dependencies.Input(&apos;yaxis-column&apos;, &apos;value&apos;),</span><br><span class="line">     dash.dependencies.Input(&apos;xaxis-type&apos;, &apos;value&apos;),</span><br><span class="line">     dash.dependencies.Input(&apos;yaxis-type&apos;, &apos;value&apos;),</span><br><span class="line">     dash.dependencies.Input(&apos;year--slider&apos;, &apos;value&apos;)])</span><br><span class="line">def update_graph(xaxis_column_name, yaxis_column_name,</span><br><span class="line">                 xaxis_type, yaxis_type,</span><br><span class="line">                 year_value):</span><br><span class="line">    dff = df[df[&apos;Year&apos;] == year_value]</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        &apos;data&apos;: [go.Scatter(</span><br><span class="line">            x=dff[dff[&apos;Indicator Name&apos;] == xaxis_column_name][&apos;Value&apos;],</span><br><span class="line">            y=dff[dff[&apos;Indicator Name&apos;] == yaxis_column_name][&apos;Value&apos;],</span><br><span class="line">            text=dff[dff[&apos;Indicator Name&apos;] == yaxis_column_name][&apos;Country Name&apos;],</span><br><span class="line">            mode=&apos;markers&apos;,</span><br><span class="line">            marker=&#123;</span><br><span class="line">                &apos;size&apos;: 15,</span><br><span class="line">                &apos;opacity&apos;: 0.5,</span><br><span class="line">                &apos;line&apos;: &#123;&apos;width&apos;: 0.5, &apos;color&apos;: &apos;white&apos;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )],</span><br><span class="line">        &apos;layout&apos;: go.Layout(</span><br><span class="line">            xaxis=&#123;</span><br><span class="line">                &apos;title&apos;: xaxis_column_name,</span><br><span class="line">                &apos;type&apos;: &apos;linear&apos; if xaxis_type == &apos;Linear&apos; else &apos;log&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            yaxis=&#123;</span><br><span class="line">                &apos;title&apos;: yaxis_column_name,</span><br><span class="line">                &apos;type&apos;: &apos;linear&apos; if yaxis_type == &apos;Linear&apos; else &apos;log&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            margin=&#123;&apos;l&apos;: 40, &apos;b&apos;: 40, &apos;t&apos;: 10, &apos;r&apos;: 0&#125;,</span><br><span class="line">            hovermode=&apos;closest&apos;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run_server(debug=True)</span><br></pre></td></tr></table></figure><h2 id="多个输出"><a href="#多个输出" class="headerlink" title="多个输出"></a>多个输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import dash</span><br><span class="line">import dash_core_components as dcc</span><br><span class="line">import dash_html_components as html</span><br><span class="line"></span><br><span class="line">external_stylesheets = [&apos;https://codepen.io/chriddyp/pen/bWLwgP.css&apos;]</span><br><span class="line"></span><br><span class="line">app = dash.Dash(__name__, external_stylesheets=external_stylesheets)</span><br><span class="line"></span><br><span class="line">app.layout = html.Div([</span><br><span class="line">    dcc.RadioItems(</span><br><span class="line">        id=&apos;dropdown-a&apos;,</span><br><span class="line">        options=[&#123;&apos;label&apos;: i, &apos;value&apos;: i&#125; for i in [&apos;Canada&apos;, &apos;USA&apos;, &apos;Mexico&apos;]],</span><br><span class="line">        value=&apos;Canada&apos;</span><br><span class="line">    ),</span><br><span class="line">    html.Div(id=&apos;output-a&apos;),</span><br><span class="line"></span><br><span class="line">    dcc.RadioItems(</span><br><span class="line">        id=&apos;dropdown-b&apos;,</span><br><span class="line">        options=[&#123;&apos;label&apos;: i, &apos;value&apos;: i&#125; for i in [&apos;MTL&apos;, &apos;NYC&apos;, &apos;SF&apos;]],</span><br><span class="line">        value=&apos;MTL&apos;</span><br><span class="line">    ),</span><br><span class="line">    html.Div(id=&apos;output-b&apos;)</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.callback(</span><br><span class="line">    dash.dependencies.Output(&apos;output-a&apos;, &apos;children&apos;),</span><br><span class="line">    [dash.dependencies.Input(&apos;dropdown-a&apos;, &apos;value&apos;)])</span><br><span class="line">def callback_a(dropdown_value):</span><br><span class="line">    return &apos;You\&apos;ve selected &quot;&#123;&#125;&quot;&apos;.format(dropdown_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.callback(</span><br><span class="line">    dash.dependencies.Output(&apos;output-b&apos;, &apos;children&apos;),</span><br><span class="line">    [dash.dependencies.Input(&apos;dropdown-b&apos;, &apos;value&apos;)])</span><br><span class="line">def callback_b(dropdown_value):</span><br><span class="line">    return &apos;You\&apos;ve selected &quot;&#123;&#125;&quot;&apos;.format(dropdown_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run_server(debug=True)</span><br></pre></td></tr></table></figure><h1 id="状态监听"><a href="#状态监听" class="headerlink" title="状态监听"></a>状态监听</h1><p>之前的代码中，dash会对我们的输入实时监听，一旦有变化就dash就会去更新数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import dash</span><br><span class="line">import dash_core_components as dcc</span><br><span class="line">import dash_html_components as html</span><br><span class="line">from dash.dependencies import Input, Output</span><br><span class="line"></span><br><span class="line">external_stylesheets = [&apos;https://codepen.io/chriddyp/pen/bWLwgP.css&apos;]</span><br><span class="line"></span><br><span class="line">app = dash.Dash(__name__, external_stylesheets=external_stylesheets)</span><br><span class="line"></span><br><span class="line">app.layout = html.Div([</span><br><span class="line">    dcc.Input(id=&apos;input-1&apos;, type=&apos;text&apos;, value=&apos;Montréal&apos;),</span><br><span class="line">    dcc.Input(id=&apos;input-2&apos;, type=&apos;text&apos;, value=&apos;Canada&apos;),</span><br><span class="line">    html.Div(id=&apos;output&apos;)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.callback(Output(&apos;output&apos;, &apos;children&apos;),</span><br><span class="line">              [Input(&apos;input-1&apos;, &apos;value&apos;),</span><br><span class="line">               Input(&apos;input-2&apos;, &apos;value&apos;)])</span><br><span class="line">def update_output(input1, input2):</span><br><span class="line">    return u&apos;Input 1 is &quot;&#123;&#125;&quot; and Input 2 is &quot;&#123;&#125;&quot;&apos;.format(input1, input2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run_server(debug=True)</span><br></pre></td></tr></table></figure><p>但有时候我们不想这样，我们希望定义一个按钮，等我们输入好了，自己点击按钮来让dash识别，这时候可以这样做:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import dash</span><br><span class="line">import dash_core_components as dcc</span><br><span class="line">import dash_html_components as html</span><br><span class="line">from dash.dependencies import Input, Output, State</span><br><span class="line"></span><br><span class="line">external_stylesheets = [&apos;https://codepen.io/chriddyp/pen/bWLwgP.css&apos;]</span><br><span class="line"></span><br><span class="line">app = dash.Dash(__name__, external_stylesheets=external_stylesheets)</span><br><span class="line"></span><br><span class="line">app.layout = html.Div([</span><br><span class="line">    dcc.Input(id=&apos;input-1-state&apos;, type=&apos;text&apos;, value=&apos;Montréal&apos;),</span><br><span class="line">    dcc.Input(id=&apos;input-2-state&apos;, type=&apos;text&apos;, value=&apos;Canada&apos;),</span><br><span class="line">    html.Button(id=&apos;submit-button&apos;, n_clicks=0, children=&apos;Submit&apos;),</span><br><span class="line">    html.Div(id=&apos;output-state&apos;)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.callback(Output(&apos;output-state&apos;, &apos;children&apos;),</span><br><span class="line">              [Input(&apos;submit-button&apos;, &apos;n_clicks&apos;)],</span><br><span class="line">              [State(&apos;input-1-state&apos;, &apos;value&apos;),</span><br><span class="line">               State(&apos;input-2-state&apos;, &apos;value&apos;)])</span><br><span class="line">def update_output(n_clicks, input1, input2):</span><br><span class="line">    return u&apos;&apos;&apos;</span><br><span class="line">        The Button has been pressed &#123;&#125; times,</span><br><span class="line">        Input 1 is &quot;&#123;&#125;&quot;,</span><br><span class="line">        and Input 2 is &quot;&#123;&#125;&quot;</span><br><span class="line">    &apos;&apos;&apos;.format(n_clicks, input1, input2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run_server(debug=True)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Dash is a productive Python framework for building web applications,This part contains dash install, layout of dash, how to style the html tag in dash, using the callbacks, update data in real time,etc.&lt;br&gt;Dash是一个高效的 Web APP构建框架，这个部分包含了Dash的安装，dash中的layout，如何去个性化dash中的html元素，以及复用dash的元素，如何使用dash的回调函数，实时数据监控等.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="python" scheme="http://wittyfans.com/tags/python/"/>
    
      <category term="dash" scheme="http://wittyfans.com/tags/dash/"/>
    
      <category term="web" scheme="http://wittyfans.com/tags/web/"/>
    
      <category term="data" scheme="http://wittyfans.com/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>Python and Flask - CS50_Beyond_2019 Notes</title>
    <link href="http://wittyfans.com/coding/Python-and-Flask-CS50-Beyond-2019-Notes.html"/>
    <id>http://wittyfans.com/coding/Python-and-Flask-CS50-Beyond-2019-Notes.html</id>
    <published>2019-01-30T13:19:31.000Z</published>
    <updated>2019-01-31T13:58:51.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Flask 是一个 Python 实现的 Web 开发微框架.</p></blockquote><a id="more"></a><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>创建一个文件，然后进入该文件夹，创建一个py文件，然后在命令后导入，这样flask才知道要运行哪个程序:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export FLASK_APP=hello.py</span><br></pre></td></tr></table></figure><p>导入以后就可以直接在当前目录使用flask run 了。</p><h1 id="第一个flask程序"><a href="#第一个flask程序" class="headerlink" title="第一个flask程序"></a>第一个flask程序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,render_template</span><br><span class="line">app = Flask(__name__) # 新建一个flask app</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;) </span><br><span class="line">def index():</span><br><span class="line">    return &quot;Hello,Word!&quot;</span><br></pre></td></tr></table></figure><ul><li>@app.route(“/“)是一个装饰器，如果有人访问/，那么就运行被装饰器装饰的函数，也就是下面返回Hello,word！</li></ul><h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><h2 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&quot;/wittyfans&quot;) </span><br><span class="line">def wittyfans():</span><br><span class="line">    return &quot;Hello, My master!!!&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&lt;string:name&gt;&quot;) </span><br><span class="line">def hello(name):</span><br><span class="line">    name = name.capitalize()</span><br><span class="line">    return f&quot;Hello! &#123;name&#125;&quot;</span><br></pre></td></tr></table></figure><p>如果输入localhost:/wittyfans就返回”Hello, My master!!!”,如果是别的就返回他输入的名字。</p><blockquote><p>在route中定义变量，它可以传到函数里使用.flask会路由到最具体的网址，也就是说，输入/wittyfans还是会被上面的函数处理.</p></blockquote><h2 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&quot;/&lt;string:admin_name&gt;/&lt;string:password&gt;&quot;) </span><br><span class="line">def varify(admin_name,password):</span><br><span class="line">    if admin_name == &apos;wittyfans&apos; and password == &apos;123&apos;:</span><br><span class="line">        return &apos;Welcome here&apos;</span><br><span class="line">    else:</span><br><span class="line">        return &apos;error&apos;</span><br></pre></td></tr></table></figure><h1 id="使用html文件构建网页"><a href="#使用html文件构建网页" class="headerlink" title="使用html文件构建网页"></a>使用html文件构建网页</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&quot;index.html&quot;)</span><br></pre></td></tr></table></figure><p>对于网页来说，我们更多的是传出html文件,这时候需要在根目录新建templates文件夹，并将html文件放在其中</p><p>我们可以将输入的值做处理后重新填充给html文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&lt;string:name&gt;&apos;)</span><br><span class="line">def index(name):</span><br><span class="line">    return render_template(&quot;index.html&quot;,name=name.capitalize())</span><br></pre></td></tr></table></figure><h1 id="示例：判断是否是新年"><a href="#示例：判断是否是新年" class="headerlink" title="示例：判断是否是新年"></a>示例：判断是否是新年</h1><p>逻辑部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    is_new_years = now.month == 1 and now.day == 1</span><br><span class="line">    print(is_new_years)</span><br><span class="line">    return render_template(&quot;index.html&quot;,is_new_years=is_new_years)</span><br></pre></td></tr></table></figure><p>html中,使用Conditional Templating</p><figure class="highlight plain"><figcaption><span>html> </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;</span><br><span class="line">            wittyfans</span><br><span class="line">        &lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &#123;% if is_new_years %&#125;</span><br><span class="line">            &lt;h1&gt;YES&lt;/h1&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            &lt;h1&gt;NO&lt;/h1&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.youtube.com/watch?v=pP23CtOI-1U&amp;t=2772s" target="_blank" rel="noopener">Python and Flask - CS50 Beyond 2019)</a></li><li><a href="https://dormousehole.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Flask 是一个 Python 实现的 Web 开发微框架.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="python" scheme="http://wittyfans.com/tags/python/"/>
    
      <category term="flask" scheme="http://wittyfans.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>用Python来排班？</title>
    <link href="http://wittyfans.com/coding/%E7%94%A8Python%E6%9D%A5%E6%8E%92%E7%8F%AD%EF%BC%9F.html"/>
    <id>http://wittyfans.com/coding/用Python来排班？.html</id>
    <published>2019-01-16T12:58:01.000Z</published>
    <updated>2019-01-16T13:23:57.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这也是可以做的的，并不比excel差哦</p></blockquote><a id="more"></a><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><p>首先我们需要一份原数据，我得到的数据如下：</p><p><img src="https://bn1301files.storage.live.com/y4m21Og1jBfF-UnSCjBwTTl8sK4ek_tNWEsoLbHnc5WgckaDFeMLEikagYp4GIem_ZafSMVF99qhAKoJyFeQQGAj6WRZ1oBjqvV5rv4qEIM8kqdGQvefUtYNl3jG5u6MP5M6HB3G5AU2ZSmPMJKbD2wJjtAvECQ82EB4276NlVCV3JPUB-tnFXxSPyOFQiK95dQMFz2XF_xC_VwXrZMdNNaww/Raw_data.png?psid=1&amp;width=2743&amp;height=1354" alt=""></p><ul><li>Name: 上班的同事</li><li>A和V: 不同的班次</li><li>0: 当天休息</li></ul><p>我们的需求是，休息时间由组长事先填好，随后随机将班次分给每天上班的人，需要保证分出去的班次不可以重复，并且是随机的，即每个人不可以每天都是一样的班。</p><p>首先我们导入相关的包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import random</span><br></pre></td></tr></table></figure><p>新建一个班次生成类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Schedules:  </span><br><span class="line">    def __init__(self,schedules):</span><br><span class="line">        self._index = len(schedules)</span><br><span class="line">        self._schedules = schedules</span><br><span class="line">        </span><br><span class="line">    def get_schedules(self):</span><br><span class="line">        if self._index &gt; 0:                </span><br><span class="line">            pointer = random.choice([x for x in range(len(self._schedules))])</span><br><span class="line">            scheduleType = self._schedules[pointer]</span><br><span class="line">            del self._schedules[pointer]</span><br><span class="line">            self._index -= 1</span><br><span class="line">            return scheduleType</span><br><span class="line">        else:</span><br><span class="line">            return None</span><br></pre></td></tr></table></figure><p>这个类的作用就是，你初始化的是给他一些班次列表，他会返回一个随机的班次，如果班级列表中的班次已经分配完了，则返回None。</p><p>然后我们再写一个针对每一列设置班次的方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def set_schedule(col):</span><br><span class="line">    if col.name != &apos;Name&apos;:</span><br><span class="line">        colSchedules = col</span><br><span class="line">        # 该列中值不等于0的索引</span><br><span class="line">        pointers = list(col[col != 0].index)</span><br><span class="line">        # 值班类型</span><br><span class="line">        scheduleType = [&apos;A1&apos;,&apos;A2&apos;,&apos;A3&apos;,&apos;A4&apos;,&apos;V3&apos;,&apos;V2&apos;,&apos;A5&apos;,&apos;A6&apos;,&apos;A8&apos;,&apos;A7&apos;,&apos;V1&apos;,&apos;A9&apos;,&apos;A0&apos;]</span><br><span class="line">        random.shuffle(scheduleType)</span><br><span class="line">        random.shuffle(pointers)</span><br><span class="line">        for pointer in pointers:</span><br><span class="line">#             print(&quot;正在填第&#123;&#125;个&quot;.format(pointer))</span><br><span class="line">#             print(&quot;班表还剩&#123;&#125;个&quot;.format(len(scheduleType)))</span><br><span class="line">            if len(scheduleType) &gt; 0:</span><br><span class="line">                schedule = scheduleType.pop()</span><br><span class="line">#                 print(&quot;拿到班的类型是&#123;&#125;&quot;.format(schedule))</span><br><span class="line">                colSchedules[pointer] = schedule</span><br><span class="line">#                 print(&quot;修改之后的班表是&#123;&#125;&quot;.format(colSchedules))</span><br><span class="line">            else:</span><br><span class="line">                colSchedules[pointer] = &apos;A&apos;</span><br><span class="line">                continue</span><br><span class="line">        col = colSchedules</span><br><span class="line">    else:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><p>这里我将班次写在了方法里面，当然你也可以从外面传进去，该一下参数即可。最后，用pandas先将原始数据导入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_excel(&quot;/Users/wittyfans/Documents/工作/Python NoteBook/Schedule/Schedule.xlsx&quot;)</span><br></pre></td></tr></table></figure><p>运行就可以看到数据啦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">days = [x for x in data.columns if x  != &apos;Name&apos;]</span><br><span class="line">data.apply(set_schedule)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><p>你也可以将数据导出为excel，使用pandas的to_excel方法即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.to_excel(filePath)</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://bn1301files.storage.live.com/y4mgtmM4T-r7AH8W5f3qKw2Lwo5j3UcAzDQKqjXx64gUN0v-af8c9K1_5k36eZSR81X0UKiwKBZCu7aiq8Syryn3bdniNX_VB1UQGVR0QQubDCz31GMRRdyAFmOHh1y82j2hFmy1zc_NtPtVNTPASdhpKriZpKHtrl2xYcSNvf1hVPIsaTz-QhoZwhmeTFxaw78oywC9LXkQpGP0YSApebQ3w/a.png?psid=1&amp;width=2146&amp;height=1146" alt="第一次班表"></p><p><img src="https://bn1301files.storage.live.com/y4m799Xq0W25h8l7V_3QOEXZgBFG2hhTi_5IEVz1G6ZwvNe3uJYNl1_PNw7z3aaWDGdjZ6YgXWb1-Jdm_LpkexITUQ5Q6kKUmZAxLOsH6Idfxx5hcoyJE08fRdZEuN_mZJRn6z3egU9E1UH_EQsSoEVLOfJf6EzpJhhvxfyTiwnYpkrGwI7mu3eOI3EOJjgbbrFclxQV9ZXEXtBS5c-PD6FYg/b.png?psid=1&amp;width=2144&amp;height=1154" alt="第二次班表"></p><p><img src="https://bn1301files.storage.live.com/y4mmmd_AK_zt5HwbnyJ4cKtO6UIRCEfot9dkcnyWXRo0T-Jh1TQjoTLxp1ujOvjh9rKtFxrH7hwgAtQni_OvfKOEDIL2oWoJvUjHAfoEadE2MVtqP-R2TWSej27Scl1Sh7oIvviZuB5dZlekB7f2Zs7nVswpPS-fldACbYuKJLU8LH85C7Dc0NcXCVuxS_jnZszmMoh4XXumEPzpxL6JV97rQ/c.png?psid=1&amp;width=2132&amp;height=1132" alt="第三次运行"></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">class Schedules:  </span><br><span class="line">    def __init__(self,schedules):</span><br><span class="line">        self._index = len(schedules)</span><br><span class="line">        self._schedules = schedules</span><br><span class="line">        </span><br><span class="line">    def get_schedules(self):</span><br><span class="line">        if self._index &gt; 0:                </span><br><span class="line">            pointer = random.choice([x for x in range(len(self._schedules))])</span><br><span class="line">            scheduleType = self._schedules[pointer]</span><br><span class="line">            del self._schedules[pointer]</span><br><span class="line">            self._index -= 1</span><br><span class="line">            return scheduleType</span><br><span class="line">        else:</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">def set_schedule(col):</span><br><span class="line">    if col.name != &apos;Name&apos;:</span><br><span class="line">        colSchedules = col</span><br><span class="line">        # 该列中值不等于0的索引</span><br><span class="line">        pointers = list(col[col != 0].index)</span><br><span class="line">        # 值班类型</span><br><span class="line">        scheduleType = [&apos;A1&apos;,&apos;A2&apos;,&apos;A3&apos;,&apos;A4&apos;,&apos;V3&apos;,&apos;V2&apos;,&apos;A5&apos;,&apos;A6&apos;,&apos;A8&apos;,&apos;A7&apos;,&apos;V1&apos;,&apos;A9&apos;,&apos;A0&apos;]</span><br><span class="line">        random.shuffle(scheduleType)</span><br><span class="line">        random.shuffle(pointers)</span><br><span class="line">        for pointer in pointers:</span><br><span class="line">#             print(&quot;正在填第&#123;&#125;个&quot;.format(pointer))</span><br><span class="line">#             print(&quot;班表还剩&#123;&#125;个&quot;.format(len(scheduleType)))</span><br><span class="line">            if len(scheduleType) &gt; 0:</span><br><span class="line">                schedule = scheduleType.pop()</span><br><span class="line">#                 print(&quot;拿到班的类型是&#123;&#125;&quot;.format(schedule))</span><br><span class="line">                colSchedules[pointer] = schedule</span><br><span class="line">#                 print(&quot;修改之后的班表是&#123;&#125;&quot;.format(colSchedules))</span><br><span class="line">            else:</span><br><span class="line">                colSchedules[pointer] = &apos;A&apos;</span><br><span class="line">                continue</span><br><span class="line">        col = colSchedules</span><br><span class="line">    else:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">data = pd.read_excel(&quot;/Users/wittyfans/Documents/工作/Python NoteBook/Schedule/Schedule.xlsx&quot;)</span><br><span class="line">days = [x for x in data.columns if x  != &apos;Name&apos;]</span><br><span class="line">data.apply(set_schedule)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这也是可以做的的，并不比excel差哦&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="python" scheme="http://wittyfans.com/tags/python/"/>
    
      <category term="pandas" scheme="http://wittyfans.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>Python如何连接WindowsSMB共享文件夹?</title>
    <link href="http://wittyfans.com/coding/Python%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5WindowsSMB%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.html"/>
    <id>http://wittyfans.com/coding/Python如何连接WindowsSMB共享文件夹.html</id>
    <published>2019-01-16T12:48:05.000Z</published>
    <updated>2019-01-16T12:50:19.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>想访问 Windows SMB 服务器上的共享文件？试试这招</p></blockquote><a id="more"></a><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>安装pysmb, pip install pysmb</li><li>导入相关的包</li><li>使用方法见注释</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://pysmb.readthedocs.io/en/latest/api/smb_SMBConnection.html" target="_blank" rel="noopener">SMBConnection Class</a></li><li><a href="http://melonteam.com/posts/cong_yi_ge_xiao_ren_wu_kai_shi__python_xue_xi_bi_ji/#%E5%85%B3%E4%BA%8E%E7%88%AC%E8%99%AB" target="_blank" rel="noopener">一个小任务</a></li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from smb.SMBConnection import SMBConnection</span><br><span class="line"># 新建连接对象</span><br><span class="line">conn = SMBConnection(&apos;domain_user_name&apos;, &apos;you_password&apos;, &apos;device_hostname&apos;, &apos;server_ip&apos;, domain = &apos;domain_address&apos;, use_ntlm_v2=True, is_direct_tcp=True)</span><br><span class="line"># 返回值为布尔型，表示连接成功与否</span><br><span class="line">result = conn.connect(&apos;server_ip&apos;, 445)</span><br><span class="line"></span><br><span class="line"># 检索文件</span><br><span class="line">for f in conn.listPath(&apos;share_folder_name&apos;,&apos;folder_name_in_prvious_one&apos;):</span><br><span class="line">    print(f.filename)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;想访问 Windows SMB 服务器上的共享文件？试试这招&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="python" scheme="http://wittyfans.com/tags/python/"/>
    
      <category term="windows" scheme="http://wittyfans.com/tags/windows/"/>
    
      <category term="smb" scheme="http://wittyfans.com/tags/smb/"/>
    
  </entry>
  
  <entry>
    <title>如何用Scrapy开发一个贴吧爬虫</title>
    <link href="http://wittyfans.com/coding/%E5%A6%82%E4%BD%95%E7%94%A8Scrapy%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E8%B4%B4%E5%90%A7%E7%88%AC%E8%99%AB.html"/>
    <id>http://wittyfans.com/coding/如何用Scrapy开发一个贴吧爬虫.html</id>
    <published>2019-01-16T12:38:35.000Z</published>
    <updated>2019-01-16T12:44:39.158Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就是看看大家在贴吧玩啥，爬了100多兆母校的数据，回来慢慢分析，以后再做个数据可视化，感兴趣的可以拿去爬一下自己喜欢的贴吧。</p></blockquote><a id="more"></a><h1 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a>scrapy</h1><p>A scrapy projects, <a href="https://github.com/wittyfans/scrapy" target="_blank" rel="noopener">Github Link</a>.</p><h1 id="贴吧爬虫开发记录"><a href="#贴吧爬虫开发记录" class="headerlink" title="贴吧爬虫开发记录"></a>贴吧爬虫开发记录</h1><h2 id="抓取数据并存储"><a href="#抓取数据并存储" class="headerlink" title="抓取数据并存储"></a>抓取数据并存储</h2><p>因为我要抓取很多链接，最开始的想法就是直接把所有的url给内置的start_urls方法，于是我自己写了个生成器，直接怼给了它，但发现不管用。<br>翻了下官方的文档：</p><blockquote><p>make_requests_from_url() 将被调用来创建Request对象。 该方法仅仅会被Scrapy调用一次，因此您可以将其实现为生成器</p></blockquote><p>于是就自己写了生成器给make_requests_from_url() 用，在把response 返回:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def start_requests(self):</span><br><span class="line">    self.logger.info(&quot;START:&quot;)</span><br><span class="line">    for url in self.getBBSUrl(&quot;守望先锋&quot;,10):</span><br><span class="line">        yield self.make_requests_from_url(url)</span><br></pre></td></tr></table></figure><blockquote><p>但后面又发现这个在最新的官方文档里面没有, 原来, Spider.make_requests_from_url is deprecated (issue 1728, fixes issue 1495), 看来又要改一下才行，先挖个坑吧。</p></blockquote><p><em>更新：</em></p><p>看了下官方的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Return multiple Requests and items from a single callback:</span><br><span class="line"></span><br><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class MySpider(scrapy.Spider):</span><br><span class="line">    name = &apos;example.com&apos;</span><br><span class="line">    allowed_domains = [&apos;example.com&apos;]</span><br><span class="line">    start_urls = [</span><br><span class="line">        &apos;http://www.example.com/1.html&apos;,</span><br><span class="line">        &apos;http://www.example.com/2.html&apos;,</span><br><span class="line">        &apos;http://www.example.com/3.html&apos;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        for h3 in response.xpath(&apos;//h3&apos;).extract():</span><br><span class="line">            yield &#123;&quot;title&quot;: h3&#125;</span><br><span class="line"></span><br><span class="line">        for url in response.xpath(&apos;//a/@href&apos;).extract():</span><br><span class="line">            yield scrapy.Request(url, callback=self.parse)</span><br></pre></td></tr></table></figure><p>直接将 yield self.make_requests_from_url(url) 换成 yield scrapy.Request(url, callback=self.parse) 就好了。</p><p>之前是使用直接赋值的方式来将xpath解析到的值给item，也就是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def parse(self, response):</span><br><span class="line">    alltitles = []</span><br><span class="line">    item = TiebaItem()</span><br><span class="line">    titles = response.xpath(&quot;//a[@class=&apos;j_th_tit &apos;]//text()&quot;).extract()</span><br><span class="line">    for title in titles:</span><br><span class="line">        alltitles.append(title)</span><br><span class="line">    item[&quot;summarys&quot;] = alltitles</span><br><span class="line">    return item</span><br></pre></td></tr></table></figure><p>titles是一个页面中所有的title，是一个数组对象，但发现如果我直接将title赋值到item，也是可以的，这里纯粹多此一举，所以变成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def parse(self, response):</span><br><span class="line">    item = TiebaItem()</span><br><span class="line">    titles = response.xpath(&quot;//a[@class=&apos;j_th_tit &apos;]//text()&quot;).extract()</span><br><span class="line">    item[&quot;summarys&quot;] = titles</span><br><span class="line">    return item</span><br></pre></td></tr></table></figure><p>后面改用了ItemLoader，ItemLoader是更抽象的一种使用方式。我们知道，数据都是存储在item里面的，每次使用的时候都需要创建item，之后再<br>通过response.xpath选择需要的值，赋值给item里面对应的字段。</p><p>itemLoader把这个过程抽象为，你在新建itemLoader的时候把要装数据的item给我，然后只需要给我字段和要存的值就好，另一个好处是，你还可以在itemLoader这个环节对一些数据做处理，比如首尾空格去除，添加特定字段等。</p><p>所以修改后的存储代码变成了这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def parse(self, response):</span><br><span class="line">        l = ItemLoader(item=TiebaItem(),response=response)</span><br><span class="line">        l.add_xpath(&quot;summarys&quot;,&quot;//a[@class=&apos;j_th_tit &apos;]//text()&quot;)</span><br><span class="line">        l.add_xpath(&quot;links&quot;,&apos;//a[@class=&quot;j_th_tit &quot;]//@href&apos;)</span><br><span class="line">        return l.load_item()</span><br></pre></td></tr></table></figure><p>另一种方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def parse(self, response):</span><br><span class="line">    post = l.nested_xpath(&quot;//a[@class=&apos;j_th_tit &apos;]&quot;)</span><br><span class="line">    post.add_xpath(&apos;summary&apos;, &apos;text()&apos;)</span><br><span class="line">    post.add_xpath(&apos;link&apos;, &apos;@href&apos;)</span><br><span class="line">    return l.load_item()</span><br></pre></td></tr></table></figure><p>现在我提取了帖子的两条数据，一个是标题，另一个是标题的链接，存储在item里面是这个样子的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;&quot;summarys&quot;:[&quot;标题1&quot;,&quot;标题2&quot;],&quot;Links&quot;:[&quot;Link1&quot;,&quot;Link2&quot;]&#125;,</span><br><span class="line">    &#123;&quot;summarys&quot;:[&quot;标题3&quot;,&quot;标题4&quot;],&quot;Links&quot;:[&quot;Link3&quot;,&quot;Link4&quot;]&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这基本上是请求一次，返回了贴吧里面一页的数据，然后从中提取了所有标题和链接，所以是一次请求，一行数据。那有没有办法把所有的标题和链接合并到一起呢？也就是从多个请求提取到的数据存到item中的同一个字段里。</p><p>仔细想想这样有必要吗？用pd分析一下这个json数据看看。</p><blockquote><p>Method 1</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">summarys = []</span><br><span class="line">links = []</span><br><span class="line"></span><br><span class="line">for link in data.link:</span><br><span class="line">    for value in link:</span><br><span class="line">        url = &quot;tieba.baidu.com&quot;+str(value)</span><br><span class="line">        links.append(url)</span><br><span class="line">for summary in data.summary:</span><br><span class="line">    for value in summary:</span><br><span class="line">        summarys.append(value)</span><br><span class="line">post = pd.DataFrame()</span><br><span class="line">post[&quot;summarys&quot;] = summarys</span><br><span class="line">post[&quot;link&quot;] = links</span><br><span class="line">post</span><br></pre></td></tr></table></figure><blockquote><p>Method 2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def toPD(data):</span><br><span class="line">    post = pd.DataFrame()</span><br><span class="line">    for col in data.columns:</span><br><span class="line">        coldata = []</span><br><span class="line">        for value in data[col]:</span><br><span class="line">            for j in value:</span><br><span class="line">                coldata.append(j)</span><br><span class="line">        post[col] = pd.Series(coldata)</span><br><span class="line">    return post</span><br><span class="line">toPD(data)</span><br></pre></td></tr></table></figure><p>输出的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0哈哈哈哈大幺蛾子tieba.baidu.com/p/5982395208</span><br><span class="line">1安娜玩家表示看到堡垒和奥丽莎就高兴，打不动靶太安逸了tieba.baidu.com/p/5984392212</span><br><span class="line">2这个200hz的有人用过吗，和144的差多少?平常只打守望先tieba.baidu.com/p/5978507290</span><br><span class="line">3这麦克雷是挂吗 大家帮忙看看tieba.baidu.com/p/5984115608</span><br><span class="line">4我真是服了，削猪的时候，我不出声，因为我不玩；削76的时候，tieba.baidu.com/p/5982819128</span><br><span class="line">5这难道就是开窍了吗？tieba.baidu.com/p/5979734484</span><br></pre></td></tr></table></figure><p>检查了下链接，跟标题一样，那就先这样吧，继续研究深度爬取，多抓一些信息。</p><p>用scrapy 的shell调试了一下，得到了这些信息的xpath的表达式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l.add_xpath(&apos;replysCount&apos;,&apos;//span[@class=&quot;threadlist_rep_num center_text&quot;]//text()&apos;) #回复数</span><br><span class="line">l.add_xpath(&apos;authorName&apos;,&apos;//span[@class=&quot;frs-author-name-wrap&quot;]//text()&apos;) #作者名字</span><br><span class="line">l.add_xpath(&apos;authorMainPageUrl&apos;,&apos;//span[@class=&quot;frs-author-name-wrap&quot;]//@href&apos;) #作者主页链接</span><br></pre></td></tr></table></figure><p>用panda处理了一下，得到如下数据:</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Index</th><th style="text-align:center">authorMainUrl</th><th style="text-align:center">author</th><th style="text-align:center">posturl</th><th style="text-align:center">replys</th><th>summary</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">tieba.baidu.com/home/main/?un=%E7%BA%AF%E5%B1%</td><td style="text-align:center">一呼吸一</td><td style="text-align:center">tieba.baidu.com/p/5978804665</td><td style="text-align:center">94</td><td style="text-align:center">毛妹这个英雄是不是该削了?竞技把把都有，万金油的存在，她的盾</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">tieba.baidu.com/home/main/?un=q526246486&amp;ie=ut</td><td style="text-align:center">贴吧用户</td><td style="text-align:center">tieba.baidu.com/p/5924655619</td><td style="text-align:center">41</td><td style="text-align:center">这波刀大家打几分</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">tieba.baidu.com/home/main/?un=%E9%99%86%E6%95%</td><td style="text-align:center">陆散散</td><td style="text-align:center">tieba.baidu.com/p/5984318268</td><td style="text-align:center">3</td><td style="text-align:center">算了 不想骂了 鱼塘水真多我佛了</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">tieba.baidu.com/home/main/?un=%E8%99%90%E7%88%</td><td style="text-align:center">虐爆</td><td style="text-align:center">tieba.baidu.com/p/5983683236</td><td style="text-align:center">104</td><td style="text-align:center">为什么你们有那么多小姐姐一起玩</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">tieba.baidu.com/home/main/?un=G7IP9&amp;ie=utf-8&amp;i</td><td style="text-align:center">黎曦</td><td style="text-align:center">tieba.baidu.com/p/5983616276</td><td style="text-align:center">65</td><td style="text-align:center">问几个问题</td></tr></tbody></table><p><strong>Tips:</strong></p><ul><li>String 的startwith()方法可以接受多个参数，但必须是tuple，也就是string.startwith((‘a’,’b’))</li></ul><p>但此时又遇到了一个新问题，当我在pandas里进行列数据合并的时候，提示出错，应该是列长不一样，也就是某些数据有遗漏。然后用<br>pd.Series()解决了问题，它会将缺失的数据填充为NaN，但缺发现标题和发帖人的对应关系出错了。</p><p>这时候就抛出了一个问题，既然要保留item中数据的结构，那么在合并数据的时候，是否可以保证数据的对应关系呢？</p><h2 id="2018-12-22"><a href="#2018-12-22" class="headerlink" title="2018.12.22"></a>2018.12.22</h2><p><strong>新问题的新思考：</strong></p><blockquote><p>目前解决问题的思路是这样的，假设一个分页有10个帖子，我一次性拿10个帖子的标题，发帖人，回复量，这10个帖子处理完了，再进行下一步。这样会遇到合并数据的问题,<br>其次出来的数据，也是十条一组的存储在item里面。如果我之后再想得到这个帖子的内容，回复这个帖子的人，这些人的信息，难道再去找之前的URL，再把拿到的数据去做复杂的合并吗？<br>这么一想觉得现在的方法不行，一开始我只是考虑到了爬这些标题做分析，但现在想要更多的数据，就必须换一种方法。</p></blockquote><p>Todo:</p><ul><li>有一个div有两个class，一个是gril, 另一个是hot gril, 那么在我通过girl定位到了这个“gril”之后，怎么知道她是hot girl呢？</li></ul><h2 id="新的架构"><a href="#新的架构" class="headerlink" title="新的架构"></a>新的架构</h2><p>现在的方法是，利用深层爬取。刚开始的请求还是一样的，请求一页的数据，然后从中收集所有帖子的链接，这时候返回这一页的帖子链接的list，然后在一个个循环请求，回来的数据传给回调方法处理并存储到item里面。</p><p>这里的关键在于，第一页的数据抓取完了之后，得找到下一页的链接继续请求，从请求的数据中继续找帖子，找下一页，如此循环，通过指定CLOSESPIDER_ITEMCOUNT的值可以让爬虫在爬了特定的值后停下来，不然会一直继续下一页，参见下面的tips.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def parse(self, response):</span><br><span class="line">    # get the next page info</span><br><span class="line">    nextPageUrls = response.xpath(&quot;//a[@class=&apos;next pagination-item &apos;]//@href&quot;)</span><br><span class="line">    for url in nextPageUrls.extract():</span><br><span class="line">        self.logger.info(&quot;=====Now request:&#123;&#125;=====&quot;.format(url))</span><br><span class="line">        yield scrapy.Request(urljoin(&apos;https://tieba.baidu.com&apos;,url))</span><br><span class="line"></span><br><span class="line">    # get the post urls and collec the info.</span><br><span class="line">    postSubUrls = response.xpath(&quot;//a[@class=&apos;j_th_tit &apos;]//@href&quot;).extract()</span><br><span class="line">    postUrls = list(map(self.addPref,postSubUrls))</span><br><span class="line">    for url in postUrls.__reversed__():</span><br><span class="line">        yield scrapy.Request(url,callback=self.parsePost,meta=&#123;&apos;url&apos;:url&#125;)</span><br><span class="line"></span><br><span class="line">def parsePost(self,response):</span><br><span class="line">    l = ItemLoader(item=TiebaItem(),response=response)</span><br><span class="line">    title = response.xpath(&quot;//div[@class=&apos;core_title_wrap_bright clearfix&apos;]//text()&quot;).extract()[0]</span><br><span class="line">    l.add_value(&quot;link&quot;,response.meta[&apos;url&apos;])</span><br><span class="line">    l.add_value(&quot;title&quot;,title)</span><br><span class="line">    l.add_xpath(&quot;replyUsers&quot;,&quot;//div[@class=&apos;d_author&apos;]//li[@class=&apos;d_name&apos;]//a[@class=&apos;p_author_name j_user_card&apos;]//text()&quot;)</span><br><span class="line">    l.add_xpath(&quot;replyContent&quot;,&quot;//div[@class=&apos;d_post_content j_d_post_content &apos;]//text()&quot;)</span><br><span class="line">    yield l.load_item()</span><br></pre></td></tr></table></figure><p>上面的代码，我将下一页的请求放在抽取帖子内容后面，就会出现只能抓一页的情况，折腾了半天，后参考《精通PYTHON爬虫框架Scrapy——异步图书》代码才解决，不知何故，待研究。</p><p>一些技巧：</p><ul><li><a href="https://www.zhihu.com/question/54773510" target="_blank" rel="noopener">利用meta参数，在请求之间传信息</a></li><li>多利用 urljoin 来合并url，而不是自己写函数再map</li><li>scrapy crawl name -s CLOSESPIDER_ITEMCOUNT=100 通过-s指定CLOSESPIDER_ITEMCOUNT的值可以让爬虫在爬了特定的值后停下来</li></ul><h2 id="2018-12-23"><a href="#2018-12-23" class="headerlink" title="2018.12.23"></a>2018.12.23</h2><p>今天换了个个音乐主题的贴吧billboard吧抓数据，发现xpath表达式都抓不到东西了，检查了一下发现不同的吧某些东西还不一样，比如billboard吧和守望先锋吧帖子内容的class：</p><ul><li>“d_post_content j_d_post_content ”</li><li>“d_post_content j_d_post_content  clearfix”</li></ul><p>billboard吧的class增加了一个clearfix的值，这是用来清除浮动的，要了解清楚浮动是干嘛，可以参考<a href="https://www.jianshu.com/p/9d6a6fc3e398" target="_blank" rel="noopener">这篇文章</a>，现在有两个办法</p><ul><li>找到这个clearfix的规律，有clearfix的吧或者帖子就给我们的xpath表达式加上</li><li>还是按照原来的方法去取值，如果取不到，那就加上clearfix</li></ul><p>目前来看第二种方法比较简单，先试试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 标题</span><br><span class="line">title = response.xpath(&quot;//div[@class=&apos;core_title_wrap_bright clearfix&apos;]//text()&quot;)</span><br><span class="line">if title:</span><br><span class="line">    title = title.extract()[0]</span><br><span class="line">else:</span><br><span class="line">    title = response.xpath(&quot;//div[@class=&apos;core_title core_title_theme_bright&apos;]//text()&quot;).extract()[0]</span><br><span class="line">                                        </span><br><span class="line"># 链接</span><br><span class="line">l.add_value(&quot;link&quot;,response.meta[&apos;url&apos;])</span><br><span class="line">l.add_value(&quot;title&quot;,title)</span><br><span class="line"># 跟帖用户</span><br><span class="line">l.add_xpath(&quot;replyUsers&quot;,&quot;//div[@class=&apos;d_author&apos;]//li[@class=&apos;d_name&apos;]//a[@class=&apos;p_author_name j_user_card&apos;]//text()&quot;)</span><br><span class="line"># 跟帖内容</span><br><span class="line">replyContent = response.xpath(&quot;//div[@class=&apos;d_post_content j_d_post_content  clearfix&apos;]//text()&quot;)</span><br><span class="line">if replyContent:</span><br><span class="line">    replyContent = replyContent.extract()</span><br><span class="line">else:</span><br><span class="line">    replyContent = response.xpath(&quot;//div[@class=&apos;d_post_content j_d_post_content &apos;]//text()&quot;).extract()</span><br><span class="line">l.add_value(&quot;replyContent&quot;,replyContent)</span><br></pre></td></tr></table></figure><p>没问题，成功抓到所需要的信息,现在我要抓去更多用户的信息，这帖子回复的人是个妹子还是汉子那肯定得知道不，通过分析html结果，被我发现了这么一个字段:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data-field=&quot;&#123;</span><br><span class="line"></span><br><span class="line">    &quot;author&quot;:&#123;&quot;user_id&quot;:2350893056,&quot;user_name&quot;:&quot;GYGGYFDDH&quot;,&quot;name_u&quot;:&quot;GYGGYFDDH&amp;ie=utf-8&quot;,&quot;user_sex&quot;:2,&quot;portrait&quot;:&quot;00c84759474759464444481f8c&quot;,&quot;is_like&quot;:1,&quot;level_id&quot;:6,&quot;level_name&quot;:&quot;\u51cc\u6ce2\u55b5\u6b65&quot;,&quot;cur_score&quot;:118,&quot;bawu&quot;:0,&quot;props&quot;:null,&quot;user_nickname&quot;:&quot;\u767d\u00ba\u82d7\u7f2a&quot;&#125;,</span><br><span class="line"></span><br><span class="line">    &quot;content&quot;:&#123;&quot;post_id&quot;:123353095371,&quot;is_anonym&quot;:false,&quot;open_id&quot;:&quot;tbclient&quot;,&quot;open_type&quot;:&quot;android&quot;,&quot;date&quot;:&quot;2018-12-23 10:35&quot;,&quot;vote_crypt&quot;:&quot;&quot;,&quot;post_no&quot;:1,&quot;type&quot;:&quot;0&quot;,&quot;comment_num&quot;:0,&quot;is_fold&quot;:0,&quot;ptype&quot;:&quot;0&quot;,&quot;is_saveface&quot;:false,&quot;props&quot;:null,&quot;post_index&quot;:0,&quot;pb_tpoint&quot;:null&#125;</span><br><span class="line">    </span><br><span class="line">    &#125;&quot;</span><br></pre></td></tr></table></figure><p>这就是突破口了，author是用户的信息，content是这个帖子的信息，比如回复的时间。user_sex就是性别，1是男，2是女，仔细一看这里面还有用户的设备信息，比如用的是苹果还是安卓。<br>试着抓一些信息下来，xpath表达式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">l.add_xpath(&quot;replyUsers&quot;,&quot;//div[@class=&apos;p_postlist&apos;]/div/attribute::data-field&quot;)</span><br></pre></td></tr></table></figure><p>选取所有class是p_postlist的第一个子节点，然后选择它的叫做data-field的属性，即上面的信息了，抓到了所有的数据，用pd过滤一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">usernames = []</span><br><span class="line">usersexs = []</span><br><span class="line">for users in sxyData.replyUsers:</span><br><span class="line">    for userinfo in users:</span><br><span class="line">        userInfoString = &quot;&quot;.join(userinfo)</span><br><span class="line">        if userInfoString.startswith(&quot;&#123;&quot;):</span><br><span class="line">            user = pd.read_json(userInfoString)</span><br><span class="line">            usernames.append(user.author[&quot;user_name&quot;])</span><br><span class="line">            usersexs.append(user.author[&quot;user_sex&quot;])</span><br><span class="line">users = &#123;&apos;names&apos;:usernames,&apos;sex&apos;:usersexs&#125;</span><br><span class="line">users = pd.DataFrame(users)</span><br><span class="line">users</span><br></pre></td></tr></table></figure><p>这里会从中提取出用户名和性别，因为某些数据不是以{}包装的，所以在用pd提取json对象之前，先判断一下,得到的数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0夜和海19961</span><br><span class="line">1华丽atobekeigo2</span><br><span class="line">5永中一小生0</span><br><span class="line">6哦啦啦旅途啦0</span><br><span class="line">7lzlzyz1</span><br></pre></td></tr></table></figure></p><ul><li>1：男生</li><li>2：女生</li><li>0:未知</li></ul><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li>下午突然想到，应该可以通过子或父节点获取这个class的属性，再去提取信息，这样就不需要判断了，直接可以根据相对关系选择它的class名</li></ul><h2 id="2018-12-24"><a href="#2018-12-24" class="headerlink" title="2018.12.24"></a>2018.12.24</h2><p>在处理抓帖子内容的时候出现一些问题，因为有一些帖子的评论很多，也是有下一页的，虽然处理逻辑和帖子列表的差不多，但仔细研究后发现是不一样的，并且找出了之前的代码的缺陷:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def parse(self, response):</span><br><span class="line">        # get the post urls and collec the info.</span><br><span class="line">        postSubUrls = response.xpath(&quot;//a[@class=&apos;j_th_tit &apos;]//@href&quot;).extract()</span><br><span class="line">        self.logger.info(&quot;==============Now Request pages===========&#123;&#125;&quot;.format(postSubUrls))</span><br><span class="line">        for subrul in postSubUrls:</span><br><span class="line">            url = urljoin(self.urlPrefix,subrul)</span><br><span class="line">            self.logger.info(&quot;----------Now request url=============&#123;&#125;&quot;.format(url))</span><br><span class="line">            yield scrapy.Request(url,callback=self.parsePost,meta=&#123;&apos;url&apos;:url&#125;)</span><br><span class="line"></span><br><span class="line">        # get the next page info</span><br><span class="line">        nextPageUrls = response.xpath(&quot;//a[@class=&apos;next pagination-item &apos;]//@href&quot;)    </span><br><span class="line">        for url in nextPageUrls.extract():</span><br><span class="line">            yield scrapy.Request(urljoin(self.urlPrefix,url),callback=self.parse)</span><br></pre></td></tr></table></figure><p>主要是这里的抓帖子内容和下一页的顺序对调了，以及之前我在yield下一页的时候，竟然没有指定回掉方法，这导致第一页帖子里面就有些帖子没有抓下来。随后开始研究如何抓第二页的评论，此处遇到一个大坑, 即第二页的标题变了，变成了”回复： {原来的标题}”,导致新抓下来的标题都<br>存到了另一个字段，我还以为没抓下来，一直在改，之所以存到了下一个字段，是因为我在下一页的请求发起之前，就已经yield返回了l.load_item().</p><p>找到原因了就好办了，对于那些抓下一页的评论的帖子，它的title我们可以一开始就指定，然后通过meta传递给下一个请求，在下一个请求中判断如果meta中有title，那么title就设置为meta中的，这里在判断meta(meta是一个字典)中是否某个key的时候犯了个小错,我是这么写的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if d.meta[&apos;apples&apos;]:</span><br></pre></td></tr></table></figure><p>但其实应该这样写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if &apos;apples&apos; in d:</span><br></pre></td></tr></table></figure><p>参见：<a href="https://stackoverflow.com/questions/44035287/check-key-exist-in-python-dict/44035382" target="_blank" rel="noopener">Check key exist in python dict</a></p><p>但这样抓下来的帖子还是有一个问题，当爬虫爬下一个评论页的时候，这一页的数据它就会返回，所以在json数据中，就会有标题，链接重复，但评论和跟帖用户不一样的数据，本来的数据是一个帖子一条数据，但现在是只要这个帖子又下一页的评论，就会新建一条数据，虽然它的标题和链接是一样的。</p><h2 id="2018-12-26"><a href="#2018-12-26" class="headerlink" title="2018.12.26"></a>2018.12.26</h2><p>这问题困扰了我好几天，还是没有找到解决的办法，尝试过:</p><ul><li>在爬取comments的过程中，不yeild数据，将爬下来的评论append给meta，回调方法指向自身，重复直到没有下一页为止，但这样scrapy直接把之前的数据都丢掉了，可能是因为每次重新<br>进入方法的时候，都new了一个新的itemLoader。</li></ul><blockquote><p>暂时搁置一下，反正帖子标题是一样的，后面用pandas处理一下吧。</p></blockquote><p>我想提取出来的数据是，每个comments作为一条记录，同时记录帖子的标题和用户，但比对抓下来的数据后发现评论中的用户数量和评论本身不一致，这就尴尬了，不建立好对应关系，数据根本就没办法分析啊。</p><p>不过基本可以确定，评论中的第一条就是楼主，先把楼主的信息抓出来吧。</p><h2 id="2019-01-07"><a href="#2019-01-07" class="headerlink" title="2019.01.07"></a>2019.01.07</h2><p>今天了解到scrapy的另一个特性，即CrawlSpider类型的爬虫，在这个爬虫里面，它可以像下面这样去抽取post的连接和下一页的链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rules = (</span><br><span class="line">    Rule(LinkExtractor(restrict_xpaths=&quot;//div[@class=&apos;pb_footer&apos;]//ul[@class=&apos;l_posts_num&apos;]//a&quot;),callback=&apos;parse&apos;),</span><br><span class="line">    Rule(LinkExtractor(restrict_xpaths=&quot;//a[@class=&apos;j_th_tit &apos;]&quot;),callback=&apos;parsePost&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>《精通python爬虫》这本书上说：</p><blockquote><p>Rule中可以指定回调函数，也就是上面我写的callback=’parse’(这里只能是函数的字符串名字，而不是self.parse)。如果我们没有指定callback函数，那么scrapy将会跟踪已经抽取的链接，如果你希望跟踪链接，那么需要再callback中使用return或yield返回它们，或者将Rule的follow参数设置为true，当你的页面既包含item又包含其他有用的导航链接时，该功能可能会非常有用。</p></blockquote><p>看完这一段，我有几个疑问：</p><ul><li>callback函数中，如何拿到想跟踪的链接？</li><li>yield的链接，直接返回这个链接，还是返回response对象？</li><li>返回的数据（或者链接），由谁来处理？</li></ul><p>rules: 是Rule对象的集合，用于匹配目标网站并排除干扰<br>parse_start_url: 用于爬取起始响应，必须要返回Item，Request中的一个。</p><p>查了一些资料，rules的规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rules = [</span><br><span class="line">    Rule(</span><br><span class="line">        link_extractor,     # LinkExtractor对象</span><br><span class="line">        callback=None,      # 请求到响应数据时的回调函数</span><br><span class="line">        cb_kwargs=None,     # 调用函数设置的参数,不要指定为parse</span><br><span class="line">        follow=None,        # 是否从response跟进链接，为布尔值</span><br><span class="line">        process_links=None, # 过滤linkextractor列表，每次获取列表时都会调用</span><br><span class="line">        process_request=None    # 过滤request,每次提取request都会调用</span><br><span class="line">    )</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>LinkExtractor的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class scrapy.contrib.linkextractor.sgml.SgmlLinkExtractor(</span><br><span class="line">    allow = (),         # 符合正则表达式参数的数据会被提取</span><br><span class="line">    deny = (),          # 符合正则表达式参数的数据禁止提取</span><br><span class="line">    allow_domains = (),     # 包含的域名中可以提取数据</span><br><span class="line">    deny_domains = (),      # 包含的域名中禁止提取数据</span><br><span class="line">    deny_extensions = (),       </span><br><span class="line">    restrict_xpath = (),        # 使用xpath提取数据，和allow共同起作用</span><br><span class="line">    tags = (),          # 根据标签名称提取数据</span><br><span class="line">    attrs = (),         # 根据标签属性提取数据</span><br><span class="line">    canonicalize = (),</span><br><span class="line">    unique = True,          # 剔除重复链接请求</span><br><span class="line">    process_value = None</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h1 id="xpath参考"><a href="#xpath参考" class="headerlink" title="xpath参考"></a>xpath参考</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 进入scrapy调试界面</span><br><span class="line">scrapy shell &apos;url&apos;</span><br><span class="line"></span><br><span class="line">2. 调试界面使用xpath</span><br><span class="line">response.xpath(&apos;&apos;)</span><br><span class="line"></span><br><span class="line">3. 抓取指定类的元素,//为获取所有元素，返回的是list，所有如果在上一级使用了//,那么下一级也是用//,如果是/,那么提取的就是该list中的第一个元素</span><br><span class="line">xpath(&apos;//div[@class=&quot;title&quot;]//text()&apos;),text()为获取该元素下的文本，如果需要纯文本，还需要在后面加extract()方法</span><br><span class="line"></span><br><span class="line">4. 提取属性</span><br><span class="line">xpath(&quot;//div[@class=&apos;pb_footer&apos;]//ul[@class=&apos;l_posts_num&apos;]//a//@href&quot;),主要是后面的@href</span><br></pre></td></tr></table></figure><h1 id="scrapy参考"><a href="#scrapy参考" class="headerlink" title="scrapy参考"></a>scrapy参考</h1><h2 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h2><blockquote><p>这里说的设置，只要在setting.py中添加一条记录即可</p></blockquote><ol><li><p>设置utf-8格式，避免中文出错<br>FEED_EXPORT_ENCODING = ‘utf-8’</p></li><li><p>不遵守网站的爬虫策略<br>ROBOTSTXT_OBEY = False</p></li></ol><h2 id="commands"><a href="#commands" class="headerlink" title="commands"></a>commands</h2><ol><li><p>启动爬虫<br>scrapy crawl CrawlerName</p></li><li><p>启动爬虫，导出数据为json<br>scrapy crawl CrawlerName -o filename.json </p></li><li><p>爬了指定的数据后，就关闭<br>scrapy crawl CrawlerName -o filename.json -s CLOSESPIDER_ITEMCOUNT=50</p></li></ol><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>scrapy shell环境下，配置user-agent:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">url = &apos;http://www.example.com&apos;</span><br><span class="line">request = scrapy.Request(url, headers=&#123;&apos;User-Agent&apos;: &apos;Mybot&apos;&#125;)</span><br><span class="line">fetch(request)</span><br></pre></td></tr></table></figure><ol><li>生成爬虫<br>scrapy genspider -l 查看可用的模版<br>scrapy genspider -t crawl name url </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;就是看看大家在贴吧玩啥，爬了100多兆母校的数据，回来慢慢分析，以后再做个数据可视化，感兴趣的可以拿去爬一下自己喜欢的贴吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="python" scheme="http://wittyfans.com/tags/python/"/>
    
      <category term="crawler" scheme="http://wittyfans.com/tags/crawler/"/>
    
      <category term="scrapy" scheme="http://wittyfans.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>用Python做数据可视化</title>
    <link href="http://wittyfans.com/coding/%E7%94%A8Python%E5%81%9A%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.html"/>
    <id>http://wittyfans.com/coding/用Python做数据可视化.html</id>
    <published>2019-01-16T12:24:41.000Z</published>
    <updated>2019-01-16T12:35:42.105Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Talk is cheap, show me the picture!</p></blockquote><a id="more"></a><h1 id="导入相关包"><a href="#导入相关包" class="headerlink" title="导入相关包"></a>导入相关包</h1><p>Import the plt:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br></pre></td></tr></table></figure><h1 id="不同的图表"><a href="#不同的图表" class="headerlink" title="不同的图表"></a>不同的图表</h1><p>you can do this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data.plt.bar()</span><br></pre></td></tr></table></figure><p>and this is the diffrent types plot:</p><ul><li>‘bar’ or ‘barh’ for bar plots</li><li>‘hist’ for histogram</li><li>‘box’ for boxplot</li><li>‘kde’ or ‘density’ for density plots</li><li>‘area’ for area plots</li><li>‘scatter’ for scatter plots</li><li>‘hexbin’ for hexagonal bin plots</li><li>‘pie’ for pie plots</li></ul><p>and you can specific the kind in methond:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot(kind=&apos;bar&apos;)</span><br></pre></td></tr></table></figure><p>Reference:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.plot.area     df.plot.barh     df.plot.density  df.plot.hist     df.plot.line     df.plot.scatter</span><br><span class="line">df.plot.bar      df.plot.box      df.plot.hexbin   df.plot.kde      df.plot.pie</span><br></pre></td></tr></table></figure><h1 id="把列合并展示"><a href="#把列合并展示" class="headerlink" title="把列合并展示"></a>把列合并展示</h1><p>When you plotting,stacked = True means conbined the columns value,from this:</p><p><img src="https://pandas.pydata.org/pandas-docs/stable/_images/bar_plot_multi_ex.png" alt=""></p><p>to this</p><p><img src="https://pandas.pydata.org/pandas-docs/stable/_images/bar_plot_stacked_ex.png" alt=""></p><p>plot.bar(stacked=True); </p><p>If you want thehorizontal bar plots, use the barh method:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df2.plot.barh(stacked=True)</span><br></pre></td></tr></table></figure><h1 id="使用绘图对象"><a href="#使用绘图对象" class="headerlink" title="使用绘图对象"></a>使用绘图对象</h1><p>Plots in matplotlib is a Figure object, you can new a plot window:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br></pre></td></tr></table></figure><h2 id="多个图一起绘制"><a href="#多个图一起绘制" class="headerlink" title="多个图一起绘制"></a>多个图一起绘制</h2><p>and you can add the sub plots to this object,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure() </span><br><span class="line">ax1 = fig.add_subplot(2, 2, 1) </span><br><span class="line">ax2 = fig.add_subplot(2, 2, 2) </span><br><span class="line">ax3 = fig.add_subplot(2, 2, 3)</span><br><span class="line">ax4 = fig.add_subplot(2, 2, 4)</span><br></pre></td></tr></table></figure><p>This will let you get four plot sub plots in one  window, and any command will show in the last plot.</p><h2 id="快速创建多个子图"><a href="#快速创建多个子图" class="headerlink" title="快速创建多个子图"></a>快速创建多个子图</h2><p>and you create subplots fast like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig,axes = plt.subplots(3,3)</span><br><span class="line">axes[0,0].hist(np.random.randn(100),bins=20,color=&apos;k&apos;,alpha=0.3)</span><br></pre></td></tr></table></figure><h2 id="控制子图之间的间隙"><a href="#控制子图之间的间隙" class="headerlink" title="控制子图之间的间隙"></a>控制子图之间的间隙</h2><p>subplots spacing is under control by </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.subplots_adjust(wspace=0,hspace=0)</span><br></pre></td></tr></table></figure><h1 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h1><h2 id="线的虚实、颜色"><a href="#线的虚实、颜色" class="headerlink" title="线的虚实、颜色"></a>线的虚实、颜色</h2><p>In the plot() method, it can accept a string to stylying, to plot x verus y with green dashes , you would execute:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.plot(x,y,&apos;g--&apos;)</span><br></pre></td></tr></table></figure><p>of course, the color and dash can setting seperate:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ax.plot(x, y, linestyle=&apos;--&apos;, color=&apos;g&apos;)</span><br></pre></td></tr></table></figure><p>linestyle:</p><ul><li>-</li><li>--</li></ul><p>Line plots can additionally have <em>markers</em> to highlight the actual data points.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">plot(&apos;ko--&apos;)</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">plot(marker=&apos;o&apos;)</span><br></pre></td></tr></table></figure><h2 id="一份数据，多种展示方式"><a href="#一份数据，多种展示方式" class="headerlink" title="一份数据，多种展示方式"></a>一份数据，多种展示方式</h2><p>我们可以将不同的drawstyle结合在一起，放在同一幅图中显示，比如这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby(ri.stop_datetime.dt.hour).drugs_related_stop.mean().plot(linestyle=&apos;--&apos;,color=&apos;g&apos;,marker=&apos;o&apos;,label=&apos;Default&apos;)</span><br><span class="line">ri.groupby(ri.stop_datetime.dt.hour).drugs_related_stop.mean().plot(linestyle=&apos;-&apos;,color=&apos;r&apos;,marker=&apos;o&apos;,label=&apos;steps-post&apos;,drawstyle=&apos;steps-post&apos;)</span><br><span class="line">plt.legend(loc=&apos;best&apos;)</span><br></pre></td></tr></table></figure><p><img src="https://xfjlcq.bn.files.1drv.com/y4mHSUL0Fe0J2icuEUtKoUHovl1jCzOHR3BSoy5LdPsDttVbG0OJYys58TNGyXOLLj0elzuvTe8dSPxanf28ZanIF5y-qdjw_BoG3hlVLh0HiLxXbQpTRX2Mdg_wqv7jHA-cWaQdKRwpT07LUWhQNNF97VE4rtUSwCGLslxsludS7d7FTp1X9_c9z1eMPE5Nj2-Z4FZYU6zSUZXSD_iLFspsw/legendPlot.png?psid=1" alt=""></p><p>drawstyle的类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;default&apos;, &apos;steps&apos;, &apos;steps-pre&apos;, &apos;steps-mid&apos;, &apos;steps-post&apos;&#125;</span><br></pre></td></tr></table></figure><h2 id="多份数据合并展示"><a href="#多份数据合并展示" class="headerlink" title="多份数据合并展示"></a>多份数据合并展示</h2><p>An easy way to adding legends:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from numpy.random import randn </span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(1, 1, 1)</span><br><span class="line">ax.plot(randn(1000).cumsum(), &apos;k&apos;, label=&apos;one&apos;) ax.plot(randn(1000).cumsum(), &apos;k--&apos;, label=&apos;two&apos;)</span><br><span class="line">ax.plot(randn(1000).cumsum(), &apos;k.&apos;, label=&apos;three&apos;) </span><br><span class="line">ax.legend(loc=&apos;best&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>The loc tells matplotlib where to place the plot. If you aren’t picky, ‘best’ is a good option, as it will choose a location that is most out of the way. To exclude one or more elements from the legend, pass no label or label=’<em>nolegend</em>‘.</p></blockquote><h2 id="设置图的基本属性"><a href="#设置图的基本属性" class="headerlink" title="设置图的基本属性"></a>设置图的基本属性</h2><p>设置plot的标题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ax.set_title(&apos;Drugs Releted Stop Search Rate&apos;)</span><br></pre></td></tr></table></figure><p>设置x轴的标题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ax.set_xlabel(&apos;hours&apos;)</span><br></pre></td></tr></table></figure><p>下面的x轴的单位和标签也可以设置，注意个数必须统一:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">drm = ri.groupby(ri.stop_datetime.dt.hour).drugs_related_stop.mean()</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(1,1,1)</span><br><span class="line">ax.plot(drm)</span><br><span class="line"></span><br><span class="line">ticks = ax.set_xticks([0,6,12,18])</span><br><span class="line">labels = ax.set_xticklabels([&apos;Mid Night&apos;,&apos;Morning&apos;,&apos;Moon&apos;,&apos;AftenNoon&apos;])</span><br></pre></td></tr></table></figure><blockquote><p>Y-axis is same, substituting y for x in above.</p></blockquote><h2 id="如何根据GroupBy中多列的值绘制"><a href="#如何根据GroupBy中多列的值绘制" class="headerlink" title="如何根据GroupBy中多列的值绘制"></a>如何根据GroupBy中多列的值绘制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig,ax = plt.subplots(figsize=(16,7))</span><br><span class="line">data.groupby(&apos;A&apos;,&apos;B&apos;).count().unstack().plot(ax=ax)</span><br></pre></td></tr></table></figure><p>Use the unstack method to plotting.</p><blockquote><p>To be contiuned…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Talk is cheap, show me the picture!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="python" scheme="http://wittyfans.com/tags/python/"/>
    
      <category term="bigdata" scheme="http://wittyfans.com/tags/bigdata/"/>
    
      <category term="pandas" scheme="http://wittyfans.com/tags/pandas/"/>
    
      <category term="numpy" scheme="http://wittyfans.com/tags/numpy/"/>
    
      <category term="ploting" scheme="http://wittyfans.com/tags/ploting/"/>
    
  </entry>
  
  <entry>
    <title>利用Pandas分析美国交警开放的搜查数据</title>
    <link href="http://wittyfans.com/coding/%E5%88%A9%E7%94%A8Pandas%E5%88%86%E6%9E%90%E7%BE%8E%E5%9B%BD%E4%BA%A4%E8%AD%A6%E5%BC%80%E6%94%BE%E7%9A%84%E6%90%9C%E6%9F%A5%E6%95%B0%E6%8D%AE.html"/>
    <id>http://wittyfans.com/coding/利用Pandas分析美国交警开放的搜查数据.html</id>
    <published>2019-01-12T06:23:30.000Z</published>
    <updated>2019-01-16T12:16:56.712Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一次偶然的机会看到<a href="">王树义</a>老师的推荐YouTube上的这个pandas视频教程，于是花了点时间学习了一下，也就有了这篇笔记，因为课程是英文的，也没有提供<br>中文字幕，所以我的笔记也就懒得再用中文写了。</p></blockquote><a id="more"></a><h1 id="利用Pandas分析美国交警开放的搜查数据"><a href="#利用Pandas分析美国交警开放的搜查数据" class="headerlink" title="利用Pandas分析美国交警开放的搜查数据"></a>利用Pandas分析美国交警开放的搜查数据</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>The tutorial will not cover pandas basics. If you are new to pandas or just need a refresher, I recommend watching some videos from my <a href="http://www.dataschool.io/easier-data-analysis-with-pandas/" target="_blank" rel="noopener">free pandas course</a>. Alternatively, you can review all of the code from my pandas course in this Jupyter notebook.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/justmarkham/pycon-2018-tutorial" target="_blank" rel="noopener">Using pandas for Better (and Worse) Data Science, Git主页</a></li><li><a href="https://www.youtube.com/watch?v=hl-TGI4550M&amp;list=PL5-da3qGB5IBITZj_dYSFqnd_15JgqwA6&amp;index=1" target="_blank" rel="noopener">Pandas best practices, Youtube 链接</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="DownLoad-the-data"><a href="#DownLoad-the-data" class="headerlink" title="DownLoad the data"></a>DownLoad the data</h2><h3 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h3><ul><li><a href="https://openpolicing.stanford.edu/data/" target="_blank" rel="noopener">Link</a></li><li><a href="https://github.com/5harad/openpolicing/blob/master/DATA-README.md" target="_blank" rel="noopener">How to use the date</a></li></ul><h3 id="教程使用的数据"><a href="#教程使用的数据" class="headerlink" title="教程使用的数据"></a>教程使用的数据</h3><ul><li><a href="https://github.com/justmarkham/pycon-2018-tutorial/blob/master/police.csv" target="_blank" rel="noopener">police</a></li></ul><h2 id="About-the-data"><a href="#About-the-data" class="headerlink" title="About the data"></a>About the data</h2><ul><li>For each state in the dataset, They provide data in three formats(We use csv format)</li><li>If a column cannot be computed using the data a state has provided, it is set to NA.</li><li>For several fields (e.g., driver_race) we include a “raw” column which records the original data values from which we infer standardized values</li></ul><p>We include the raw columns because our data processing pipeline is extensive, requiring judgment calls and subjective decisions.</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>Column name</td><td>Column meaning</td><td>Example value</td></tr><tr><td>id</td><td>The unique ID we assign to each stop. Contains the state and year.</td><td>VT-2011-00012</td></tr><tr><td>state（州）</td><td>The two-letter code for the state in which the stop occurred.</td><td>VT</td></tr><tr><td>stop_date（被搜查的日期）</td><td>The date of the stop, in YYYY-MM-DD format. Some states do not provide the exact stop date: for example, they only provide the year or quarter in which the stop occurred. For these states, stop_date is set to the date at the beginning of the period: for example, January 1 if only year is provided.</td><td>2011-11-27</td></tr><tr><td>stop_time(被警察搜查时的时间)</td><td>The 24-hour time of the stop, in HH:MM format.</td><td>20:15</td></tr><tr><td>location_raw</td><td>The original data value from which we compute the county (or comparably granular location) in which the stop occurred. Not in a standardized format across states.</td><td>Winooski</td></tr><tr><td>county_name</td><td>The standardized name of the county in which the stop occurred.</td><td>Chittenden County</td></tr><tr><td>county_fips</td><td>The standardized 5-digit FIPS code in which the stop occurred.</td><td>50007</td></tr><tr><td>district</td><td>In several states (e.g., Illinois) the stop county cannot be inferred, but a comparably granular location can. This comparably granular location is stored in the district column. Most states do not have this column.</td><td>ILLINOIS STATE POLICE 01</td></tr><tr><td>fine_grained_location</td><td>Any higher-resolution data about where the stop occurred: e.g., milepost or address. Not standardized across states.</td><td>90400 I 89 N; EXIT 15 MM90/40</td></tr><tr><td>police_department</td><td>The police department or agency that made the stop. Not in a standard format across states.</td><td>WILLISTON VSP</td></tr><tr><td>driver_gender</td><td>The driver’s gender, as recorded by the trooper. M, F, or NA.</td><td>M</td></tr><tr><td>driver_age_raw</td><td>The original data value from which we compute the driver’s age when they were stopped. May be age, birth year, or birth date. Not in a standard format across states.</td><td>1988</td></tr><tr><td>driver_age</td><td>The driver’s age when they were stopped. Set to NA if less than 15 or greater than or equal to 100.</td><td>23</td></tr><tr><td>driver_race_raw</td><td>The original data value from which the driver’s standardized race is computed. Not in a standard format across states.</td><td>African American</td></tr><tr><td>driver_race</td><td>The standardized driver race. Possible values are White, Black, Hispanic, Asian, Other, and NA, with NA denoting values which are unknown. Asian refers to Asian, Pacific Islander, and Indian. Native Americans/American Indians are included in the “other” category. Anyone with Hispanic ethnicity is classified as Hispanic, regardless of their recorded race.</td><td>Black</td></tr><tr><td>violation_raw</td><td>The violation committed by the driver, in the language of the original data. Not in a standard format across states. Some stops have multiple violations.</td><td>Speeding (10–19 MPH Over Prima Facie Limit *)</td></tr><tr><td>violation</td><td>The violation committed by the driver, standardized into categories which are consistent across states.</td><td>Speeding</td></tr><tr><td>search_conducted（是否被搜查）</td><td>A TRUE/FALSE value indicating whether a search was performed.</td><td>TRUE</td></tr><tr><td>search_type_raw</td><td>The justification for the search, in the language of the original data. NA if no search was performed. Not in a standard format across states. Some states have multiple justifications for a search.</td><td>CONSENT SEARCH CONDUCTED</td></tr><tr><td>search_type</td><td>The normalized justification for the search. Where possible, this is standardized into categories which are consistent across states. For example, if something is clearly a consent search, search_type is referred to as “Consent”.</td><td>Consent</td></tr><tr><td>contraband_found</td><td>A TRUE/FALSE value indicating whether a search was performed and contraband was found. FALSE if no search was performed.</td><td>TRUE</td></tr><tr><td>stop_outcome</td><td>The outcome of the stop. Many states have idiosyncratic outcomes — for example, “CHP 215” in California — so this column is not standardized across states. “Citation” and “Warning” are the values which occur most commonly across states. If the stop has multiple outcomes, the most severe outcome is used. For example, if a stop resulted in a citation and a warning, stop_outcome would be “Citation”.</td><td>Citation</td></tr><tr><td>is_arrested</td><td>A TRUE/FALSE value indicating whether an arrest was made.</td><td>TRUE</td></tr></tbody></table><ul><li>FIPS：<a href="https://zh.wikipedia.org/wiki/%E8%81%AF%E9%82%A6%E8%B3%87%E6%96%99%E8%99%95%E7%90%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener">联邦信息处理标准（英语：Federal Information Processing Standards，缩写FIPS）</a></li><li>VT: <a href="https://www.google.com/search?q=vt%E6%98%AF%E5%93%AA%E4%B8%AA%E5%B7%9E&amp;rlz=1C5CHFA_enUS783US785&amp;oq=VT&amp;aqs=chrome.0.69i59j69i57j0l4.1878j0j1&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank" rel="noopener">美国的一个州</a></li><li>M,F: 记录性别，M男，F女</li><li>race: 可不是速度或者竞赛，而是种族,参考分类如下，与数据里的可能不一样，<a href="https://www.zhihu.com/question/21007176" target="_blank" rel="noopener">了解更多</a><ol><li>American Indian or Alaska Native</li><li>Asian</li><li>Black or African American</li><li>Native Hawaiian or Other Pacific Islander</li><li>White</li></ol></li><li>violation：违章</li><li>NAN means the value is missing or irrelevant for that data row.</li></ul><h1 id="Know-the-data"><a href="#Know-the-data" class="headerlink" title="Know the data"></a>Know the data</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv() # 读取csv文件</span><br><span class="line">pd.head() # 查看表头</span><br><span class="line">pd.tail() # 查看表尾</span><br><span class="line">pd.dtypes # 查看列的数据类型</span><br><span class="line">pd.isnull().sum() # 查看null值数量</span><br></pre></td></tr></table></figure><p>Import the data and check the dtypes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ri = pd.read_csv(&quot;/Users/wittyfans/Desktop/pycon-2018-tutorial/police.csv&quot;)</span><br><span class="line">ri.dtypes</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">stop_date                     object</span><br><span class="line">stop_time                     object</span><br><span class="line">driver_gender                 object</span><br><span class="line">driver_age_raw               float64</span><br><span class="line">driver_age                   float64</span><br><span class="line">driver_race                   object</span><br><span class="line">violation_raw                 object</span><br><span class="line">violation                     object</span><br><span class="line">search_conducted                bool</span><br><span class="line">search_type                   object</span><br><span class="line">stop_outcome                  object</span><br><span class="line">is_arrested                   object</span><br><span class="line">stop_duration                 object</span><br><span class="line">drugs_related_stop              bool</span><br><span class="line">frisk                         object</span><br><span class="line">stop_datetime         datetime64[ns]</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><blockquote><p>可以看到有多少列，以及这列的数据类型，对数据有一个基本的了解。</p></blockquote><h2 id="年龄占比"><a href="#年龄占比" class="headerlink" title="年龄占比"></a>年龄占比</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mE65e58kzSnXPoiQuv06EIsD_5IgkuxLDZSIWIq3z0080umibcEGypBMNRyxrh-_t8ZpO1tinR38oIAqNEUEN2jl_IJOSCncuaaA6zXZnzvANNfEC9K2OEYVaIvvSF4JQyz1iQdZTfP4mQK8eQeO-2lRc3o0piHzbEaHXgDRDUWRtA6Tt4plvHj9nR-QjmSuni-o7LuM7g9XPA6ylYKSGfQ/driver_ages.png?psid=1" alt="年龄分布图"></p><h2 id="种族占比"><a href="#种族占比" class="headerlink" title="种族占比"></a>种族占比</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mTDy70KXCAzr_TjjsNCfUXYf6PAbhCY35FIoI5RleZO2gXs7aWmd3iUvH0lYMbhQLQFxdPLvup9F6M8iSrO8CEMqArMCBoOas1iyxSVO1zs8BX1oFG9_dOse1qmYqQ6mrv5tKl0fIODR5-9HsX9eN2qXj78TYzLcMrnA5wCM_O2CpUE-lzzvrNfx2-dNke55sPxQqnrC1eDjIAGF9VLnagg/driver_race.png?psid=1" alt="种族占比"></p><h2 id="毒驾被查时段分布"><a href="#毒驾被查时段分布" class="headerlink" title="毒驾被查时段分布"></a>毒驾被查时段分布</h2><p><img src="https://bn1301files.storage.live.com/y4mhtaWz5NsXj-qGHm5oUrB8ZIP9v0natmwePTIE8zMXgp0lRdXf1cFDU3hqAbkwy3FjZ46xiStnPN5h_P8UswB0h7D2PIFObR082XLqchJMrav4GRzwW2OdACiP6t51_7GB1NsT_ECU5knU2WWhsWpkx4mBD2Ms10uF0wpqGJ4HOWPfFqWxBenEOaBVBAQGW8xBxfhfqtScK7C3g5U8U8xeg/drugs_rate_in_day.png?psid=1&amp;width=2250&amp;height=1050" alt="毒驾被查时段分布"></p><h2 id="男性违章类别前十"><a href="#男性违章类别前十" class="headerlink" title="男性违章类别前十"></a>男性违章类别前十</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mY4aDbWKRRPvQNtn3akzjE5rXGJIRn07EZm0ZuqciitsV8N71Y4wtmjeQ8u55C00-Kqz5fdaN6yqpTZdmQE_gHgP1fjruNCIceCrguCkYx3UB7LWHTGNLipTEOIzb3AXhmTStDhMQNetfL9YLF0GL2uqJsDtNYtjGmcXFZDFBotzhrxP2oj1ZFGZPgnFHtrHzzzCEc9t_UUA28kZTijswUg/MViolations.png?psid=1" alt=""></p><h2 id="女性违章类别前十"><a href="#女性违章类别前十" class="headerlink" title="女性违章类别前十"></a>女性违章类别前十</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4m3ncUi3FGe1kHKeAAd8dat0yoPSrMmDUOV5soHlnkyNMMeNzUoFDvTCO0X13bycvU9zApH8_kS_0Xj-HdgxkoFHKU9NDHcUJo6VW30C0RIyLjuWJY0c-BTR3f3zp3PHj4qWV74CMl9Z32CWzGIcAbvVyCZAMrdMhj_FuZfJBp2wDgDEWjcABDhMcOlDSml6OD1wweR1L0A3jMQbDfwUV3ng/ViolationsType.png?psid=1" alt=""></p><h2 id="男女违章类别对比"><a href="#男女违章类别对比" class="headerlink" title="男女违章类别对比"></a>男女违章类别对比</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mMawv_h-NxRbffdJTPb-DlD__xVYddWhBdsrLsu_uDHcfqxYkP7unET7ikEPG_9n0m6v6tu3lb1zARO5tqAjmgMf8eVTFEjRnMAqmTEe7txh0nqah4bSMuPBnIgxoar-iSrKHRWjzOX8hLFTElP2jZPgbXa0ppqcxdKTRZFiVLsVPT8O_aDvIqxAJoxs_Alw7evCxhCMLO9KwopZEYapExg/mf_violations.png?psid=1" alt="男女违章类别对比"></p><h2 id="查获违章数（按年）"><a href="#查获违章数（按年）" class="headerlink" title="查获违章数（按年）"></a>查获违章数（按年）</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mkfreK_7B57c_c1WH3mQ9Ay6BW04wDjZMWXCgVaAsQ0gn5VoZRKsQmuyjmEKlpBai246ELuuVY0dtZFdlqdKzVKEI9jcLe6vRquAbGFSP0BrXHQo94PkzDbc0ud71OoOtUTHFsEQ-8b89O5OForTQujea-C29DVa5p5zWnRQx7Cfai_V3Cf0dB9yUO7g5CCpB_KoH3mKZVc2roODe4oCP1Q/Violations_years.png?psid=1" alt="查获违章数"></p><h2 id="违章查获时间段与年份"><a href="#违章查获时间段与年份" class="headerlink" title="违章查获时间段与年份"></a>违章查获时间段与年份</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mIUjvRHUmNWYiV_TJbVARksZpQtddC1eI5GVzcjf_AjzpxfD8BDofc68PsmYyYfrfTafDodrlRiaN2ylj7b9sqqShsimXbMbMlGOVwlggUnTZ1uLwOLgyxmKBVcUBmVXnv_jNMX8Iwv5-F0ViFnak1KtVFENNfP1GqMRjBwBqrFx03XwyiYzBaZaTSeF6xahq1N7k2L8TC1j8nO_CFrkVoA/Search_rate_in_years.png?psid=1" alt="违章查获时间段分布"></p><h1 id="Handle-the-data"><a href="#Handle-the-data" class="headerlink" title="Handle the data"></a>Handle the data</h1><h2 id="1-Remove-the-column-that-only-contains-missing-values"><a href="#1-Remove-the-column-that-only-contains-missing-values" class="headerlink" title="1. Remove the column that only contains missing values"></a>1. Remove the column that only contains missing values</h2><h3 id="Drop-column"><a href="#Drop-column" class="headerlink" title="Drop column"></a>Drop column</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ri.drop(&apos;value&apos;,aixs=&apos;columns&apos;,inplace=True)</span><br><span class="line"></span><br><span class="line"># aixs = &apos;columns&apos;即我们要进行的是列操作，有时候也用aixs = 1代替。</span><br><span class="line"># inplace = True,即处理完后替代原来的数据，相当于下面这种写法：</span><br><span class="line"></span><br><span class="line">ri = ri.drop(&apos;county_name&apos;,axis=1)</span><br></pre></td></tr></table></figure><p>There is another way to drop the columns, like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del ri[&apos;columns_name&apos;]</span><br></pre></td></tr></table></figure><p>you can do that as this, that’s fine, but it’s not the <em>Pandas way</em>.</p><p>Tips:</p><ul><li>Pay attention to default arguments</li><li>check your work</li><li>There is more than one way to do everything in pandas</li></ul><h2 id="2-Do-men-or-women-speed-more-often"><a href="#2-Do-men-or-women-speed-more-often" class="headerlink" title="2. Do men or women speed more often?"></a>2. Do men or women speed more often?</h2><h3 id="driver-gender-violaton"><a href="#driver-gender-violaton" class="headerlink" title="driver_gender,violaton"></a>driver_gender,violaton</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.violation == &quot;Speeding&quot;].driver_gender.value_counts()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M    32979</span><br><span class="line">F    15482</span><br><span class="line">Name: driver_gender, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.violation == &quot;Speeding&quot;].driver_gender.value_counts(normalize=True) # get the percent value, 如果一个人超速，那么多大几率是男性或女性</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M    0.680527</span><br><span class="line">F    0.319473</span><br><span class="line">Name: driver_gender, dtype: float64</span><br></pre></td></tr></table></figure><p>反过来看，女性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.driver_gender == &apos;F&apos;].violation.value_counts(normalize=True)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Speeding               0.658500</span><br><span class="line">Moving violation       0.136277</span><br><span class="line">Equipment              0.105780</span><br><span class="line">Registration/plates    0.043086</span><br><span class="line">Other                  0.029348</span><br><span class="line">Seat belt              0.027009</span><br><span class="line">Name: violation, dtype: float64</span><br></pre></td></tr></table></figure><p>男性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.driver_gender == &apos;M&apos;].violation.value_counts(normalize=True)</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Speeding               0.524350</span><br><span class="line">Moving violation       0.207012</span><br><span class="line">Equipment              0.135671</span><br><span class="line">Other                  0.057668</span><br><span class="line">Registration/plates    0.038461</span><br><span class="line">Seat belt              0.036839</span><br><span class="line">Name: violation, dtype: float64</span><br></pre></td></tr></table></figure></p><p>合并成一条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby(&apos;driver_gender&apos;).violation.value_counts(normalize=True)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">driver_gender  violation          </span><br><span class="line">F              Speeding               0.658500</span><br><span class="line">               Moving violation       0.136277</span><br><span class="line">               Equipment              0.105780</span><br><span class="line">               Registration/plates    0.043086</span><br><span class="line">               Other                  0.029348</span><br><span class="line">               Seat belt              0.027009</span><br><span class="line">M              Speeding               0.524350</span><br><span class="line">               Moving violation       0.207012</span><br><span class="line">               Equipment              0.135671</span><br><span class="line">               Other                  0.057668</span><br><span class="line">               Registration/plates    0.038461</span><br><span class="line">               Seat belt              0.036839</span><br><span class="line">Name: violation, dtype: float64</span><br></pre></td></tr></table></figure><blockquote><p>when you wirte the groupby, just think for each value(in here is gender, man or women).</p></blockquote><ul><li>count(): 返回所有数据统计之和</li><li>value_counts(): 分别统计该数据分类下（如果有）的值</li><li>normalize = True: 该选项等于True，则会返回 <em>relative frequencies of the unique values.</em></li></ul><h2 id="3-Does-gender-affect-who-gets-searched-during-a-stop"><a href="#3-Does-gender-affect-who-gets-searched-during-a-stop" class="headerlink" title="3. Does gender affect who gets searched during a stop?"></a>3. Does gender affect who gets searched during a stop?</h2><h3 id="driver-gender-search-conducted"><a href="#driver-gender-search-conducted" class="headerlink" title="driver_gender,search_conducted"></a>driver_gender,search_conducted</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.search_conducted.value_counts(normalize=True)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">False    0.965163</span><br><span class="line">True     0.034837</span><br><span class="line">Name: search_conducted, dtype: float64</span><br></pre></td></tr></table></figure><p>Same results with above, how does that work?<br>If the serious value is bool type and you can always just get a sum to konw the number of ones, or a mean to get the percentage of ones, that will simplify you code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.search_conducted.mean()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.03483720473942948</span><br></pre></td></tr></table></figure><p>groupby gender:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby(&apos;driver_gender&apos;).search_conducted.mean()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver_gender</span><br><span class="line">F    0.020033</span><br><span class="line">M    0.043326</span><br><span class="line">Name: search_conducted, dtype: float64</span><br></pre></td></tr></table></figure><p>Does that prove any things? No, </p><ul><li>Causation is difficult to conclude, so focus on relationships.</li><li>Include all relevant factors when studying a relationship.</li></ul><p>Let’s see details:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby([&apos;driver_gender&apos;,&apos;violation&apos;]).search_conducted.mean()</span><br></pre></td></tr></table></figure></p><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">driver_gender  violation          </span><br><span class="line">F              Equipment              0.042622</span><br><span class="line">               Moving violation       0.036205</span><br><span class="line">               Other                  0.056522</span><br><span class="line">               Registration/plates    0.066140</span><br><span class="line">               Seat belt              0.012598</span><br><span class="line">               Speeding               0.008720</span><br><span class="line">M              Equipment              0.070081</span><br><span class="line">               Moving violation       0.059831</span><br><span class="line">               Other                  0.047146</span><br><span class="line">               Registration/plates    0.110376</span><br><span class="line">               Seat belt              0.037980</span><br><span class="line">               Speeding               0.024925</span><br><span class="line">Name: search_conducted, dtype: float64</span><br></pre></td></tr></table></figure><h2 id="4-Why-is-search-type-missing-so-often"><a href="#4-Why-is-search-type-missing-so-often" class="headerlink" title="4. Why is search_type missing so often?"></a>4. Why is search_type missing so often?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.search_conducted.value_counts()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">False    88545</span><br><span class="line">True      3196</span><br><span class="line">Name: search_conducted, dtype: int64</span><br></pre></td></tr></table></figure><p>search_conducted means a search performed, 即一个车主被警察查了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.search_type.count()</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Incident to Arrest                                          1219</span><br><span class="line">Probable Cause                                               891</span><br><span class="line">Inventory                                                    220</span><br><span class="line">Reasonable Suspicion                                         197</span><br><span class="line">Protective Frisk                                             161</span><br><span class="line">Incident to Arrest,Inventory                                 129</span><br><span class="line">Incident to Arrest,Probable Cause                            106</span><br><span class="line">Probable Cause,Reasonable Suspicion                           75</span><br><span class="line">Incident to Arrest,Inventory,Probable Cause                   34</span><br><span class="line">Probable Cause,Protective Frisk                               33</span><br><span class="line">Incident to Arrest,Protective Frisk                           33</span><br><span class="line">Inventory,Probable Cause                                      22</span><br><span class="line">Incident to Arrest,Reasonable Suspicion                       13</span><br><span class="line">Incident to Arrest,Inventory,Protective Frisk                 11</span><br><span class="line">Inventory,Protective Frisk                                    11</span><br><span class="line">Protective Frisk,Reasonable Suspicion                         11</span><br><span class="line">Incident to Arrest,Probable Cause,Protective Frisk            10</span><br><span class="line">Incident to Arrest,Probable Cause,Reasonable Suspicion         6</span><br><span class="line">Incident to Arrest,Inventory,Reasonable Suspicion              4</span><br><span class="line">Inventory,Reasonable Suspicion                                 4</span><br><span class="line">Inventory,Probable Cause,Reasonable Suspicion                  2</span><br><span class="line">Inventory,Probable Cause,Protective Frisk                      2</span><br><span class="line">Probable Cause,Protective Frisk,Reasonable Suspicion           1</span><br><span class="line">Incident to Arrest,Protective Frisk,Reasonable Suspicion       1</span><br><span class="line">Name: search_type, dtype: int64</span><br></pre></td></tr></table></figure></p><p>search_type, the reason for search performed, 即警察为什么要查这个车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.search_conducted == False].search_type.value_counts()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series([], Name: search_type, dtype: int64)</span><br></pre></td></tr></table></figure><p>return empty series, why? because there is no value to count, nan and null is not a value, if it’s not what you want,add dropna= False in the value_counts() method likt this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.search_conducted == False].search_type.value_counts(dropna=False)</span><br></pre></td></tr></table></figure><h2 id="5-During-a-search-how-often-is-the-driver-frisked"><a href="#5-During-a-search-how-often-is-the-driver-frisked" class="headerlink" title="5. During a search, how often is the driver frisked?"></a>5. During a search, how often is the driver frisked?</h2><blockquote><p>How to know is there a word in a string in Python? You may use ‘a’ in b, this is the pythoy way, we got pandas way like this:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ri.search_type.str.contains()</span><br></pre></td></tr></table></figure><p>针对每一行，判断是否有字符串在其中，有则返回True，无则False.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ri[&apos;frisk&apos;] = ri.search_type.str.contains(&apos;Probable Cause&apos;)</span><br><span class="line">ri.frisk</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0          NaN</span><br><span class="line">1          NaN</span><br><span class="line">2          NaN</span><br><span class="line">3          NaN</span><br><span class="line">4          NaN</span><br><span class="line">5          NaN</span><br><span class="line">6          NaN</span><br><span class="line">7          NaN</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.frisk.value_counts(dropna=False)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NaN      88545</span><br><span class="line">False     2014</span><br><span class="line">True      1182</span><br><span class="line">Name: frisk, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ri.frisk.sum() -&gt; 1182</span><br><span class="line">ri.frisk.mean() -&gt; 0.36983729662077597</span><br><span class="line">1182/(1182+2014) -&gt; 0.36983729662077597</span><br></pre></td></tr></table></figure><p>the mean, is caculated by frisked / (frisked+unfrisked), and will <strong>excluded the missing values.</strong></p><h2 id="6-Which-year-had-the-least-number-of-stops"><a href="#6-Which-year-had-the-least-number-of-stops" class="headerlink" title="6. Which year had the least number of stops?"></a>6. Which year had the least number of stops?</h2><h3 id="Method-1-Use-the-str-slice"><a href="#Method-1-Use-the-str-slice" class="headerlink" title="Method 1: Use the str.slice"></a>Method 1: Use the str.slice</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_date.str.slice(0,4).value_counts()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2012    10970</span><br><span class="line">2006    10639</span><br><span class="line">2007     9476</span><br><span class="line">2014     9228</span><br><span class="line">2008     8752</span><br><span class="line">2015     8599</span><br><span class="line">2011     8126</span><br><span class="line">2013     7924</span><br><span class="line">2009     7908</span><br><span class="line">2010     7561</span><br><span class="line">2005     2558</span><br></pre></td></tr></table></figure><p>The stop_date format is: 2005-01-02, so slice(0,4) will return 2005, then do a value_counts will get the number of stops in all years.</p><h3 id="Method-2-Use-the-datetime"><a href="#Method-2-Use-the-datetime" class="headerlink" title="Method 2: Use the datetime"></a>Method 2: Use the datetime</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">combined = ri.stop_date.str.cat(ri.stop_time,sep=&apos; &apos;)</span><br><span class="line">ri[&apos;stop_datetime&apos;] = pd.to_datetime(combined)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2012    10970</span><br><span class="line">2006    10639</span><br><span class="line">2007     9476</span><br><span class="line">2014     9228</span><br><span class="line">2008     8752</span><br><span class="line">2015     8599</span><br><span class="line">2011     8126</span><br><span class="line">2013     7924</span><br><span class="line">2009     7908</span><br><span class="line">2010     7561</span><br><span class="line">2005     2558</span><br></pre></td></tr></table></figure><p>Use the pd.to_datetime method to convert a concated string to a datatime type value, then add a new col in ri.<br>cat is a string method to concat two string, the sep arg is a string or char you want insert in center.</p><p>So, after that, how to get the year value?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_datetime.dt.year.value_counts()</span><br></pre></td></tr></table></figure><p>datetime has a method .dt, and you can .year, .day, etc.</p><h2 id="7-How-does-drug-activity-change-by-time-of-day"><a href="#7-How-does-drug-activity-change-by-time-of-day" class="headerlink" title="7. How does drug activity change by time of day?"></a>7. How does drug activity change by time of day?</h2><h3 id="stop-datetime-drugs-related-stop"><a href="#stop-datetime-drugs-related-stop" class="headerlink" title="stop_datetime,drugs_related_stop"></a>stop_datetime,drugs_related_stop</h3><p>Let’s specific, for every hour, what is the rate of the drugs_related_stop?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby(ri.stop_datetime.dt.hour).drugs_related_stop.mean()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">stop_datetime</span><br><span class="line">0     0.019728</span><br><span class="line">1     0.013507</span><br><span class="line">2     0.015462</span><br><span class="line">3     0.017065</span><br><span class="line">4     0.011811</span><br><span class="line">5     0.004762</span><br><span class="line">6     0.003040</span><br><span class="line">7     0.003281</span><br><span class="line">8     0.002687</span><br><span class="line">9     0.006288</span><br><span class="line">10    0.005714</span><br><span class="line">11    0.006976</span><br><span class="line">12    0.004467</span><br><span class="line">13    0.010326</span><br><span class="line">14    0.007810</span><br><span class="line">15    0.006416</span><br><span class="line">16    0.005723</span><br><span class="line">17    0.005517</span><br><span class="line">18    0.010148</span><br><span class="line">19    0.011596</span><br><span class="line">20    0.008084</span><br><span class="line">21    0.013342</span><br><span class="line">22    0.013533</span><br><span class="line">23    0.016344</span><br><span class="line">Name: drugs_related_stop, dtype: float64</span><br></pre></td></tr></table></figure><p>show it!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby(ri.stop_datetime.dt.hour).drugs_related_stop.mean().plot()</span><br></pre></td></tr></table></figure><p>output:</p><p><img src="https://mcwywq.bn.files.1drv.com/y4mkRchu7eh5ClZ_5hMguC0V-k3KY7tnt0-KpbEoif1EgVMEXCdt5VIxstOsVv-urRgNOdK6ebfF1SfkOyqWmxjcfz1a6F9_uQQpW79nkbZmYiKGVvAr1M6vXbh9ly0DNOSCIkNgyrDwQkjpDXtfRMwtfsZkhyd7UqsZJeKMxSsGfClSDqucjlFGZ3A7xkFxLDzORpau6TMPGXIkjjDjMkXHw/drugs_related.png?psid=1" alt=""></p><p>if you want the notebook auto show the img, make sure you imported the packge.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><p>then when you type .plot() the img will show automatically.</p><p>Lesssons:</p><ul><li>Consider removing chunks of data that may be biased</li><li>Use the datetime data type for dates and times</li></ul><h2 id="8-Do-most-stops-occur-at-night"><a href="#8-Do-most-stops-occur-at-night" class="headerlink" title="8. Do most stops occur at night?"></a>8. Do most stops occur at night?</h2><p>Let do this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_datetime.dt.hour.value_counts().plot()</span><br></pre></td></tr></table></figure><p>you will get an error img, because the plot is generated by the value, not the index(in here is the hour),<br>so you need to sort with index first,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_datetime.dt.hour.value_counts().sort_index().plot()</span><br></pre></td></tr></table></figure><p>ouput:</p><p><img src="https://mcwywq.bn.files.1drv.com/y4mkRchu7eh5ClZ_5hMguC0V-k3KY7tnt0-KpbEoif1EgVMEXCdt5VIxstOsVv-urRgNOdK6ebfF1SfkOyqWmxjcfz1a6F9_uQQpW79nkbZmYiKGVvAr1M6vXbh9ly0DNOSCIkNgyrDwQkjpDXtfRMwtfsZkhyd7UqsZJeKMxSsGfClSDqucjlFGZ3A7xkFxLDzORpau6TMPGXIkjjDjMkXHw/drugs_related.png?psid=1" alt=""></p><p>and there is a details version:</p><p><img src="https://bn1301files.storage.live.com/y4mfDJ5BskfJi6Bl_KlVmBzKUzosUMz4c6sJtnFknHh-mKevDycVq5ghobnTWVfINyG-pQDAIfZK6UNCZOSpUP2IxLJJtgkpS4TN9lmc0VN0OcINS3bjH7EoGLkpNl0gsmiIlcTiyxb7K_qZyjTjmGu3-rCJ52mGcepghI8NxsInK-WUiy51tw0vQJGV-vKmdX78YOBeACPpGGemOYrpTmCcg/stop_hour_details.png?psid=1&amp;width=1278&amp;height=852" alt=""></p><p>bt, how to define the night, In my view 22-4 is night, I want to filter the hours:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ri[(ri.stop_datetime.dt.hour &gt; 4) &amp; (ri.stop_datetime.dt.hour &lt; 22)].shape</span><br></pre></td></tr></table></figure><p>if you have a category, want to apply the hours, you can define a method and map to the hours.</p><h2 id="9-Find-the-bad-data-in-the-stop-duration-column-and-fix-it"><a href="#9-Find-the-bad-data-in-the-stop-duration-column-and-fix-it" class="headerlink" title="9. Find the bad data in the stop_duration column and fix it"></a>9. Find the bad data in the stop_duration column and fix it</h2><p>Check this value counts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_duration.value_counts()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0-15 Min     69543</span><br><span class="line">16-30 Min    13635</span><br><span class="line">30+ Min       3228</span><br><span class="line">2                1</span><br><span class="line">1                1</span><br><span class="line">Name: stop_duration, dtype: int64</span><br></pre></td></tr></table></figure><p>We want to turn the stop_duration value equals ‘1’ to ‘NAN’, how?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[(ri.stop_duration == &apos;1&apos;) | (ri.stop_duration == &apos;2&apos;)].stop_duration == &apos;NAN&apos;</span><br></pre></td></tr></table></figure><p>that looks make sense,but check the value counts, it does’nt work.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0-15 Min     69543</span><br><span class="line">16-30 Min    13635</span><br><span class="line">30+ Min       3228</span><br><span class="line">2                1</span><br><span class="line">1                1</span><br><span class="line">Name: stop_duration, dtype: int64</span><br></pre></td></tr></table></figure><p>why? acturlly, you may get a warnning,</p><blockquote><p><em>A value is trying to be set on a copy of a slice from a DataFrame.</em></p></blockquote><p>You should use loc.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.loc[(ri.stop_duration == &apos;1&apos;) | (ri.stop_duration == &apos;2&apos;),&apos;stop_duration&apos;] = &apos;NAN&apos;</span><br></pre></td></tr></table></figure><p>check again:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0-15 Min     69543</span><br><span class="line">16-30 Min    13635</span><br><span class="line">30+ Min       3228</span><br><span class="line">NAN              2</span><br><span class="line">Name: stop_duration, dtype: int64</span><br></pre></td></tr></table></figure><p>注意比较一下这两者用法上的区别，如果想要了解更多loc的用法，可以关注该作者的另一个单独介绍的视频，<a href="https://www.youtube.com/watch?v=xvpNA7bC8cs" target="_blank" rel="noopener">油管链接</a>。</p><p>but you get two string format ‘NAN’, you want get a really NAN value, okay, let fix it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">ri.loc[ri.stop_duration == &apos;NAN&apos;,&apos;stop_duration&apos;] = np.nan</span><br></pre></td></tr></table></figure><p>there you go!</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 0-15 Min     69543</span><br><span class="line">16-30 Min    13635</span><br><span class="line">30+ Min       3228</span><br><span class="line">Name: stop_duration, dtype: int64</span><br></pre></td></tr></table></figure><h1 id="Ploting"><a href="#Ploting" class="headerlink" title="Ploting"></a>Ploting</h1><h2 id="导入相关包"><a href="#导入相关包" class="headerlink" title="导入相关包"></a>导入相关包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br></pre></td></tr></table></figure><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ri = pd.read_csv(&quot;C:/Users/Fan.ZhangFZ/Desktop/police.csv&quot;)</span><br><span class="line">ri.drop(&apos;county_name&apos;,axis=&apos;columns&apos;,inplace=True)</span><br><span class="line">ri.dtypes</span><br></pre></td></tr></table></figure><h2 id="年龄分布状况"><a href="#年龄分布状况" class="headerlink" title="年龄分布状况"></a>年龄分布状况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ageinfo = ri.driver_age.value_counts()</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(12,8))</span><br><span class="line">ax = fig.add_subplot(1,1,1)</span><br><span class="line">ax.bar(ageinfo.index,ageinfo.values,color=&apos;g&apos;)</span><br><span class="line">ax.set_xlabel(&apos;Driver age&apos;)</span><br><span class="line">ax.set_ylabel(&apos;Number of driver&apos;)</span><br><span class="line">xticks = ax.set_xticks(np.arange(15,100,5))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="搜查时间"><a href="#搜查时间" class="headerlink" title="搜查时间"></a>搜查时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">stoped_datetime = ri.stop_date.str.cat(ri.stop_time,sep=&apos; &apos;)</span><br><span class="line">ri[&apos;stoped_datetime&apos;] = pd.to_datetime(stoped_datetime)</span><br><span class="line">year_counts = ri.stoped_datetime.dt.year.value_counts().sort_index()</span><br><span class="line">hour_counts = ri.stoped_datetime.dt.hour.value_counts().sort_index()</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(12,14))</span><br><span class="line">ax1 = fig.add_subplot(2,1,1)</span><br><span class="line">ax1.plot(year_counts.index,year_counts.values,marker=&apos;o&apos;,color=&apos;y&apos;,linestyle=&apos;--&apos;)</span><br><span class="line">ax1.set_xlabel(&apos;Years&apos;)</span><br><span class="line">ax1.set_ylabel(&apos;Search Count&apos;)</span><br><span class="line">ax1.set_title(&quot;Search rate in diffrent years&quot;)</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(2,1,2)</span><br><span class="line">ax2.set_xlabel(&apos;Hours&apos;)</span><br><span class="line">ax2.set_ylabel(&apos;Search Count&apos;)</span><br><span class="line">ax2.plot(hour_counts.index,hour_counts.values,marker=&apos;o&apos;,color=&apos;b&apos;,linestyle=&apos;--&apos;)</span><br><span class="line">ax2.set_title(&quot;Search rate in diffrent hours&quot;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="种族情况"><a href="#种族情况" class="headerlink" title="种族情况"></a>种族情况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">driver_race = ri.driver_race.value_counts()</span><br><span class="line">fig = plt.figure(figsize=(12,8))</span><br><span class="line">ax = fig.add_subplot(1,1,1)</span><br><span class="line">ax.bar(driver_race.index,driver_race.values)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="男女超速的比例"><a href="#男女超速的比例" class="headerlink" title="男女超速的比例"></a>男女超速的比例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.violation == &quot;Speeding&quot;].driver_gender.value_counts().plot.pie(figsize=(8, 8),labels=[&apos;Men&apos;, &apos;Female&apos;],autopct=&apos;%.2f&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="男性违章类型占比"><a href="#男性违章类型占比" class="headerlink" title="男性违章类型占比"></a>男性违章类型占比</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ri[ri.driver_gender == &apos;M&apos;].violation.value_counts(normalize=True).plot.pie(figsize=(8, 8),autopct=&apos;%.2f&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="女性违章占比"><a href="#女性违章占比" class="headerlink" title="女性违章占比"></a>女性违章占比</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.driver_gender == &apos;F&apos;].violation.value_counts(normalize=True).plot.pie(figsize=(8, 8),autopct=&apos;%.2f&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="合并展示"><a href="#合并展示" class="headerlink" title="合并展示"></a>合并展示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = ri.groupby([&apos;driver_gender&apos;]).violation.value_counts(normalize=True)*100</span><br><span class="line">fig, ax = plt.subplots(figsize=(15,7))</span><br><span class="line"># use unstack()</span><br><span class="line">data.unstack().plot.bar(ax=ax,stacked=True)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="被搜查人员为男、女的概率"><a href="#被搜查人员为男、女的概率" class="headerlink" title="被搜查人员为男、女的概率"></a>被搜查人员为男、女的概率</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = ri.groupby(&apos;driver_gender&apos;).search_conducted.mean()</span><br><span class="line">fig,ax = plt.subplots(figsize=(5,7))</span><br><span class="line">data.plot.pie(ax=ax,autopct=&apos;%.2f&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="违章类型占比"><a href="#违章类型占比" class="headerlink" title="违章类型占比"></a>违章类型占比</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search_type = ri.search_type.value_counts()</span><br><span class="line">fig,ax = plt.subplots(figsize=(6,10))</span><br><span class="line">search_type.plot.barh(color=&apos;r&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="哪一年违章最多"><a href="#哪一年违章最多" class="headerlink" title="哪一年违章最多"></a>哪一年违章最多</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_date.str.slice(0,4).value_counts().sort_index().plot.barh(figsize=(12,8),color=&apos;y&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="一天中什么时候毒驾率最高？"><a href="#一天中什么时候毒驾率最高？" class="headerlink" title="一天中什么时候毒驾率最高？"></a>一天中什么时候毒驾率最高？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">drug_hour_rate = ri.groupby(ri.stoped_datetime.dt.hour).drugs_related_stop.mean() * 100</span><br><span class="line">fig,ax = plt.subplots(figsize=(15,7))</span><br><span class="line">xticks = ax.set_xticks(np.arange(0,24,1))</span><br><span class="line">ax.set_title(&apos;Rate for drugs related stop in a day&apos;)</span><br><span class="line">ax.set_ylabel(&apos;Rate,%&apos;)</span><br><span class="line">ax.set_xlabel(&apos;Hours&apos;)</span><br><span class="line">drug_hour_rate.plot(ax=ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="生词"><a href="#生词" class="headerlink" title="生词"></a>生词</h1><ul><li>search：这里应该理解为警察的搜查</li><li>hypothetical: 假设</li><li>slick way,精明的小技巧</li><li>registration searched: 车牌造假违章</li><li>conducted: 处理、行为</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一次偶然的机会看到&lt;a href=&quot;&quot;&gt;王树义&lt;/a&gt;老师的推荐YouTube上的这个pandas视频教程，于是花了点时间学习了一下，也就有了这篇笔记，因为课程是英文的，也没有提供&lt;br&gt;中文字幕，所以我的笔记也就懒得再用中文写了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="Data Science" scheme="http://wittyfans.com/tags/Data-Science/"/>
    
      <category term="Pandas" scheme="http://wittyfans.com/tags/Pandas/"/>
    
      <category term="Big Data" scheme="http://wittyfans.com/tags/Big-Data/"/>
    
  </entry>
  
  <entry>
    <title>Pandas常用操作</title>
    <link href="http://wittyfans.com/coding/Pandas%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html"/>
    <id>http://wittyfans.com/coding/Pandas常用操作.html</id>
    <published>2018-12-29T04:16:02.000Z</published>
    <updated>2018-12-31T03:38:10.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>常用的操作与命令，记录一下</p></blockquote><a id="more"></a><h1 id="Pandas-常用操作"><a href="#Pandas-常用操作" class="headerlink" title="Pandas 常用操作"></a>Pandas 常用操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 更改列的顺序</span><br><span class="line">pdusersInfo = pdusersInfo[[&apos;username&apos;,&apos;sex&apos;,&apos;platform&apos;]]</span><br><span class="line"></span><br><span class="line">2. 从字典构造DataFrame</span><br><span class="line">usersInfo = &#123;&apos;username&apos;:username,&apos;sex&apos;:usersex,&apos;platform&apos;:platform&#125;</span><br><span class="line">pdusersInfo = pd.DataFrame.from_dict(usersInfo)</span><br><span class="line"></span><br><span class="line">3. 本地json转换成pd数据</span><br><span class="line">import json</span><br><span class="line">with open(&quot;path/filename.json&quot;,encoding=&quot;utf-8&quot;) as jsonFile:</span><br><span class="line">    data = json.load(jsonFile)</span><br><span class="line">pdJson = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">4.数据分段统计，bins是分段的标记，ages为数据，数据将会按照18-25,25-35等分段统计，right为控制数据偏向哪一边</span><br><span class="line">ages = [20,22,21,27,47,33,67,42,100,60,60]</span><br><span class="line">bins = [18,25,35,60,100]</span><br><span class="line"></span><br><span class="line">cats = pd.cut(ages,bins,right=False)</span><br><span class="line">pd.value_counts(cats)</span><br><span class="line"></span><br><span class="line">5. 去重复</span><br><span class="line">data.drop_duplicates() -&gt; 去掉所有列的数据都一样的</span><br><span class="line">data.drop_duplicates([&quot;name&quot;,&quot;age&quot;]) -&gt; 去除名字和年龄一样的数据</span><br><span class="line"></span><br><span class="line">6. 合并两个表</span><br><span class="line">c = a.append(b)</span><br><span class="line">c.data.drop_duplicates()</span><br><span class="line"></span><br><span class="line">7. 统计列中某个值出现的次数</span><br><span class="line">pd.value_counts(colname.value)</span><br><span class="line"></span><br><span class="line">8. Excel交互</span><br><span class="line">&gt; 这三条代码的意思是，导入pandas，读取文件，并简要显示文件内容。</span><br><span class="line">import pandas as pd</span><br><span class="line">data = pd.read_excel(&quot;C://Users/username/path/filename.xlsx&quot;)</span><br><span class="line">data.tail</span><br><span class="line">data.dtypes</span><br><span class="line"></span><br><span class="line">&gt; 导出</span><br><span class="line">out_path = &quot;/Users/wittyfans/Desktop/4F/PhoneData.xlsx&quot;</span><br><span class="line">writer = pd.ExcelWriter(out_path , engine=&apos;xlsxwriter&apos;)</span><br><span class="line">data.to_excel(writer, sheet_name=&apos;Sheet1&apos;)</span><br><span class="line">writer.save()</span><br><span class="line"></span><br><span class="line">9. 过滤</span><br><span class="line">&gt; 过滤前五条数据：</span><br><span class="line">data.ID[:5]</span><br><span class="line"></span><br><span class="line">10. 丢弃空值</span><br><span class="line"> data.dropna()</span><br><span class="line"></span><br><span class="line">11. 类型转换</span><br><span class="line">int = double.astype(int)</span><br><span class="line"></span><br><span class="line">13. 从html请求表</span><br><span class="line">url = &apos;/Users/wittyfans/Desktop/a.html&apos;</span><br><span class="line">dfs = pd.read_html(url,header=0)</span><br><span class="line"></span><br><span class="line">14. 从字典构造DataFrame</span><br><span class="line">users = &#123;&apos;names&apos;:usernames,&apos;sex&apos;:usersexs,&apos;platform&apos;:userplatform&#125;</span><br><span class="line">users = pd.DataFrame(users)</span><br><span class="line"></span><br><span class="line">15. 根据指定值分组</span><br><span class="line">data.groupby(&apos;platform&apos;)</span><br><span class="line"></span><br><span class="line">16. 根据指定列排序</span><br><span class="line">data.sort_values(&apos;names&apos;,ascending=False)</span><br><span class="line"></span><br><span class="line">17. csv交互</span><br><span class="line">pd.read_csv(&quot;/Users/wittyfans/Desktop/example.csv&quot;)</span><br><span class="line"></span><br><span class="line">18. 选择数据</span><br><span class="line">- [参考](https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/3-2-pd-indexing/)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;常用的操作与命令，记录一下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="Data" scheme="http://wittyfans.com/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>V2ray Quick Start</title>
    <link href="http://wittyfans.com/coding/V2ray-Quick-Start.html"/>
    <id>http://wittyfans.com/coding/V2ray-Quick-Start.html</id>
    <published>2018-10-20T09:47:39.000Z</published>
    <updated>2018-12-29T04:20:15.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Deploy v2ray is so simple, but speed is not fast in my server.</p></blockquote><a id="more"></a><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>In Debian , Just input the command in below:</p><blockquote><p>bash &lt;(curl -L -s <a href="https://install.direct/go.sh" target="_blank" rel="noopener">https://install.direct/go.sh</a>)</p></blockquote><p>And you just need to wait, all things will get done automatically.</p><h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><p>First, Find the config file’s location:</p><blockquote><p>vi /etc/v2ray/config.json</p></blockquote><p>you will see this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;inbound&quot;: &#123;</span><br><span class="line">    &quot;port&quot;: you_port_nums,</span><br><span class="line">    &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;clients&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;id&quot;: &quot;the_id_that_generate_for_you&quot;,</span><br><span class="line">          &quot;level&quot;: 1,</span><br><span class="line">          &quot;alterId&quot;: 64</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  and more code</span><br></pre></td></tr></table></figure><p>Change the port if you need, copy the id in clients.</p><p>It’s time to start the v2ray, just type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service v2ray start</span><br></pre></td></tr></table></figure><p>to start the v2ray. Alse you can type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service v2ray start|stop|status|reload|restart|force-reload</span><br></pre></td></tr></table></figure><p>to get more control of the  v2ray service.</p><p>Untill now, It’s ok In server side, Let’s go to the client side.</p><h1 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h1><p>In your application, Click add button, input the port and id that I requires you to copy. Save and you can connect to the server now. </p><p>Enjoy it.</p><h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>The script installs the following files.</p><ul><li>/usr/bin/v2ray/v2ray: V2Ray executable</li><li>/usr/bin/v2ray/v2ctl: Utility</li><li>/etc/v2ray/config.json: Config file</li><li>/usr/bin/v2ray/geoip.dat: IP data file</li><li>/usr/bin/v2ray/geosite.dat: domain data file</li></ul><p>go.sh supports the following parameters.</p><ul><li>-p or –proxy: Use a proxy to download V2Ray packages. Same as curl format, such as “socks5://127.0.0.1:1080” or “<a href="http://127.0.0.1:3128&quot;" target="_blank" rel="noopener">http://127.0.0.1:3128&quot;</a>.</li><li>-f or –force: Force installation. The script will assume V2Ray was not installed at all.</li><li>–version: The version to be installed, such as “v1.13”. Default value is the latest stable release.</li><li>–local: Use a local package for installation.</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.v2ray.com/index.html" target="_blank" rel="noopener">Official site</a></li><li><a href="https://toutyrater.github.io/" target="_blank" rel="noopener">Easy version of official tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Deploy v2ray is so simple, but speed is not fast in my server.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="linux" scheme="http://wittyfans.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows CMD命令记录</title>
    <link href="http://wittyfans.com/coding/Windows-CMD%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95.html"/>
    <id>http://wittyfans.com/coding/Windows-CMD命令记录.html</id>
    <published>2018-10-08T08:11:12.000Z</published>
    <updated>2018-10-08T08:25:33.994Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理了一下常用的CMD命令 📇</p></blockquote><a id="more"></a><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">D: 进入d盘</span><br><span class="line">dir 列举当前目录的文件，类似linux的ls</span><br><span class="line">md 创建目录</span><br><span class="line">rd 删除目录</span><br><span class="line">echo %PROCESSOR_ARCHITECTURE%查看系统版本位数</span><br><span class="line">set查看系统环境变量</span><br><span class="line">netstat -ano查看开放的端口</span><br><span class="line">netstat -an | find &quot;3389&quot;查看3389开放情况</span><br><span class="line">ipconfig /all查询本机IP段，所在域等</span><br><span class="line">net config Workstation当前计算机名，全名，用户名，系统版本，工作站域，登陆域</span><br><span class="line">net user本机用户列表</span><br><span class="line">net localhroup administrators本机管理员[通常含有域用户]</span><br><span class="line">net user /domain查询域用户</span><br><span class="line">net user 用户名 /domain获取指定用户的账户信息</span><br><span class="line">net user /domain b404 pass修改域内用户密码，需要管理员权限</span><br><span class="line">net group /domain查询域里面的工作组</span><br><span class="line">net group 组名 /domain查询域中的某工作组</span><br><span class="line">net group &quot;domain admins&quot; /domain查询域管理员列表</span><br><span class="line">net group &quot;enterprise admins&quot; /domain获得企业管理员列表</span><br><span class="line">net group 组名 /del /domain删除域中的某组</span><br><span class="line">net group 组名 组成员名 /del /domain删除域中的某组的组成员</span><br><span class="line">net localgroup administrators /domain登录本机的域管理员</span><br><span class="line">net group 组名 /add增加域中的组</span><br><span class="line">net localgroup administrators workgroup\user001 /add域用户添加到本机</span><br><span class="line">net group &quot;domain controllers&quot; /domain查看域控制器(如果有多台)</span><br><span class="line">net time /domain判断主域，主域服务器都做时间服务器</span><br><span class="line">net config workstation当前登录域</span><br><span class="line">net session查看当前会话</span><br><span class="line">net use \\ip\ipc$ pawword /user:username@domain建立IPC会话[空连接-***]</span><br><span class="line">net view \\ip查询某IP共享</span><br><span class="line">net use z: \\192.168.200.21\文件夹名建立映射到本机Z盘</span><br><span class="line">net share查看SMB指向的路径[即共享]</span><br><span class="line">at \\192.168.200.21:50 c:\windows\fuxk.exe在共享主机上执行</span><br><span class="line">net view查询同一域内机器列表</span><br><span class="line">net view /domain查询域列表</span><br><span class="line">net view /domain:test查看test域中计算机列表</span><br><span class="line">net view \\DC的机器名字查看域控共享情况</span><br><span class="line">nltest /domain_trusts获取域信任信息</span><br><span class="line">net session查看当前会话</span><br><span class="line">net start查看当前运行的服务</span><br><span class="line">net time /domain查询主域服务器的时间</span><br><span class="line">net time \\192.168.200.21查看192.168.200.21机器的时间</span><br><span class="line">echo %logonserver%查看登陆到这台服务器的计算机</span><br><span class="line">net accounts查看本地密码策略</span><br><span class="line">net accounts /domain查看域密码策略</span><br><span class="line">nbtstat –A ipnetbios 查询</span><br><span class="line">netstat –an/ano/anb网络连接查询</span><br><span class="line">netsh firewall show config查看防火墙策略</span><br><span class="line">netsh firewall show state查看防火墙策略</span><br><span class="line">route print路由表</span><br><span class="line">tracert IP路由跟踪</span><br><span class="line">arp -a列出本网段内所有活跃的IP地址</span><br><span class="line">arp -s (ip + mac)绑定mac和IP</span><br><span class="line">arp -d (iP + mac)解绑IP和Mac</span><br><span class="line">tasklist /V查看进程[显示对应用户]</span><br><span class="line">tasklist /S ip /U domain\username /P /V查看远程计算机进程列表</span><br><span class="line">psexec \\192.168.200.21 -u administrator -p b404pass -c gsecdump.exe -u从域服务器密码存储文件windows/ntds/ntds.dit导出hash值出来</span><br><span class="line">gsecdump -a获取域登管理员登录过得hash值，这里gescdump为第三方导出AD域的hash值</span><br><span class="line">tasklist /S IP地址 /U 域名\用户名 /P /V查看远程计算机进程</span><br><span class="line">tasklist /svc查看进程</span><br><span class="line">taskkill /im 进程名称(cmd.exe)结束进程</span><br><span class="line">taskkill /pid[进程码]-t(结束该进程) -f(强制结束该进程以及所有子进程)</span><br><span class="line">ping 主机名显示IP</span><br><span class="line">qprocess *类似tasklist</span><br><span class="line">qprocess /SERVER:IP远程查看计算机进程列表</span><br><span class="line">nslookup –qt-MX Yahoo.com查看邮件服务器</span><br><span class="line">whoami /all查询当前用户权限等</span><br><span class="line">set查看系统环境变量</span><br><span class="line">systeminfo查看系统信息</span><br><span class="line">qwinsta查看登录情况</span><br><span class="line">qwinsta /SERVER:IP查看远程登录情况</span><br><span class="line">fsutil fsinfo drives查看所有盘符</span><br><span class="line">gpupdate /force更新域策略</span><br><span class="line">whoami查询账号所属权限</span><br><span class="line">whoami /all查看sid号</span><br><span class="line">wmic bios查看bios信息</span><br><span class="line">wmic qfe查看补丁信息</span><br><span class="line">wmic qfe get hotfixid查看补丁-Patch号，很实用</span><br><span class="line">wmic qfe list full /format:htable &gt; hotfixes.htm详细的补丁安装</span><br><span class="line">wmic share get name,path查看SMB指向路径</span><br><span class="line">wmic startup查看启动项</span><br><span class="line">wmic service查看服务</span><br><span class="line">wmic os查看OS信息</span><br><span class="line">wmic service list brief查看进程服务</span><br><span class="line">wmic process list brief查看进程</span><br><span class="line">wmic startup list brief启动程序信息</span><br><span class="line">wmic product list brief查看安装程序和版本信息（漏洞利用线索）</span><br><span class="line">wmic startup list full识别开机启动的程序</span><br><span class="line">wmic process where(description=&quot;mysqld.exe&quot;)&gt;&gt;mysql.log获取软件安装路径</span><br><span class="line">dir \\DC\SYSVOL /s /a &gt; sysvol.txt列出sysvol日志记录</span><br><span class="line">xcopy \\dc2.backlion.com\sysvol.txt sysvol.txt /i /e /c拷贝sysvol.txt到本地</span><br><span class="line">REG query HKCU /v &quot;pwd&quot; /s获取到存到注册表中的密码</span><br><span class="line">dir /b/s config.*查看所在目录所有前缀为config的文件</span><br><span class="line">findstr /si password *.xml *.ini *.txt查看后缀名文件中含有password关键字的文件</span><br><span class="line">findstr /si login *.xml *.ini *.txt查看后缀名文件中含有login关键字的文件</span><br><span class="line">copy con ftp.bat创建ftp.bat批处理，然后输入ifconfig等命令，按ctr+z退出，并创建成功</span><br><span class="line">copy con test.vbs创建test.vbs脚本，输入脚本后，按ctr+z退出，并创建成功</span><br><span class="line">ASSOC 显示文件扩展对应的程序</span><br><span class="line">cipher 删除文件，但并不立即删除</span><br><span class="line">driverquery -v 显示所有装了的驱动</span><br><span class="line">fc 对比两个文件</span><br><span class="line">netstat -an 显示IP与开放的端口</span><br><span class="line">Tracert、pathping 看路由表</span><br><span class="line">tasklist 正在运行的任务</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://xstarcd.github.io/wiki/windows/windows_cmd_summary_commands.html" target="_blank" rel="noopener">windows_cmd_summary</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理了一下常用的CMD命令 📇&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="windows" scheme="http://wittyfans.com/tags/windows/"/>
    
      <category term="shell" scheme="http://wittyfans.com/tags/shell/"/>
    
      <category term="cmd" scheme="http://wittyfans.com/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>Auto assign ticket with Jira python api</title>
    <link href="http://wittyfans.com/coding/Auto-assign-ticket-with-Jira-python-api.html"/>
    <id>http://wittyfans.com/coding/Auto-assign-ticket-with-Jira-python-api.html</id>
    <published>2018-10-05T14:40:07.000Z</published>
    <updated>2018-10-08T08:23:28.011Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>再也不用担心jira工单超时了 🤟</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">from collections import Counter</span><br><span class="line">from jira import JIRA</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># The notifier function</span><br><span class="line">def run_once(f):</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        if not wrapper.has_run:</span><br><span class="line">            wrapper.has_run = True</span><br><span class="line">            return f(*args, **kwargs)</span><br><span class="line">    wrapper.has_run = False</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def notify(title, subtitle, message):</span><br><span class="line">    t = &apos;-title &#123;!r&#125;&apos;.format(title)</span><br><span class="line">    s = &apos;-subtitle &#123;!r&#125;&apos;.format(subtitle)</span><br><span class="line">    m = &apos;-message &#123;!r&#125;&apos;.format(message)</span><br><span class="line">    v = &apos;-sound glass&apos;</span><br><span class="line">    os.system(&apos;terminal-notifier &#123;&#125;&apos;.format(&apos; &apos;.join([m, t, s, v])))</span><br><span class="line"></span><br><span class="line">def timer(n):</span><br><span class="line">    print(&quot;初始化&quot;)</span><br><span class="line">    print(&quot;开始监测工单...&quot;)</span><br><span class="line">    jira = JIRA(&apos;你的jira服务器地址&apos;,basic_auth=(&apos;用户名&apos;, &apos;密码&apos;))</span><br><span class="line">    while True:</span><br><span class="line">        tickets = jira.search_issues(&apos;The JQL for search jira ticket，搜索工单的jql&apos;)</span><br><span class="line">        for issue in tickets:</span><br><span class="line">            # jira.assign_issue(issue, &apos;需要assign的用户名&apos;)</span><br><span class="line">            print(&apos;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&apos;.format(issue.key,issue.fields.creator,issue.fields.summary,str(issue.fields.customfield_10208),issue.fields.priority.name))</span><br><span class="line">            notify(title    = &apos;JIRA&apos;,</span><br><span class="line">                   subtitle = issue.key,</span><br><span class="line">                   message  = issue.fields.summary)</span><br><span class="line">            jira.assign_issue(issue, &apos;需要assign的用户名&apos;)</span><br><span class="line">        time.sleep(n)</span><br><span class="line">timer(120)</span><br></pre></td></tr></table></figure><ul><li>使用之前，需要先安装相关的包（主要是jira），使用pip安装即可</li><li>在Mac OS上运行，将会有通知提示，提示音都可以自定义，如果在windows上运行，将<em> The notifier function</em>函数和相关语句删除即可</li><li>timer（120），每隔120S请求一次数据，可以自定义</li><li>可以自定义一个userlist，实现多个assigner自动、随机分配</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;再也不用担心jira工单超时了 🤟&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="jira" scheme="http://wittyfans.com/tags/jira/"/>
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
      <category term="python" scheme="http://wittyfans.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell Encrypting Credentials Generator</title>
    <link href="http://wittyfans.com/coding/PowerShell-Encrypting-Credentials-Generator.html"/>
    <id>http://wittyfans.com/coding/PowerShell-Encrypting-Credentials-Generator.html</id>
    <published>2018-10-05T14:11:51.000Z</published>
    <updated>2018-10-08T15:02:58.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用PowerShell运行，输入密码，生存的String会自动复制到剪贴板，直接去需要的地方粘贴即可。</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Add-Type -AssemblyName System.Windows.Forms</span><br><span class="line"></span><br><span class="line">function Read-MessageBoxDialog</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    param ([string]$Message,</span><br><span class="line"></span><br><span class="line">        [string]$WindowTitle,</span><br><span class="line"></span><br><span class="line">        [System.Windows.Forms.MessageBoxButtons]$Buttons = [System.Windows.Forms.MessageBoxButtons]::OK,</span><br><span class="line"></span><br><span class="line">        [System.Windows.Forms.MessageBoxIcon]$Icon = [System.Windows.Forms.MessageBoxIcon]::None)</span><br><span class="line"></span><br><span class="line">    Add-Type -AssemblyName System.Windows.Forms</span><br><span class="line"></span><br><span class="line">    return [System.Windows.Forms.MessageBox]::Show($Message, $WindowTitle, $Buttons, $Icon)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">write-host &quot;请输入原始密码：↓↓↓↓&quot;</span><br><span class="line">$inputPWD = Read-Host | ConvertTo-SecureString -AsPlainText -Force</span><br><span class="line">$encryptedPWD = $inputPWD | ConvertFrom-SecureString</span><br><span class="line">[Windows.Forms.Clipboard]::SetText($encryptedPWD)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Read-MessageBoxDialog -Message &quot;已拷贝到剪贴板&quot; -WindowTitle &quot;安全密码制作工具&quot; -Buttons OK -Icon Information</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用PowerShell运行，输入密码，生存的String会自动复制到剪贴板，直接去需要的地方粘贴即可。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
      <category term="PowerShell" scheme="http://wittyfans.com/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>Groovy Jira 笔记</title>
    <link href="http://wittyfans.com/coding/Groovy-Jira-%E7%AC%94%E8%AE%B0.html"/>
    <id>http://wittyfans.com/coding/Groovy-Jira-笔记.html</id>
    <published>2018-10-05T13:56:12.000Z</published>
    <updated>2018-10-05T13:59:33.605Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Groovy是一门Java系的脚本语言，在Jira系统中，配合ScriptRunner，可以对Jira的ticket实现非常高级的自动化功能。</p></blockquote><a id="more"></a><p>Groovy 笔记</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>byte</li><li>char</li><li>short</li><li>int</li><li>long</li><li>java.lang.BigInteger</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// primitive types</span><br><span class="line">byte  b = 1</span><br><span class="line">char  c = 2</span><br><span class="line">short s = 3</span><br><span class="line">int   i = 4</span><br><span class="line">long  l = 5</span><br><span class="line"></span><br><span class="line">// infinite precision</span><br><span class="line">BigInteger bi =  6</span><br><span class="line"></span><br><span class="line">//布尔</span><br><span class="line"></span><br><span class="line">def myBooleanVariable = true</span><br><span class="line">boolean untypedBooleanVar = false</span><br></pre></td></tr></table></figure><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def numbers = [1, 2, 3]         </span><br><span class="line"></span><br><span class="line">assert numbers instanceof List  </span><br><span class="line">assert numbers.size() == 3</span><br></pre></td></tr></table></figure><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arrStr = [&apos;Ananas&apos;, &apos;Banana&apos;, &apos;Kiwi&apos;]</span><br><span class="line">def numArr = [1, 2, 3] as int[]      </span><br><span class="line">def matrix3 = new Integer[3][3]</span><br></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def colors = [red: &apos;#FF0000&apos;, green: &apos;#00FF00&apos;, blue: &apos;#0000FF&apos;]   </span><br><span class="line"></span><br><span class="line">assert colors[&apos;red&apos;] == &apos;#FF0000&apos;    </span><br><span class="line">assert colors.green  == &apos;#00FF00&apos;    </span><br><span class="line"></span><br><span class="line">colors[&apos;pink&apos;] = &apos;#FF00FF&apos;           </span><br><span class="line">colors.yellow  = &apos;#FFFF00&apos;           </span><br><span class="line"></span><br><span class="line">assert colors.pink == &apos;#FF00FF&apos;</span><br><span class="line">assert colors[&apos;yellow&apos;] == &apos;#FFFF00&apos;</span><br><span class="line"></span><br><span class="line">assert colors instanceof java.util.LinkedHashMap</span><br></pre></td></tr></table></figure><h1 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">println &quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">def name = &apos;Guillaume&apos; // a plain string</span><br><span class="line">def greeting = &quot;Hello $&#123;name&#125;&quot;</span><br><span class="line"></span><br><span class="line">assert greeting.toString() == &apos;Hello Guillaume&apos;</span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* a standalone multiline comment</span><br><span class="line">   spanning two lines */</span><br></pre></td></tr></table></figure><h1 id="一切都是对象"><a href="#一切都是对象" class="headerlink" title="一切都是对象"></a>一切都是对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def message = 12</span><br><span class="line">println message.class</span><br></pre></td></tr></table></figure><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(i = 0; i &lt; 5; i++)&#123;</span><br><span class="line">  println val</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h1><blockquote><p>范围是一系列的值。例如 “0..4” 表明包含 整数 0、1、2、3、4。Groovy 还支持排除范围，“0..&lt;4” 表示 0、1、2、3。还可以创建字符范围：“a..e” 相当于 a、b、c、d、e。”a..&lt;e”包括小于 e 的所有值.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(i in 0..5)&#123;</span><br><span class="line">  println val</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="设置默认参数"><a href="#设置默认参数" class="headerlink" title="设置默认参数"></a>设置默认参数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def repeat(val, repeat=5)&#123;</span><br><span class="line"> for(i in 0..&lt;repeat)&#123;</span><br><span class="line">  println val</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def range = 0..4</span><br><span class="line">println range.class</span><br></pre></td></tr></table></figure><blockquote><p>每个 Groovy 集合都是 java.util.Collection 或 java.util.Map 的实例。</p></blockquote><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def coll = [&quot;Groovy&quot;, &quot;Java&quot;, &quot;Ruby&quot;]</span><br><span class="line">coll.add(&quot;Python&quot;)</span><br><span class="line">coll &lt;&lt; &quot;Smalltalk&quot;</span><br><span class="line">return coll</span><br></pre></td></tr></table></figure><h1 id="获取Issue"><a href="#获取Issue" class="headerlink" title="获取Issue"></a>获取Issue</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import com.atlassian.jira.issue.Issue</span><br><span class="line">import com.atlassian.jira.issue.ModifiedValue</span><br><span class="line">import com.atlassian.jira.issue.util.DefaultIssueChangeHolder</span><br><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line"></span><br><span class="line">def issueManager = ComponentAccessor.getIssueManager()</span><br><span class="line">def issue = issueManager.getIssueObject(&quot;AM-17&quot;)</span><br></pre></td></tr></table></figure><p>AM-17为issue的key.</p><h1 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.class</span><br></pre></td></tr></table></figure><h1 id="获取issue和customerField"><a href="#获取issue和customerField" class="headerlink" title="获取issue和customerField"></a>获取issue和customerField</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import com.atlassian.jira.issue.Issue</span><br><span class="line">import com.atlassian.jira.issue.ModifiedValue</span><br><span class="line">import com.atlassian.jira.issue.util.DefaultIssueChangeHolder</span><br><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line">def issueManager = ComponentAccessor.getIssueManager()</span><br><span class="line">def issue = issueManager.getIssueObject(&quot;AM-17&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def String myval = &quot;my new text&quot;</span><br><span class="line"></span><br><span class="line">def customFieldManager = ComponentAccessor.getCustomFieldManager()</span><br><span class="line">def textCf2 = customFieldManager.getCustomFieldObjects(issue).find&#123;it.name == &quot;Assigned Group&quot;&#125;</span><br><span class="line">def assignGroupValue = issue.getCustomFieldValue(textCf2)</span><br><span class="line"></span><br><span class="line">return assignGroupValue.class</span><br><span class="line"></span><br><span class="line">// Change the value of customerField</span><br><span class="line">//if (textCf2) &#123;</span><br><span class="line">  //  def changeHolder = new DefaultIssueChangeHolder()</span><br><span class="line">    //textCf2.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(textCf2), myval),changeHolder)</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure><h1 id="获取分类"><a href="#获取分类" class="headerlink" title="获取分类"></a>获取分类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import com.atlassian.jira.issue.*</span><br><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line">import com.atlassian.jira.issue.CustomFieldManager</span><br><span class="line">import java.lang.String</span><br><span class="line"></span><br><span class="line">def category = [:]</span><br><span class="line"></span><br><span class="line">category[&quot;account management&quot;] = [</span><br><span class="line">    &quot;sap ess account-unlock/passwordreset&quot;,</span><br><span class="line">    &quot;fiori account-unlock/passwordreset&quot;,</span><br><span class="line">    &quot;much account-unlock/passwordreset&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">category[&quot;helpdesk cn&quot;] = [</span><br><span class="line">    &quot;windows account-unlock/passwordreset&quot;,</span><br><span class="line">    &quot;homer account-unlock/passwordreset&quot;,</span><br><span class="line">    &quot;wde account-unlock/passwordreset&quot;,</span><br><span class="line">    &quot;other access&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">def getCategory(Map&lt;String,List&gt; category,String type)&#123;</span><br><span class="line">    lowerCaseType = type.toLowerCase()</span><br><span class="line">    for (i in category)&#123;</span><br><span class="line">        for(j in i.value)&#123;</span><br><span class="line">            if (lowerCaseType == j.toString())&#123;</span><br><span class="line">                return i.key</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                return &apos;error category&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ScriptRunner中log信息"><a href="#ScriptRunner中log信息" class="headerlink" title="ScriptRunner中log信息"></a>ScriptRunner中log信息</h1><blockquote><p>See also <a href="https://mraddon.blog/2015/05/27/configure-groovy-scriptrunner-logs/" target="_blank" rel="noopener">ScriptRunner Log intro</a> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.log4j.Category</span><br><span class="line"> </span><br><span class="line">def Category log = Category.getInstance(&quot;com.onresolve.jira.groovy&quot;)</span><br><span class="line">log.setLevel(org.apache.log4j.Level.DEBUG)</span><br><span class="line">log.debug &quot;debug statements&quot;</span><br></pre></td></tr></table></figure><h1 id="自动根据标题确定分类"><a href="#自动根据标题确定分类" class="headerlink" title="自动根据标题确定分类"></a>自动根据标题确定分类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line">import com.atlassian.jira.issue.CustomFieldManager</span><br><span class="line">import com.atlassian.jira.issue.fields.CustomField</span><br><span class="line">import com.atlassian.jira.ComponentManager</span><br><span class="line">import com.atlassian.jira.issue.customfields.manager.OptionsManager</span><br><span class="line">import org.apache.log4j.Category</span><br><span class="line"></span><br><span class="line">// log config</span><br><span class="line">def Category log = Category.getInstance(&quot;com.onresolve.jira.groovy&quot;)</span><br><span class="line">log.setLevel(org.apache.log4j.Level.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def category = [:]</span><br><span class="line">category[&quot;Account Management&quot;] = [</span><br><span class="line">    &quot;SAP ESS Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Fiori Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;MUCH Account-Unlock/PasswordReset&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">category[&quot;Helpdesk CN&quot;] = [</span><br><span class="line">    &quot;Windows Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Homer Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;WDE Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Password Reset - Other Access&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">def getCategory(Map&lt;String,List&gt; category,String type)&#123;</span><br><span class="line">    def upperType = type.toUpperCase()</span><br><span class="line">    for (i in category)&#123;</span><br><span class="line">        for(j in i.value)&#123;</span><br><span class="line">            def catItem = j.toString().toUpperCase()</span><br><span class="line">            if (upperType == catItem)&#123;</span><br><span class="line">                return i.key</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更新CustomerField"><a href="#更新CustomerField" class="headerlink" title="更新CustomerField"></a>更新CustomerField</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line">import com.atlassian.jira.issue.CustomFieldManager</span><br><span class="line">import com.atlassian.jira.issue.util.DefaultIssueChangeHolder</span><br><span class="line">import com.atlassian.jira.issue.ModifiedValue</span><br><span class="line">import com.atlassian.crowd.embedded.api.Group</span><br><span class="line"></span><br><span class="line">//get Issue</span><br><span class="line">def issueManager = ComponentAccessor.getIssueManager()</span><br><span class="line">def am120 = issueManager.getIssueObject(&quot;AM-120&quot;)</span><br><span class="line"></span><br><span class="line">// get CustomerField Manager</span><br><span class="line">def customFieldManager = ComponentAccessor.getCustomFieldManager()</span><br><span class="line"></span><br><span class="line">//get groupManager</span><br><span class="line">def groupManager = ComponentAccessor.getGroupManager()</span><br><span class="line"></span><br><span class="line">//get issue&apos;s group</span><br><span class="line">def textCf2 = customFieldManager.getCustomFieldObjects(am120).find &#123;it.name == &quot;Assigned Group&quot;&#125;</span><br><span class="line"></span><br><span class="line">//create a group object</span><br><span class="line">def hdcn = groupManager.getGroup(&quot;HelpDesk CN&quot;)</span><br><span class="line"></span><br><span class="line">// set group&apos;s value</span><br><span class="line"></span><br><span class="line">if (textCf2) &#123;</span><br><span class="line">    def changeHolder = new DefaultIssueChangeHolder()</span><br><span class="line">    textCf2.updateValue(null, am120, new ModifiedValue(am120.getCustomFieldValue(textCf2), [hdcn]),changeHolder)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设置Components"><a href="#设置Components" class="headerlink" title="设置Components"></a>设置Components</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line">import com.atlassian.jira.issue.CustomFieldManager</span><br><span class="line">import com.atlassian.jira.issue.fields.CustomField</span><br><span class="line">import com.atlassian.jira.ComponentManager</span><br><span class="line">import com.atlassian.jira.issue.util.DefaultIssueChangeHolder</span><br><span class="line">import com.atlassian.jira.issue.ModifiedValue</span><br><span class="line">import com.atlassian.crowd.embedded.api.Group</span><br><span class="line">import com.atlassian.jira.project.Project </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def category = [:]</span><br><span class="line">category[&quot;SAP&quot;] = [</span><br><span class="line">    &quot;SAP ESS Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Fiori Account-Unlock/PasswordReset&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">category[&quot;IT Helpdesk&quot;] = [</span><br><span class="line">    &quot;Windows Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Homer Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;WDE Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Password Reset - Other Access&quot;,</span><br><span class="line">    &quot;MUCH Account-Unlock/PasswordReset&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">def getCategory(Map&lt;String,List&gt; category,String type)&#123;</span><br><span class="line">    def upperType = type.toUpperCase()</span><br><span class="line">    for (i in category)&#123;</span><br><span class="line">        for(j in i.value)&#123;</span><br><span class="line">            def catItem = j.toString().toUpperCase()</span><br><span class="line">            if (upperType == catItem)&#123;</span><br><span class="line">                return i.key</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def issueManager = ComponentAccessor.getIssueManager()</span><br><span class="line">def issue = issueManager.getIssueObject(&quot;AM-122&quot;)</span><br><span class="line">def comCat = getCategory(category,issue.getSummary())</span><br><span class="line">Project project = issue.getProjectObject()</span><br><span class="line">def component = ComponentAccessor.getProjectComponentManager().findByComponentName(project.getId(),comCat.toString())</span><br><span class="line">issue.setComponent([component]);</span><br></pre></td></tr></table></figure><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Groovy是一门Java系的脚本语言，在Jira系统中，配合ScriptRunner，可以对Jira的ticket实现非常高级的自动化功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
      <category term="Jira" scheme="http://wittyfans.com/tags/Jira/"/>
    
      <category term="Groovy" scheme="http://wittyfans.com/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>kafka分布式集群部署</title>
    <link href="http://wittyfans.com/coding/kafka%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.html"/>
    <id>http://wittyfans.com/coding/kafka分布式集群部署.html</id>
    <published>2018-06-08T03:13:19.000Z</published>
    <updated>2018-06-08T03:17:50.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个高吞吐量的消息队列系统，可以达到高效的流处理，借助zookeeper确保了证数据的安全。</p></blockquote><a id="more"></a><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载官网 kafka.2.10-0.8.2.1.tgz 版本</span><br></pre></td></tr></table></figure><h1 id="kafka集群配置"><a href="#kafka集群配置" class="headerlink" title="kafka集群配置"></a>kafka集群配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 传输数据到集群 -&gt; scp -r ***.tgz opt/software/</span><br><span class="line"># 解压 -&gt; /opt/modules</span><br><span class="line"># 配置</span><br><span class="line"></span><br><span class="line">1. Server.propertis文件</span><br><span class="line">-&gt; broker.id -&gt; 1或则2，nod1 -&gt; 1,node2 -&gt; 2</span><br><span class="line">-&gt; port=9092</span><br><span class="line">-&gt; host.name -&gt; userhostname</span><br><span class="line">-&gt; 修改日志路径 -&gt; log.dirs = /tmp/kafka-logs</span><br><span class="line">-&gt; zookeeper.connect=master,node1,node2;</span><br><span class="line">2. 分发到其他机器</span><br><span class="line"></span><br><span class="line">3. 修改其他机器上的server.properties文件</span><br></pre></td></tr></table></figure><h1 id="启动并测试"><a href="#启动并测试" class="headerlink" title="启动并测试"></a>启动并测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. bin/zookeeper-server-start.sh config/zookeeper.properties</span><br><span class="line">2. bin/kafka-server-start.sh config/server.properties</span><br><span class="line">3. 创建 Topic -&gt; &gt; bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br><span class="line">4. 创建生产端和消费端</span><br><span class="line">-&gt; bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br><span class="line">-&gt; bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure><p>创建好了的topic可以在zookeeper的目录下的brokers/topics里面去查看。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li>host.name要改成跟本机对应的hostname,才能在第二、三台机器上启动server</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://kafka.apache.org/quickstart" target="_blank" rel="noopener">Kafka QuickStart</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个高吞吐量的消息队列系统，可以达到高效的流处理，借助zookeeper确保了证数据的安全。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="BigData" scheme="http://wittyfans.com/tags/BigData/"/>
    
      <category term="Kafka" scheme="http://wittyfans.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Windows自动化AutoIT动手玩</title>
    <link href="http://wittyfans.com/coding/Windows%E8%87%AA%E5%8A%A8%E5%8C%96AutoIT%E5%8A%A8%E6%89%8B%E7%8E%A9.html"/>
    <id>http://wittyfans.com/coding/Windows自动化AutoIT动手玩.html</id>
    <published>2018-06-03T08:40:29.000Z</published>
    <updated>2018-06-03T08:44:18.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>AutoID 是一个 Windows 上的一个而自动化软件。可以实现模拟键盘按键、鼠标移动、对窗口的控制，采用类似Basic的语言，很简单，写好之后还可以发布成exe程序，工作中很多机械的步骤终于可以一键搞定了。</p></blockquote><a id="more"></a><h1 id="windows-自动化动手玩"><a href="#windows-自动化动手玩" class="headerlink" title="windows 自动化动手玩"></a>windows 自动化动手玩</h1><p>惯例，来一个HelloWord！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; 这是我的第一个脚本</span><br><span class="line">MsgBox(0, &quot;我的第一个脚本!&quot;, &quot;Hello World!&quot;)</span><br></pre></td></tr></table></figure><p>; 是注释，相当于其他语言中的 //</p><p>这个语句也可以使用函数来调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">; 这是我的第二个脚本 (使用函数)</span><br><span class="line">MsgBox(0, &quot;我的第二个脚本!&quot;, &quot;主脚本: Hello!&quot;)</span><br><span class="line">TestFunc()</span><br><span class="line"></span><br><span class="line">Func TestFunc()</span><br><span class="line">    MsgBox(0, &quot;我的第二个脚本!&quot;, &quot;主脚本: Hello!&quot;)</span><br><span class="line">EndFunc</span><br></pre></td></tr></table></figure><h1 id="识别窗口"><a href="#识别窗口" class="headerlink" title="识别窗口"></a>识别窗口</h1><p>通常我们在窗口上, 能看到的东西大多都是以下控件的一种: 按钮, 列表框, 文本编辑框, 静态文本等. AutoIT可以根据窗口的标题，甚至是内部的文字去识别窗口，进而该应用程序交互，例如，给在记事本中输入一段字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ControlSend(&quot;无标题 - 记事本&quot;, &quot;&quot;,&quot;[CLASS:Edit; INSTANCE:1]&quot;,&quot;This is some text&quot;)</span><br></pre></td></tr></table></figure><p>点击一个窗口中，ID名为254的控件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ControlClick(&quot;我的窗口&quot;, &quot;&quot;,&quot;[ID:254]&quot;)</span><br></pre></td></tr></table></figure><p>为了避免找窗口出错，AutoIT还特地给我们开发了一个识别工具，只要按住Finder Tool中的小球拖到指定窗口上，这个窗口的所有信息都会显示出来，很贴心。</p><p>比如，我首先要运行一个程序(比如记事本)，那么直接输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Run(&quot;notepad.exe&quot;)</span><br></pre></td></tr></table></figure><p>然后等它启动完成，也就是属于active状态(这一步的untitled - Notepad) 可以通过autoIT的工具获得，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WinWaitActive(&quot;Untitled - Notepad&quot;)</span><br></pre></td></tr></table></figure><p>然后直接把 <em>ctr+c</em> 复制过来的东西放进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$text = ClipGet()</span><br><span class="line">Send($text)</span><br></pre></td></tr></table></figure><p>这样就会在记事本文件中输入你复制过来的文字啦，是不是很简单？如果是那些需要点击的操作，你也可以通过自带的工具获取按钮的id，或者是类名与实例的组合，然后通过ControlClick方法去点击，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ControlClick(&quot;A&quot;,&quot;&quot;,&quot;[CLASS:classname; INSTANCE:1]&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>点击窗口名为A中，类名下实例号码为1的区域</p></blockquote><p>然后当我们输入完成之后，就要对数据进行保存啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WinClose(&quot;Untitled - Notepad&quot;) -&gt; 关掉名为 Untitled - Notepad 的窗口</span><br><span class="line">WinWaitActive(&quot;Notepad&quot;, &quot;Do you want to save&quot;) -&gt; 等待确认窗口的出现</span><br><span class="line">Send(&quot;!n&quot;) -&gt; 点击确定</span><br></pre></td></tr></table></figure><p>需要注意的是，如果你要输出数据，不可以使用A(int)+B(string)的方式，AutoIT会自动对数据进行处理，所以如果你是想要把两个数据按文本结合，你需要使用 <em>&amp;</em> 这个join符号。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;AutoID 是一个 Windows 上的一个而自动化软件。可以实现模拟键盘按键、鼠标移动、对窗口的控制，采用类似Basic的语言，很简单，写好之后还可以发布成exe程序，工作中很多机械的步骤终于可以一键搞定了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
      <category term="windows" scheme="http://wittyfans.com/tags/windows/"/>
    
      <category term="自动化" scheme="http://wittyfans.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="效率" scheme="http://wittyfans.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>初探HBase</title>
    <link href="http://wittyfans.com/coding/%E5%88%9D%E6%8E%A2HBase.html"/>
    <id>http://wittyfans.com/coding/初探HBase.html</id>
    <published>2018-06-03T08:38:26.000Z</published>
    <updated>2018-06-03T08:39:39.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>BigData学习历程之HBase部分。</p></blockquote><a id="more"></a><p>初探 HBase</p><h1 id="HBase能做什么？"><a href="#HBase能做什么？" class="headerlink" title="HBase能做什么？"></a>HBase能做什么？</h1><ol><li>海量数据存储，百万、百亿级别的列与行</li><li>数据量非常大的时候，能非常快速的准实时查询</li></ol><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ol><li>交通、比如船只、车辆的GPS信息</li><li>金融、比如取款、交易、信息</li><li>电商、比如浏览日志、物流</li><li>电话、短信、通话记录等</li></ol><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>容量大，HBase面向列，它的列是动态增加的</li><li>多版本，每一个列的数据可以有多个版本</li><li>稀疏性，空列并不占用存储空间，表可以设计的非常稀疏</li><li>扩展性，底层是依赖于HDFS的，也就是说如果存储空间不够，增加DataNOde就可以了</li><li>高可靠性，依赖HDFS的副本机制</li><li>高性能、LSM数据结构和Rowkey有序排列的架构的独特设计，使得它具有非常高的写入性能</li></ul><h1 id="体系与设计模型"><a href="#体系与设计模型" class="headerlink" title="体系与设计模型"></a>体系与设计模型</h1><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><table><thead><tr><th style="text-align:left">列簇1</th><th style="text-align:left"></th><th style="text-align:left">列簇2</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">列1</td><td style="text-align:left">列2</td><td style="text-align:left">列3</td><td style="text-align:left">列4</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">x</td><td style="text-align:left">x</td><td style="text-align:left">x</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">x</td><td style="text-align:left">x</td><td style="text-align:left">x</td></tr></tbody></table><p>在HBase的数据模型中：</p><ol><li>一张表的列簇不会超过五个</li><li>每个列簇中的列书没有限制</li><li>列只有插入数据后存在，是动态增加的</li><li>列在列簇中是有序的</li></ol><h2 id="与关系数据库的对比"><a href="#与关系数据库的对比" class="headerlink" title="与关系数据库的对比"></a>与关系数据库的对比</h2><table><thead><tr><th style="text-align:left">HBase</th><th style="text-align:left">关系数据库</th></tr></thead><tbody><tr><td style="text-align:left">列动态增加</td><td style="text-align:left">不支持</td></tr><tr><td style="text-align:left">数据自动切分</td><td style="text-align:left">不支持</td></tr><tr><td style="text-align:left">高并发读写</td><td style="text-align:left">不支持</td></tr><tr><td style="text-align:left">不支持条件查询</td><td style="text-align:left">支持</td></tr></tbody></table><h1 id="设计模型"><a href="#设计模型" class="headerlink" title="设计模型"></a>设计模型</h1><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><table><thead><tr><th style="text-align:left">列簇1</th><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left">列簇2</th><th style="text-align:left"></th><th></th><th>列簇3</th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:left">col</td><td style="text-align:left">col</td><td style="text-align:left">col</td><td style="text-align:left">col</td><td style="text-align:left">col</td><td>col</td><td>col</td><td>col</td><td>col</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td></tr></tbody></table><p>col在创建的时候，是不需要指定的，只需要指定列簇。</p><h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><p>把安装文件放到 <em>opt/softwares/</em> 下面。<em> chmod U+X</em> 更改权限。</p><p>再解压到 <em>modules</em> 目录下:</p><p><em>tar -zxf filename</em></p><p>检查一下系统空间 <em>df</em></p><p>在HBase中，有一个Region的划分，可以把他理解为关系数据库中的分区，每一个Regiono中有一个regionservier的服务，统一由Master管理，这个模式也是依赖于HDFS+Zookeeper来完成的。</p><table><thead><tr><th style="text-align:left">Node Name</th><th style="text-align:left">Master</th><th style="text-align:left">Zookeeper</th><th style="text-align:left">RegiinServer</th></tr></thead><tbody><tr><td style="text-align:left">Node-A</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td><td style="text-align:left">no</td></tr><tr><td style="text-align:left">Node-B</td><td style="text-align:left">backup</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td></tr><tr><td style="text-align:left">Node-C</td><td style="text-align:left">no</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td></tr></tbody></table><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd hbase</span><br><span class="line">hbase-env.sh</span><br><span class="line">export JAVA_HOME = ***</span><br><span class="line">export HBASE_MANAGES_ZK = false</span><br></pre></td></tr></table></figure><h2 id="hbase配置文件"><a href="#hbase配置文件" class="headerlink" title="hbase配置文件"></a>hbase配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim hbase-site.xml</span><br><span class="line"></span><br><span class="line">hbase.rootdir -&gt; hdfs://master:8020/hbase</span><br><span class="line">hbase.cluster.distributed -&gt; true</span><br><span class="line">hbase.zookeeper.quorum-&gt; master;node1;node2;</span><br></pre></td></tr></table></figure><p>切换成之前的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mv hadoop/ hadoop-ha</span><br><span class="line">mv dist-hadoop hadoop</span><br><span class="line">cd data/</span><br><span class="line">mv tmp/ tmp-ha</span><br><span class="line">mv dist-tmp/ tmp</span><br><span class="line"></span><br><span class="line"># 第二台和第三台同理</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1: hadoop-daemon.sh start datanode</span><br><span class="line">2: hadoop-daemon.sh start datanode</span><br><span class="line">3: hadoop-daemon.sh start datanode</span><br><span class="line"></span><br><span class="line">1: zookeeper*.start</span><br><span class="line">2: zookeeper*.start</span><br><span class="line">3: zookeeper*.start</span><br><span class="line"></span><br><span class="line">1: hbase-daemon.sh start master</span><br><span class="line">1: hbase-daemon.sh start regionserver</span><br><span class="line"></span><br><span class="line">2: hbase-daemon.sh start regionserver</span><br><span class="line">3: hbase-daemon.sh start regionserver</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 第一步要链接（客户端和服务器的）-&gt; hbase shell</span><br><span class="line">2. 查看表 -&gt; list</span><br><span class="line">3. 帮助 -&gt; help </span><br><span class="line">4. 创建表 -&gt; create &apos;test&apos;,&apos;info&apos;</span><br><span class="line">5. 加入数据 :</span><br><span class="line">-&gt; </span><br><span class="line">put &apos;test&apos;,&apos;001&apos;,&apos;info:username&apos;,&apos;wittyfans&apos;</span><br><span class="line">scan &apos;test&apos;</span><br><span class="line">put &apos;test&apos;,&apos;0001&apos;,&apos;info:age&apos;,&apos;30&apos;</span><br><span class="line">put &apos;test&apos;,&apos;0001&apos;,&apos;info:sex&apos;,&apos;male&apos;</span><br><span class="line">6. 禁用 -&gt; disable &apos;test&apos;</span><br><span class="line">7. 删除 -&gt; drop &apos;test&apos; (禁用后才能删除)</span><br></pre></td></tr></table></figure><h2 id="Master-Backup配置"><a href="#Master-Backup配置" class="headerlink" title="Master-Backup配置"></a>Master-Backup配置</h2><p>这个Master-Backup，其实就是相当于HA的实现，实现一个故障备份机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 创建配置文件 -&gt; touch backup-masters</span><br><span class="line">2. 编辑 -&gt; vi backup-masters</span><br><span class="line"># 把二号机器作为备用</span><br><span class="line">node2</span><br><span class="line"></span><br><span class="line"># 分发到别的机器上去</span><br><span class="line">3. 启动测试 -&gt; start-hbase.sh</span><br></pre></td></tr></table></figure><p>应该可以看到两个master，一个是standby一个是active.</p><h1 id="基于业务创建表结构"><a href="#基于业务创建表结构" class="headerlink" title="基于业务创建表结构"></a>基于业务创建表结构</h1><h2 id="下载元数据"><a href="#下载元数据" class="headerlink" title="下载元数据"></a>下载元数据</h2><ul><li><a href="http://www.sogou.com/labs/resource/q.php" target="_blank" rel="noopener">搜狗实验室-用户查询日志</a></li></ul><p>根据元数据创建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br><span class="line">create &apos;weblogs&apos;,&apos;info&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;BigData学习历程之HBase部分。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="BigData" scheme="http://wittyfans.com/tags/BigData/"/>
    
      <category term="HBase" scheme="http://wittyfans.com/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop2.x HA架构学习与配置</title>
    <link href="http://wittyfans.com/coding/Hadoop2-x-HA%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E9%85%8D%E7%BD%AE.html"/>
    <id>http://wittyfans.com/coding/Hadoop2-x-HA架构学习与配置.html</id>
    <published>2018-05-29T14:57:17.000Z</published>
    <updated>2018-05-29T14:58:13.529Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HA，即一套宕机解决方案，用来实现分布式系统中的自动故障转移。</p></blockquote><a id="more"></a><h1 id="HA是什么？"><a href="#HA是什么？" class="headerlink" title="HA是什么？"></a>HA是什么？</h1><blockquote><p>我们说DataNode存储数据, NameNode是目录，而yarn中,ResourceManager, 相当于是任务的总指挥，项目管理，那么这个HDFS中的NameNode和Yarn中的ResourceManager其实是非常重要的，如果一台挂了，那么整个集群都会没法提供服务，HA就是为这种故障提供一套解决方案。</p></blockquote><h1 id="HA原理"><a href="#HA原理" class="headerlink" title="HA原理"></a>HA原理</h1><p>在NameNode的目录更新的时候，会在本地的edits和fsImage中保存更新记录，所以我们可以设置多个NameNode，然后设置一个中间节点去保存这个edits和fsImage文件，这样每个NameNode有更新，这个中间节点就会记录，确保一台NameNode宕机的时候能及时的把数据转移到其他Node上去。</p><p>这个中间节点就叫做JournalNode，它也有副本，即多份Namenode的日志。</p><h1 id="HDFS-HA配置"><a href="#HDFS-HA配置" class="headerlink" title="HDFS HA配置"></a>HDFS HA配置</h1><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>先看一下之前的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NameNode</span><br><span class="line">DataNode1 DataNode2 DataNode3</span><br></pre></td></tr></table></figure><p>规划了HA的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NameNode  NameNode</span><br><span class="line">DataNode1 DataNode2 DataNode3</span><br><span class="line">Journalnode Journalnode Journalnode</span><br></pre></td></tr></table></figure><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>备份原来的配置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -r hadoop/ dist-hadoop</span><br><span class="line">mv tmp/ dist-tmp</span><br></pre></td></tr></table></figure><p>再在原来的目录中重新创建tmp文件夹。</p><h2 id="配置hdfs-site-xml"><a href="#配置hdfs-site-xml" class="headerlink" title="配置hdfs-site.xml"></a>配置hdfs-site.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. dfs.nameservice -&gt; 取个名字</span><br><span class="line">2. dfs.ha.namenodes.上面的名字 -&gt;nn1,nn2</span><br><span class="line">3. rpc.address.ns.nn1 -&gt; hostname:8020</span><br><span class="line">4. rpc.address.ns.nn2 -&gt; hostname:8020</span><br><span class="line">5. http-address.ns.nn1 -&gt; hostname:50070</span><br><span class="line">6. http-address.ns.nn2 -&gt; hostname:50070</span><br><span class="line">7. Shared.edits.dir -&gt; qjournal://master:8485;node1:8485;node2:8485;</span><br><span class="line">8. dfs.journalnode.edits.dir -&gt; /opt/modules/hadoop/data/jn</span><br><span class="line">9. failover.proxy.provider.mycluster -&gt; : 设置成默认值即可</span><br><span class="line">10. Fecing.methods -&gt; sshfence : 隔离机制</span><br><span class="line">11. Private-key-files -&gt; hadoop : 用户名</span><br></pre></td></tr></table></figure><h2 id="配置core-site-xml"><a href="#配置core-site-xml" class="headerlink" title="配置core-site.xml"></a>配置core-site.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. fs.defaultFS -&gt; hdfs://ns</span><br></pre></td></tr></table></figure><h2 id="配置其他机器"><a href="#配置其他机器" class="headerlink" title="配置其他机器"></a>配置其他机器</h2><p>目录与配置都与第一台一样。</p><h1 id="HDFS中HA启动与测试"><a href="#HDFS中HA启动与测试" class="headerlink" title="HDFS中HA启动与测试"></a>HDFS中HA启动与测试</h1><h2 id="启动HA"><a href="#启动HA" class="headerlink" title="启动HA"></a>启动HA</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 启动1,2,3机器 -&gt; sbin/hadoop-daemon.sh start journalnode</span><br><span class="line">2. 格式化 -&gt; bxn/hdfs namenode -format</span><br><span class="line">3. 重启NameNode</span><br><span class="line">4. 在nn2上，同步nn1的原数据信息 -&gt; bin/hdfs namenode -bootstrpStandby</span><br><span class="line">5. 启动nn2</span><br><span class="line">6. 将nn1的状态改为active -&gt; bin/hdfs haadmin -transitionToActive nn1</span><br><span class="line">7. 启动测试 -&gt;</span><br></pre></td></tr></table></figure><h2 id="测试人工故障转移"><a href="#测试人工故障转移" class="headerlink" title="测试人工故障转移"></a>测试人工故障转移</h2><p>测试的原理是，先上传一个文件到DataNode，然后这个时候把NN1干掉，再去取数据，观察其是否会自动切换NameNode.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 创建目录 -&gt; bin/hdfs dfs -mkdir -p /path/</span><br><span class="line">2. 上传目录 -&gt; bin/hdfs dfs -put /path/</span><br><span class="line">3. 尝试读取文件 -&gt; hdfs dfs -text /user/kfk/data/filename</span><br><span class="line">4. 干掉nn1观察 -&gt; jps:21319 -&gt; kill -8 21317</span><br><span class="line">5. Nn2改成active -&gt; hdfs haadmin -transitionToActive nn2</span><br><span class="line">--forceactive</span><br><span class="line">6. 再从nn1尝试读取文件观察是否成功 -&gt; hdfs dfs -text /user/kfk/data/filename</span><br></pre></td></tr></table></figure><p>以上的切换的过程，是人工手动切换的方式，但如果借助Zookeeper，就可以实现自动故障转移了。</p><h2 id="自动故障转移"><a href="#自动故障转移" class="headerlink" title="自动故障转移"></a>自动故障转移</h2><p>首先需要配置hdfs-site文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. dfs.ha.automic-failover.enabled.youmaster -&gt; true</span><br><span class="line">2. ha.zookeeper.quorum -&gt; master:2181,node1:2181,node:2181</span><br></pre></td></tr></table></figure><p>停掉所有服务，然后启动集群的zookeeper.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. zkserver.sh start</span><br><span class="line">2. 初始化HA再Zookeeper中状态bin/hdfs zkfc -formatZK</span><br><span class="line">3. start-dfs.sh</span><br><span class="line">4. 各个机器上启动 -&gt; Hadooop-daemon.sh start zkfc</span><br></pre></td></tr></table></figure><p>配置完成之后，启动集群后，如果有多个nanonode，系统会自动帮我们选一个active。</p><p>如果ZKFC没有启动起来，可以去log里面找 <em>zkfc-bigdata-pro02.master.logs</em> 日志。</p><p>配置完成之后，HDFS中的HA分布如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">namenode    namenode</span><br><span class="line">datanode    datanode    datanode</span><br><span class="line">journalnode journalnode journalnode</span><br><span class="line">zkfc        zkfc</span><br></pre></td></tr></table></figure><h1 id="Yarn中HA"><a href="#Yarn中HA" class="headerlink" title="Yarn中HA"></a>Yarn中HA</h1><h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>对于Yarn来说，ResourceManager是最重要的，所以需要多台ResourceManager，实现一台RM宕机后，可以自动切换到另一台RM.</p><p>同样，Yarn中实现HA，也是借助于Zookeeper。</p><p>先来看一下规划:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RM RM</span><br><span class="line">NM NM NM</span><br></pre></td></tr></table></figure><h2 id="Yarn-site配置"><a href="#Yarn-site配置" class="headerlink" title="Yarn-site配置"></a>Yarn-site配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 删除yarn.resourcemanager.hostname项，因为多台rm之后就不需要再指定rm了</span><br><span class="line">2. yarn.resourcemanager.ha.enabled -&gt; true</span><br><span class="line">3. cluster-id -&gt; rs</span><br><span class="line">4. ha.rm-ids -&gt; rm1,rm2</span><br><span class="line">5. hostname.rm1 -&gt; yourhostname</span><br><span class="line">6. hostname.rm2 -&gt; yourhostname</span><br><span class="line">7. zk.address -&gt;master:2181;node1:2181;node2:2181</span><br><span class="line">8. recovery.enabled -&gt; true</span><br><span class="line">9. 配置数据恢复为zookeeper: *.store.class -&gt; default_config</span><br></pre></td></tr></table></figure><p>按照这个顺序配置，再分发到其他的节点，然后就可以测试了。</p><h2 id="Yarn-HA-启动与测试"><a href="#Yarn-HA-启动与测试" class="headerlink" title="Yarn HA 启动与测试"></a>Yarn HA 启动与测试</h2><ol><li>启动RM两个</li><li>启动NM三个</li><li>测试 <em>MapReduce WordCount</em> 程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. yarn-daemon.sh start resourcemanager (in nn1 and nn2)</span><br><span class="line">2. yarn-daemon.sh start nodemanager(in master nd1 nd2)</span><br></pre></td></tr></table></figure><p>测试 <em>MapReduce</em> 就不赘述啦，至此 <em>HA</em> 在 <em>Hadoop</em> 中的配置结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HA，即一套宕机解决方案，用来实现分布式系统中的自动故障转移。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="hadoop" scheme="http://wittyfans.com/tags/hadoop/"/>
    
      <category term="bigdata" scheme="http://wittyfans.com/tags/bigdata/"/>
    
      <category term="HA" scheme="http://wittyfans.com/tags/HA/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell批量改密码</title>
    <link href="http://wittyfans.com/coding/PowerShell%E6%89%B9%E9%87%8F%E6%94%B9%E5%AF%86%E7%A0%81.html"/>
    <id>http://wittyfans.com/coding/PowerShell批量改密码.html</id>
    <published>2018-05-28T15:05:49.000Z</published>
    <updated>2018-05-28T15:11:57.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近接了个活，公司有1200多个人的域账号密码需要更改，遂自己写了个批量的脚本实现，效率美滋滋。</p></blockquote><a id="more"></a><p>首先是要去拿到用户的信息，然后改一个随机的密码，再捞出用户的手机号码，把密码发送出去。</p><p>用户的账号我已经有了，那就把他们放到文本文件里面，直接就可以把里面的信息取出来，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users = Get-Content $userListPath</span><br></pre></td></tr></table></figure><p>但发现每次写死路径很不方便，改来改去的，那就直接调用系统选择文件对话框嘛，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Add-Type -AssemblyName System.Web</span><br><span class="line"></span><br><span class="line">Function Get-FileName($initialDirectory)</span><br><span class="line">&#123;</span><br><span class="line">    [System.Reflection.Assembly]::LoadWithPartialName(&quot;System.windows.forms&quot;) | Out-Null</span><br><span class="line">    </span><br><span class="line">    $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog</span><br><span class="line">    $OpenFileDialog.initialDirectory = $initialDirectory</span><br><span class="line">    $OpenFileDialog.filter = &quot;TXT (*.txt)| *.txt&quot;</span><br><span class="line">    $OpenFileDialog.ShowDialog() | Out-Null</span><br><span class="line">   return $OpenFileDialog.FileName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这个函数，调用一次就会出现选择文件对话框。通过$OpenFileDialog.filter来控制，可以自定义要过滤的文件类型，选择完了之后，默认会输出成功与失败的提示。我不想看到这个提示，就直接在后面加个管道out-null了，选择好文件，该函数就会返回该文件的路径，拿到这个路径，就可以用get-content拿到其中的名字了。</p><p>拿到名字得先处理一下，因为在域里面名字中间有空格容易出错，得先把它们的空格替换成.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$UserName = $rawUserName -replace &quot; &quot;,&quot;.&quot;</span><br></pre></td></tr></table></figure><p>拿到名字了，继续捞其他信息, 首先是名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$aduser = get-aduser -server yourdomain.com $UserName</span><br></pre></td></tr></table></figure><p>然后是手机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$aduserPhone = (Get-ADUser -Server server.com $UserName -Properties mobile | select mobile).mobile</span><br></pre></td></tr></table></figure><p>接下先创建凭证，这样才能改密码，因为脚本还要给同事用嘛，把密码直接写进去还是不太好，所以得加密。</p><p>我写了个小脚本，把输入密码进去，就会把生成好的加密字符串复制到剪贴板，很方便，下面是代码，复制保存为ps1后缀的文件就可以用啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Add-Type -AssemblyName System.Windows.Forms</span><br><span class="line"></span><br><span class="line">function Read-MessageBoxDialog</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    param ([string]$Message,</span><br><span class="line"></span><br><span class="line">        [string]$WindowTitle,</span><br><span class="line"></span><br><span class="line">        [System.Windows.Forms.MessageBoxButtons]$Buttons = [System.Windows.Forms.MessageBoxButtons]::OK,</span><br><span class="line"></span><br><span class="line">        [System.Windows.Forms.MessageBoxIcon]$Icon = [System.Windows.Forms.MessageBoxIcon]::None)</span><br><span class="line"></span><br><span class="line">    Add-Type -AssemblyName System.Windows.Forms</span><br><span class="line"></span><br><span class="line">    return [System.Windows.Forms.MessageBox]::Show($Message, $WindowTitle, $Buttons, $Icon)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">write-host &quot;请输入原始密码：↓↓↓↓&quot;</span><br><span class="line">$inputPWD = Read-Host | ConvertTo-SecureString -AsPlainText -Force</span><br><span class="line">$encryptedPWD = $inputPWD | ConvertFrom-SecureString</span><br><span class="line">[Windows.Forms.Clipboard]::SetText($encryptedPWD)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Read-MessageBoxDialog -Message &quot;已拷贝到剪贴板&quot; -WindowTitle &quot;安全密码制作工具&quot; -Buttons OK -Icon Information</span><br></pre></td></tr></table></figure><p>拿到密码之后，就可以制作自己的凭证了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$User = &quot;yourAccount&quot;</span><br><span class="line">$Pwd = &quot;加密密码&quot; | ConvertTo-SecureString</span><br><span class="line">$Credential = New-Object -TypeName &quot;System.Management.Automation.PSCredential&quot; -ArgumentList $User, $Pwd</span><br></pre></td></tr></table></figure><p>需要注意的是，本机制作的凭证，只可以在自己的机器上用，如果要在别的机器用，需要解锁，这个有点复杂，挖个坑以后再研究。</p><p>接下来就可以改密码了，我们先把随机密码准备好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$PasswordLength = 16</span><br><span class="line">$SpecialCharCount = 8</span><br><span class="line">$Password =[System.Web.Security.Membership]::GeneratePassword($PasswordLength, $SpecialCharCount)</span><br></pre></td></tr></table></figure><p>直接一个for循环遍历所有名单，更改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Get-ADUser -Server wittyfans.com -Identity $UserName | Set-ADAccountPassword -NewPassword $SecPaswd -Server wittyfans.com -Credential $Credential </span><br><span class="line">        </span><br><span class="line">Set-ADUser -Identity $UserName -ChangePasswordAtLogon $false -Server wittyfans.com -Credential $Credential |Unlock-ADAccount -Verbose -Server wittyfans.com -Credential $Credential</span><br></pre></td></tr></table></figure><p>这个语句会直接给用户设一个新密码，并解锁他的账户。需要把其中的wittyfans.com变成你们自己的配置，其中有一个步骤需要注意的是，如果你去拿用户的信息，但这个名字错了，拿不到的话，会直接报错造成程序中断，这个时候得用try-catch语句处理，然后设置一个标记，通过这个标记去判断域中是否有这个用户。</p><p>最后就是输出数据啦，直接把所有数据保存起来，用out-file语句就可以保存成文本文件了，加上-Append，这样才不会把数据重写哦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Out-File -FilePath .\Desktop\ResetedPassWord.txt -Append</span><br></pre></td></tr></table></figure><p>完工！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近接了个活，公司有1200多个人的域账号密码需要更改，遂自己写了个批量的脚本实现，效率美滋滋。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
      <category term="PowerShell" scheme="http://wittyfans.com/tags/PowerShell/"/>
    
      <category term="AD" scheme="http://wittyfans.com/tags/AD/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper安装、配置、启动</title>
    <link href="http://wittyfans.com/coding/Zookeeper%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E5%90%AF%E5%8A%A8.html"/>
    <id>http://wittyfans.com/coding/Zookeeper安装、配置、启动.html</id>
    <published>2018-05-28T14:18:59.000Z</published>
    <updated>2018-05-28T14:20:34.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>An effort to develop and maintain an open-source server which enables highly reliable distributed coordination.</p></blockquote><a id="more"></a><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>要找特定的版本，可以去这个两个链接 </p><ul><li>官方归档<a href="http://archive.apache.org/dist/" target="_blank" rel="noopener"> 🔗</a> </li><li>CDN <a href="http://archive.cloudera.com/cdh5/cdh/5/" target="_blank" rel="noopener">🔗</a></li></ul><p>CDN版本更多的考虑了兼容性的问题，建议尽可能用CDN的版本，下载后，scp到opt/softwares/,然后解压，如果发现显示是红色的，可以使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chmod u+x filename</span><br></pre></td></tr></table></figure><p>来使它具备可执行的权限，然后解压 <em>tar -zxf zookeeper -C /path/</em> 到modules文件夹中去。</p><p>然后进入，主要有几个目录，bin, sbin, 等，跟hadoop是差不多的。</p><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><p>配置一般都是在conf目录下面，里面有三个文件:</p><ul><li>configuration.xsl</li><li>log4j.properties (日志)</li><li>zoo_sample.cfg (主要需要配置的)</li></ul><p>首先把zoo_sample.cfg改名成zoo.cfg, 进去配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime #心跳时间</span><br><span class="line">initLimit #初始化时间最久能忍多久，心跳时间为单位</span><br><span class="line">syneLimit #平时发消息延迟能忍多久 </span><br><span class="line">dataDir #保存数据的目录</span><br><span class="line">clientPort #客户端链接zookeeper服务器的端口，zookeeper会监听这个端口接受客户端请求</span><br><span class="line"># 把三个节点的信息添加进来：</span><br><span class="line">server.1=host1name:2888:3888</span><br><span class="line">server.2=host2name:2888:3888</span><br><span class="line">server.3=host3name:2888:3888</span><br></pre></td></tr></table></figure><p>创建一个文件夹，路径为 <em>opt/modules/zookeeper/zkData</em>，然后在zkData文件夹中，创建一个名为 <em>myid</em> 的文件，并在其中标示为对应的id，master为1，然后分发到其他机器，再修改相应的 <em>myid</em> 文件，node1为2，node2为3.</p><p>这样，zookeeper就配置完成了。</p><h1 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">zkserver.sh start</span><br><span class="line"></span><br><span class="line"># 链接（需要把全部节点启动方可链接成功）</span><br><span class="line">zkcli.sh</span><br></pre></td></tr></table></figure><p>启动完成之后，集群会自动选举出一位老大作为tl，如果只有1台机器，会连接失败，因为集群中，可损坏的机器为N，它要满足一个算法： <em>2N+1</em> ，也就是说最少要有三台机器，如果只有一台启动，那集群会以为其他两台机器损坏了。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>链接成功后，就进入到了zookeeper终端界面，可以创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 创建 Create /foldername</span><br><span class="line"># 查看 get /foldername </span><br><span class="line"># 查看tl和flow zkserver.sh status</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>官方归档<a href="http://archive.apache.org/dist/" target="_blank" rel="noopener"> 🔗</a> </li><li>CDN <a href="http://archive.cloudera.com/cdh5/cdh/5/" target="_blank" rel="noopener">🔗</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;An effort to develop and maintain an open-source server which enables highly reliable distributed coordination.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="bigdata" scheme="http://wittyfans.com/tags/bigdata/"/>
    
      <category term="zookeeper" scheme="http://wittyfans.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>运行Hadoop WordCount 出错</title>
    <link href="http://wittyfans.com/coding/%E8%BF%90%E8%A1%8CHadoop-WordCount-%E5%87%BA%E9%94%99.html"/>
    <id>http://wittyfans.com/coding/运行Hadoop-WordCount-出错.html</id>
    <published>2018-05-22T04:48:36.000Z</published>
    <updated>2018-05-22T04:52:17.176Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一个WordCount程序竟然跑失败了，:(。</p></blockquote><a id="more"></a><p>配置好系统环境之后，准备开始跑第一个WordCount任务，jps后,各机器的输出如下：</p><p>Master:</p><ul><li>NameNode</li><li>DataNode</li><li>ResourceManager</li><li>NodeManager</li><li>jobHistoryServer</li><li>jps</li></ul><p>Node1:</p><ul><li>DataNode</li><li>NodeManager</li></ul><p>Node2:</p><ul><li>DataNode</li><li>NodeManager</li></ul><p>服务全都正常，于是开始执行WordCount,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/yarn jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.0.0.jar wordcount /user/master/data/wc.input /user/master/data/result</span><br></pre></td></tr></table></figure><p>失败，提示: <em>Exception from container launch, pre launch.err</em>,去logs里面看，也没什么异常。</p><p>Google了一圈，没找到什么资料，去yarn的追踪界面，发现一个异常，找不到或无法加载主类，<em>**</em>。</p><p>于是怀疑是路径的问题，马上cd到bin目录下，</p><p>执行Hadoop Classpath，获取一个输出，并将该输出内容设置为Yarn-siet.xml 中Yarn.application.classpath的值。</p><p>查了一下资料，发现，</p><p><em>这个配置为map、reduce task指定其所需要的hadoop包存在与本地的什么位置，以便在task启动时，能根据该配置找到所需要的hadoop相关class。 如果配置错误，就会class not found（就是你的错误中的那个中文：错误: 找不到或无法加载主类</em></p><p>成功解决 :)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一个WordCount程序竟然跑失败了，:(。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="hadoop" scheme="http://wittyfans.com/tags/hadoop/"/>
    
      <category term="bigdata" scheme="http://wittyfans.com/tags/bigdata/"/>
    
      <category term="yarn" scheme="http://wittyfans.com/tags/yarn/"/>
    
      <category term="wordcount" scheme="http://wittyfans.com/tags/wordcount/"/>
    
  </entry>
  
</feed>
