<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wittyfans</title>
  
  <subtitle>学则不固,知则不惑</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wittyfans.com/"/>
  <updated>2019-01-14T15:27:30.353Z</updated>
  <id>http://wittyfans.com/</id>
  
  <author>
    <name>wittyfans</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Pandas分析美国交警开放的搜查数据</title>
    <link href="http://wittyfans.com/coding/%E5%88%A9%E7%94%A8Pandas%E5%88%86%E6%9E%90%E7%BE%8E%E5%9B%BD%E4%BA%A4%E8%AD%A6%E5%BC%80%E6%94%BE%E7%9A%84%E6%90%9C%E6%9F%A5%E6%95%B0%E6%8D%AE.html"/>
    <id>http://wittyfans.com/coding/利用Pandas分析美国交警开放的搜查数据.html</id>
    <published>2019-01-12T06:23:30.000Z</published>
    <updated>2019-01-14T15:27:30.353Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一次偶然的机会看到<a href="">王树义</a>老师的推荐YouTube上的这个pandas视频教程，于是花了点时间学习了一下，也就有了这篇笔记，因为课程是英文的，也没有提供<br>中文字幕，所以我的笔记也就懒得再用中文写了。</p></blockquote><a id="more"></a><h1 id="利用Pandas分析美国交警开放的搜查数据"><a href="#利用Pandas分析美国交警开放的搜查数据" class="headerlink" title="利用Pandas分析美国交警开放的搜查数据"></a>利用Pandas分析美国交警开放的搜查数据</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>The tutorial will not cover pandas basics. If you are new to pandas or just need a refresher, I recommend watching some videos from my <a href="http://www.dataschool.io/easier-data-analysis-with-pandas/" target="_blank" rel="noopener">free pandas course</a>. Alternatively, you can review all of the code from my pandas course in this Jupyter notebook.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/justmarkham/pycon-2018-tutorial" target="_blank" rel="noopener">Using pandas for Better (and Worse) Data Science, Git主页</a></li><li><a href="https://www.youtube.com/watch?v=hl-TGI4550M&amp;list=PL5-da3qGB5IBITZj_dYSFqnd_15JgqwA6&amp;index=1" target="_blank" rel="noopener">Pandas best practices, Youtube 链接</a></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="DownLoad-the-data"><a href="#DownLoad-the-data" class="headerlink" title="DownLoad the data"></a>DownLoad the data</h2><h3 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h3><ul><li><a href="https://openpolicing.stanford.edu/data/" target="_blank" rel="noopener">Link</a></li><li><a href="https://github.com/5harad/openpolicing/blob/master/DATA-README.md" target="_blank" rel="noopener">How to use the date</a></li></ul><h3 id="教程使用的数据"><a href="#教程使用的数据" class="headerlink" title="教程使用的数据"></a>教程使用的数据</h3><ul><li><a href="https://github.com/justmarkham/pycon-2018-tutorial/blob/master/police.csv" target="_blank" rel="noopener">police</a></li></ul><h2 id="About-the-data"><a href="#About-the-data" class="headerlink" title="About the data"></a>About the data</h2><ul><li>For each state in the dataset, They provide data in three formats(We use csv format)</li><li>If a column cannot be computed using the data a state has provided, it is set to NA.</li><li>For several fields (e.g., driver_race) we include a “raw” column which records the original data values from which we infer standardized values</li></ul><p>We include the raw columns because our data processing pipeline is extensive, requiring judgment calls and subjective decisions.</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>Column name</td><td>Column meaning</td><td>Example value</td></tr><tr><td>id</td><td>The unique ID we assign to each stop. Contains the state and year.</td><td>VT-2011-00012</td></tr><tr><td>state（州）</td><td>The two-letter code for the state in which the stop occurred.</td><td>VT</td></tr><tr><td>stop_date（被搜查的日期）</td><td>The date of the stop, in YYYY-MM-DD format. Some states do not provide the exact stop date: for example, they only provide the year or quarter in which the stop occurred. For these states, stop_date is set to the date at the beginning of the period: for example, January 1 if only year is provided.</td><td>2011-11-27</td></tr><tr><td>stop_time(被警察搜查时的时间)</td><td>The 24-hour time of the stop, in HH:MM format.</td><td>20:15</td></tr><tr><td>location_raw</td><td>The original data value from which we compute the county (or comparably granular location) in which the stop occurred. Not in a standardized format across states.</td><td>Winooski</td></tr><tr><td>county_name</td><td>The standardized name of the county in which the stop occurred.</td><td>Chittenden County</td></tr><tr><td>county_fips</td><td>The standardized 5-digit FIPS code in which the stop occurred.</td><td>50007</td></tr><tr><td>district</td><td>In several states (e.g., Illinois) the stop county cannot be inferred, but a comparably granular location can. This comparably granular location is stored in the district column. Most states do not have this column.</td><td>ILLINOIS STATE POLICE 01</td></tr><tr><td>fine_grained_location</td><td>Any higher-resolution data about where the stop occurred: e.g., milepost or address. Not standardized across states.</td><td>90400 I 89 N; EXIT 15 MM90/40</td></tr><tr><td>police_department</td><td>The police department or agency that made the stop. Not in a standard format across states.</td><td>WILLISTON VSP</td></tr><tr><td>driver_gender</td><td>The driver’s gender, as recorded by the trooper. M, F, or NA.</td><td>M</td></tr><tr><td>driver_age_raw</td><td>The original data value from which we compute the driver’s age when they were stopped. May be age, birth year, or birth date. Not in a standard format across states.</td><td>1988</td></tr><tr><td>driver_age</td><td>The driver’s age when they were stopped. Set to NA if less than 15 or greater than or equal to 100.</td><td>23</td></tr><tr><td>driver_race_raw</td><td>The original data value from which the driver’s standardized race is computed. Not in a standard format across states.</td><td>African American</td></tr><tr><td>driver_race</td><td>The standardized driver race. Possible values are White, Black, Hispanic, Asian, Other, and NA, with NA denoting values which are unknown. Asian refers to Asian, Pacific Islander, and Indian. Native Americans/American Indians are included in the “other” category. Anyone with Hispanic ethnicity is classified as Hispanic, regardless of their recorded race.</td><td>Black</td></tr><tr><td>violation_raw</td><td>The violation committed by the driver, in the language of the original data. Not in a standard format across states. Some stops have multiple violations.</td><td>Speeding (10–19 MPH Over Prima Facie Limit *)</td></tr><tr><td>violation</td><td>The violation committed by the driver, standardized into categories which are consistent across states.</td><td>Speeding</td></tr><tr><td>search_conducted（是否被搜查）</td><td>A TRUE/FALSE value indicating whether a search was performed.</td><td>TRUE</td></tr><tr><td>search_type_raw</td><td>The justification for the search, in the language of the original data. NA if no search was performed. Not in a standard format across states. Some states have multiple justifications for a search.</td><td>CONSENT SEARCH CONDUCTED</td></tr><tr><td>search_type</td><td>The normalized justification for the search. Where possible, this is standardized into categories which are consistent across states. For example, if something is clearly a consent search, search_type is referred to as “Consent”.</td><td>Consent</td></tr><tr><td>contraband_found</td><td>A TRUE/FALSE value indicating whether a search was performed and contraband was found. FALSE if no search was performed.</td><td>TRUE</td></tr><tr><td>stop_outcome</td><td>The outcome of the stop. Many states have idiosyncratic outcomes — for example, “CHP 215” in California — so this column is not standardized across states. “Citation” and “Warning” are the values which occur most commonly across states. If the stop has multiple outcomes, the most severe outcome is used. For example, if a stop resulted in a citation and a warning, stop_outcome would be “Citation”.</td><td>Citation</td></tr><tr><td>is_arrested</td><td>A TRUE/FALSE value indicating whether an arrest was made.</td><td>TRUE</td></tr></tbody></table><ul><li>FIPS：<a href="https://zh.wikipedia.org/wiki/%E8%81%AF%E9%82%A6%E8%B3%87%E6%96%99%E8%99%95%E7%90%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener">联邦信息处理标准（英语：Federal Information Processing Standards，缩写FIPS）</a></li><li>VT: <a href="https://www.google.com/search?q=vt%E6%98%AF%E5%93%AA%E4%B8%AA%E5%B7%9E&amp;rlz=1C5CHFA_enUS783US785&amp;oq=VT&amp;aqs=chrome.0.69i59j69i57j0l4.1878j0j1&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank" rel="noopener">美国的一个州</a></li><li>M,F: 记录性别，M男，F女</li><li>race: 可不是速度或者竞赛，而是种族,参考分类如下，与数据里的可能不一样，<a href="https://www.zhihu.com/question/21007176" target="_blank" rel="noopener">了解更多</a><ol><li>American Indian or Alaska Native</li><li>Asian</li><li>Black or African American</li><li>Native Hawaiian or Other Pacific Islander</li><li>White</li></ol></li><li>violation：违章</li><li>NAN means the value is missing or irrelevant for that data row.</li></ul><h1 id="Know-the-data"><a href="#Know-the-data" class="headerlink" title="Know the data"></a>Know the data</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv() # 读取csv文件</span><br><span class="line">pd.head() # 查看表头</span><br><span class="line">pd.tail() # 查看表尾</span><br><span class="line">pd.dtypes # 查看列的数据类型</span><br><span class="line">pd.isnull().sum() # 查看null值数量</span><br></pre></td></tr></table></figure><p>Import the data and check the dtypes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ri = pd.read_csv(&quot;/Users/wittyfans/Desktop/pycon-2018-tutorial/police.csv&quot;)</span><br><span class="line">ri.dtypes</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">stop_date                     object</span><br><span class="line">stop_time                     object</span><br><span class="line">driver_gender                 object</span><br><span class="line">driver_age_raw               float64</span><br><span class="line">driver_age                   float64</span><br><span class="line">driver_race                   object</span><br><span class="line">violation_raw                 object</span><br><span class="line">violation                     object</span><br><span class="line">search_conducted                bool</span><br><span class="line">search_type                   object</span><br><span class="line">stop_outcome                  object</span><br><span class="line">is_arrested                   object</span><br><span class="line">stop_duration                 object</span><br><span class="line">drugs_related_stop              bool</span><br><span class="line">frisk                         object</span><br><span class="line">stop_datetime         datetime64[ns]</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><blockquote><p>可以看到有多少列，以及这列的数据类型，对数据有一个基本的了解。</p></blockquote><h2 id="年龄占比"><a href="#年龄占比" class="headerlink" title="年龄占比"></a>年龄占比</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mPPH96WnF_bo5PhUUy_t9vitAckypGam8AqQtj21k3bTKfl33-2GGBhKaxhBjVA3beTY_1RjXofsC5ciuIzs8lKSDvt1HlpTI48lmGOI1YFtTu2ayLOYfuwmGRSX1JQBm2aYchTCRSs9-kK_AFTwxYhIz5Avz450pHszc-7kXgtxqQrGtOoNi4rdsH3cLvoINkZsL1OykvnXAoYw-fZ2B6w/driver_ages.png?psid=1" alt="年龄分布图"></p><h2 id="种族占比"><a href="#种族占比" class="headerlink" title="种族占比"></a>种族占比</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mHDQaEEusYolk7OewxIuiu8dXhk2yMv6J0TwJyi_Z0Fu_A8ROOFW5Lz6yvG_8uXfeErUxOE9eZcfyQabbdCe-H5JSGtDqTPRmZy5XkZovQpd9d8nf5gI1ZZvgoAWJ0lMvSpWm3NCYgExQeUKLhQad65MA13zBXoDnEo3VSh52GXl8Za6i-HdYASwiXPoVKXxYAhBPhOHPSJ3yq0YoHUKqdA/driver_race.png?psid=1" alt="种族占比"></p><h2 id="毒驾被查时段分布"><a href="#毒驾被查时段分布" class="headerlink" title="毒驾被查时段分布"></a>毒驾被查时段分布</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mVmmFyD3MvntJ9kzsJsHX8EMjNJGsSMCdWDg6FEZRQG_m8hJewVkgoS6mqhar2VPgAAXFw8Q3BzEFqkZczc7MsSYYGLJygl_ykKMv0lsqaTiVQrNH2vb0W76CzQ44al5zpd-Dpl75Sn4wSlifM11_sSYWpFxBgBKx0xaSTJGYwAWPJiW46DziRN-gi2GmRihPhs-EhQPHE7EBhTkK-zYPZw/drugs_rate_in_day.png?psid=1" alt="毒驾被查时段分布"></p><h2 id="男女违章类别对比"><a href="#男女违章类别对比" class="headerlink" title="男女违章类别对比"></a>男女违章类别对比</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4miAPXolLvO5mgi3iOYm75Q0POAAlkOlt5J-WBfrKsF1o9bHMVRSLqVkLdsHujsrYmgV2p08AKH0mJBtVFc3iPI01yaijQWehmWmp-ENMn3gUrzYpeTITXuU9w3leuIAOWVRMFfCbuBjdU2OBTJTxsFyFCZU2wysBK9AuIXYO5pu6Bp5B1MZsTpQr2P4vLAfZjWdwZv22vpN_r2SrcBycnmA/mf_violations.png?psid=1" alt="男女违章类别对比"></p><h2 id="查获违章数（按年）"><a href="#查获违章数（按年）" class="headerlink" title="查获违章数（按年）"></a>查获违章数（按年）</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mp6Ucy_phZLF8doT3IkmgpHEuOVVvb8r2CR0WqTbl-TQasIQmTta-uxyZD8HYdOfSHF2ZHffWSV1Iiik6fFZ9eHcgU4M10GijIuD3_QRKKh0zvKA3JYQUxVss5E0_ygB684AWuCYcebv8N6nx9QNryjaoPJeDP1atziR38bLzJR6Jwk7ZzhxyzBgTJ-ocxbRp4g7Fh3AQKgu08FJLIZNp9Q/Violations_years.png?psid=1" alt="查获违章数"></p><h2 id="违章查获时间段分布"><a href="#违章查获时间段分布" class="headerlink" title="违章查获时间段分布"></a>违章查获时间段分布</h2><p><img src="https://mcx9ta.bn.files.1drv.com/y4mXhQNGaSjofkzj8dpvpkk5BabzWHHY8sDUGtsV5GNlZlfwKtE6fdWgLsEyJQ9IxWmM7V8c62g7aGF1ZxoUTNAhhfAwDYoDZfzAGJSh_L8DV-C5YciiUUKldTTKGKYz3xL8fAQer3mSb0lm3OnWPoF9RoXUizMnFjiLXT6u_sxiwh2l9yKHjKC0BVzHFiARavkbHyit8X-e-8dWqzQb8nklA/Search_rate_in_years.png?psid=1" alt="违章查获时间段分布"></p><h1 id="Handle-the-data"><a href="#Handle-the-data" class="headerlink" title="Handle the data"></a>Handle the data</h1><h2 id="1-Remove-the-column-that-only-contains-missing-values"><a href="#1-Remove-the-column-that-only-contains-missing-values" class="headerlink" title="1. Remove the column that only contains missing values"></a>1. Remove the column that only contains missing values</h2><h3 id="Drop-column"><a href="#Drop-column" class="headerlink" title="Drop column"></a>Drop column</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ri.drop(&apos;value&apos;,aixs=&apos;columns&apos;,inplace=True)</span><br><span class="line"></span><br><span class="line"># aixs = &apos;columns&apos;即我们要进行的是列操作，有时候也用aixs = 1代替。</span><br><span class="line"># inplace = True,即处理完后替代原来的数据，相当于下面这种写法：</span><br><span class="line"></span><br><span class="line">ri = ri.drop(&apos;county_name&apos;,axis=1)</span><br></pre></td></tr></table></figure><p>There is another way to drop the columns, like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del ri[&apos;columns_name&apos;]</span><br></pre></td></tr></table></figure><p>you can do that as this, that’s fine, but it’s not the <em>Pandas way</em>.</p><p>Tips:</p><ul><li>Pay attention to default arguments</li><li>check your work</li><li>There is more than one way to do everything in pandas</li></ul><h2 id="2-Do-men-or-women-speed-more-often"><a href="#2-Do-men-or-women-speed-more-often" class="headerlink" title="2. Do men or women speed more often?"></a>2. Do men or women speed more often?</h2><h3 id="driver-gender-violaton"><a href="#driver-gender-violaton" class="headerlink" title="driver_gender,violaton"></a>driver_gender,violaton</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.violation == &quot;Speeding&quot;].driver_gender.value_counts()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M    32979</span><br><span class="line">F    15482</span><br><span class="line">Name: driver_gender, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.violation == &quot;Speeding&quot;].driver_gender.value_counts(normalize=True) # get the percent value, 如果一个人超速，那么多大几率是男性或女性</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M    0.680527</span><br><span class="line">F    0.319473</span><br><span class="line">Name: driver_gender, dtype: float64</span><br></pre></td></tr></table></figure><p>反过来看，女性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.driver_gender == &apos;F&apos;].violation.value_counts(normalize=True)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Speeding               0.658500</span><br><span class="line">Moving violation       0.136277</span><br><span class="line">Equipment              0.105780</span><br><span class="line">Registration/plates    0.043086</span><br><span class="line">Other                  0.029348</span><br><span class="line">Seat belt              0.027009</span><br><span class="line">Name: violation, dtype: float64</span><br></pre></td></tr></table></figure><p>男性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.driver_gender == &apos;M&apos;].violation.value_counts(normalize=True)</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Speeding               0.524350</span><br><span class="line">Moving violation       0.207012</span><br><span class="line">Equipment              0.135671</span><br><span class="line">Other                  0.057668</span><br><span class="line">Registration/plates    0.038461</span><br><span class="line">Seat belt              0.036839</span><br><span class="line">Name: violation, dtype: float64</span><br></pre></td></tr></table></figure></p><p>合并成一条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby(&apos;driver_gender&apos;).violation.value_counts(normalize=True)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">driver_gender  violation          </span><br><span class="line">F              Speeding               0.658500</span><br><span class="line">               Moving violation       0.136277</span><br><span class="line">               Equipment              0.105780</span><br><span class="line">               Registration/plates    0.043086</span><br><span class="line">               Other                  0.029348</span><br><span class="line">               Seat belt              0.027009</span><br><span class="line">M              Speeding               0.524350</span><br><span class="line">               Moving violation       0.207012</span><br><span class="line">               Equipment              0.135671</span><br><span class="line">               Other                  0.057668</span><br><span class="line">               Registration/plates    0.038461</span><br><span class="line">               Seat belt              0.036839</span><br><span class="line">Name: violation, dtype: float64</span><br></pre></td></tr></table></figure><blockquote><p>when you wirte the groupby, just think for each value(in here is gender, man or women).</p></blockquote><ul><li>count(): 返回所有数据统计之和</li><li>value_counts(): 分别统计该数据分类下（如果有）的值</li><li>normalize = True: 该选项等于True，则会返回 <em>relative frequencies of the unique values.</em></li></ul><h2 id="3-Does-gender-affect-who-gets-searched-during-a-stop"><a href="#3-Does-gender-affect-who-gets-searched-during-a-stop" class="headerlink" title="3. Does gender affect who gets searched during a stop?"></a>3. Does gender affect who gets searched during a stop?</h2><h3 id="driver-gender-search-conducted"><a href="#driver-gender-search-conducted" class="headerlink" title="driver_gender,search_conducted"></a>driver_gender,search_conducted</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.search_conducted.value_counts(normalize=True)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">False    0.965163</span><br><span class="line">True     0.034837</span><br><span class="line">Name: search_conducted, dtype: float64</span><br></pre></td></tr></table></figure><p>Same results with above, how does that work?<br>If the serious value is bool type and you can always just get a sum to konw the number of ones, or a mean to get the percentage of ones, that will simplify you code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.search_conducted.mean()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.03483720473942948</span><br></pre></td></tr></table></figure><p>groupby gender:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby(&apos;driver_gender&apos;).search_conducted.mean()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver_gender</span><br><span class="line">F    0.020033</span><br><span class="line">M    0.043326</span><br><span class="line">Name: search_conducted, dtype: float64</span><br></pre></td></tr></table></figure><p>Does that prove any things? No, </p><ul><li>Causation is difficult to conclude, so focus on relationships.</li><li>Include all relevant factors when studying a relationship.</li></ul><p>Let’s see details:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby([&apos;driver_gender&apos;,&apos;violation&apos;]).search_conducted.mean()</span><br></pre></td></tr></table></figure></p><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">driver_gender  violation          </span><br><span class="line">F              Equipment              0.042622</span><br><span class="line">               Moving violation       0.036205</span><br><span class="line">               Other                  0.056522</span><br><span class="line">               Registration/plates    0.066140</span><br><span class="line">               Seat belt              0.012598</span><br><span class="line">               Speeding               0.008720</span><br><span class="line">M              Equipment              0.070081</span><br><span class="line">               Moving violation       0.059831</span><br><span class="line">               Other                  0.047146</span><br><span class="line">               Registration/plates    0.110376</span><br><span class="line">               Seat belt              0.037980</span><br><span class="line">               Speeding               0.024925</span><br><span class="line">Name: search_conducted, dtype: float64</span><br></pre></td></tr></table></figure><h2 id="4-Why-is-search-type-missing-so-often"><a href="#4-Why-is-search-type-missing-so-often" class="headerlink" title="4. Why is search_type missing so often?"></a>4. Why is search_type missing so often?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.search_conducted.value_counts()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">False    88545</span><br><span class="line">True      3196</span><br><span class="line">Name: search_conducted, dtype: int64</span><br></pre></td></tr></table></figure><p>search_conducted means a search performed, 即一个车主被警察查了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.search_type.count()</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Incident to Arrest                                          1219</span><br><span class="line">Probable Cause                                               891</span><br><span class="line">Inventory                                                    220</span><br><span class="line">Reasonable Suspicion                                         197</span><br><span class="line">Protective Frisk                                             161</span><br><span class="line">Incident to Arrest,Inventory                                 129</span><br><span class="line">Incident to Arrest,Probable Cause                            106</span><br><span class="line">Probable Cause,Reasonable Suspicion                           75</span><br><span class="line">Incident to Arrest,Inventory,Probable Cause                   34</span><br><span class="line">Probable Cause,Protective Frisk                               33</span><br><span class="line">Incident to Arrest,Protective Frisk                           33</span><br><span class="line">Inventory,Probable Cause                                      22</span><br><span class="line">Incident to Arrest,Reasonable Suspicion                       13</span><br><span class="line">Incident to Arrest,Inventory,Protective Frisk                 11</span><br><span class="line">Inventory,Protective Frisk                                    11</span><br><span class="line">Protective Frisk,Reasonable Suspicion                         11</span><br><span class="line">Incident to Arrest,Probable Cause,Protective Frisk            10</span><br><span class="line">Incident to Arrest,Probable Cause,Reasonable Suspicion         6</span><br><span class="line">Incident to Arrest,Inventory,Reasonable Suspicion              4</span><br><span class="line">Inventory,Reasonable Suspicion                                 4</span><br><span class="line">Inventory,Probable Cause,Reasonable Suspicion                  2</span><br><span class="line">Inventory,Probable Cause,Protective Frisk                      2</span><br><span class="line">Probable Cause,Protective Frisk,Reasonable Suspicion           1</span><br><span class="line">Incident to Arrest,Protective Frisk,Reasonable Suspicion       1</span><br><span class="line">Name: search_type, dtype: int64</span><br></pre></td></tr></table></figure></p><p>search_type, the reason for search performed, 即警察为什么要查这个车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.search_conducted == False].search_type.value_counts()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series([], Name: search_type, dtype: int64)</span><br></pre></td></tr></table></figure><p>return empty series, why? because there is no value to count, nan and null is not a value, if it’s not what you want,add dropna= False in the value_counts() method likt this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[ri.search_conducted == False].search_type.value_counts(dropna=False)</span><br></pre></td></tr></table></figure><h2 id="5-During-a-search-how-often-is-the-driver-frisked"><a href="#5-During-a-search-how-often-is-the-driver-frisked" class="headerlink" title="5. During a search, how often is the driver frisked?"></a>5. During a search, how often is the driver frisked?</h2><blockquote><p>How to know is there a word in a string in Python? You may use ‘a’ in b, this is the pythoy way, we got pandas way like this:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ri.search_type.str.contains()</span><br></pre></td></tr></table></figure><p>针对每一行，判断是否有字符串在其中，有则返回True，无则False.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ri[&apos;frisk&apos;] = ri.search_type.str.contains(&apos;Probable Cause&apos;)</span><br><span class="line">ri.frisk</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0          NaN</span><br><span class="line">1          NaN</span><br><span class="line">2          NaN</span><br><span class="line">3          NaN</span><br><span class="line">4          NaN</span><br><span class="line">5          NaN</span><br><span class="line">6          NaN</span><br><span class="line">7          NaN</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.frisk.value_counts(dropna=False)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NaN      88545</span><br><span class="line">False     2014</span><br><span class="line">True      1182</span><br><span class="line">Name: frisk, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ri.frisk.sum() -&gt; 1182</span><br><span class="line">ri.frisk.mean() -&gt; 0.36983729662077597</span><br><span class="line">1182/(1182+2014) -&gt; 0.36983729662077597</span><br></pre></td></tr></table></figure><p>the mean, is caculated by frisked / (frisked+unfrisked), and will <strong>excluded the missing values.</strong></p><h2 id="6-Which-year-had-the-least-number-of-stops"><a href="#6-Which-year-had-the-least-number-of-stops" class="headerlink" title="6. Which year had the least number of stops?"></a>6. Which year had the least number of stops?</h2><h3 id="Method-1-Use-the-str-slice"><a href="#Method-1-Use-the-str-slice" class="headerlink" title="Method 1: Use the str.slice"></a>Method 1: Use the str.slice</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_date.str.slice(0,4).value_counts()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2012    10970</span><br><span class="line">2006    10639</span><br><span class="line">2007     9476</span><br><span class="line">2014     9228</span><br><span class="line">2008     8752</span><br><span class="line">2015     8599</span><br><span class="line">2011     8126</span><br><span class="line">2013     7924</span><br><span class="line">2009     7908</span><br><span class="line">2010     7561</span><br><span class="line">2005     2558</span><br></pre></td></tr></table></figure><p>The stop_date format is: 2005-01-02, so slice(0,4) will return 2005, then do a value_counts will get the number of stops in all years.</p><h3 id="Method-2-Use-the-datetime"><a href="#Method-2-Use-the-datetime" class="headerlink" title="Method 2: Use the datetime"></a>Method 2: Use the datetime</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">combined = ri.stop_date.str.cat(ri.stop_time,sep=&apos; &apos;)</span><br><span class="line">ri[&apos;stop_datetime&apos;] = pd.to_datetime(combined)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2012    10970</span><br><span class="line">2006    10639</span><br><span class="line">2007     9476</span><br><span class="line">2014     9228</span><br><span class="line">2008     8752</span><br><span class="line">2015     8599</span><br><span class="line">2011     8126</span><br><span class="line">2013     7924</span><br><span class="line">2009     7908</span><br><span class="line">2010     7561</span><br><span class="line">2005     2558</span><br></pre></td></tr></table></figure><p>Use the pd.to_datetime method to convert a concated string to a datatime type value, then add a new col in ri.<br>cat is a string method to concat two string, the sep arg is a string or char you want insert in center.</p><p>So, after that, how to get the year value?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_datetime.dt.year.value_counts()</span><br></pre></td></tr></table></figure><p>datetime has a method .dt, and you can .year, .day, etc.</p><h2 id="7-How-does-drug-activity-change-by-time-of-day"><a href="#7-How-does-drug-activity-change-by-time-of-day" class="headerlink" title="7. How does drug activity change by time of day?"></a>7. How does drug activity change by time of day?</h2><h3 id="stop-datetime-drugs-related-stop"><a href="#stop-datetime-drugs-related-stop" class="headerlink" title="stop_datetime,drugs_related_stop"></a>stop_datetime,drugs_related_stop</h3><p>Let’s specific, for every hour, what is the rate of the drugs_related_stop?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby(ri.stop_datetime.dt.hour).drugs_related_stop.mean()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">stop_datetime</span><br><span class="line">0     0.019728</span><br><span class="line">1     0.013507</span><br><span class="line">2     0.015462</span><br><span class="line">3     0.017065</span><br><span class="line">4     0.011811</span><br><span class="line">5     0.004762</span><br><span class="line">6     0.003040</span><br><span class="line">7     0.003281</span><br><span class="line">8     0.002687</span><br><span class="line">9     0.006288</span><br><span class="line">10    0.005714</span><br><span class="line">11    0.006976</span><br><span class="line">12    0.004467</span><br><span class="line">13    0.010326</span><br><span class="line">14    0.007810</span><br><span class="line">15    0.006416</span><br><span class="line">16    0.005723</span><br><span class="line">17    0.005517</span><br><span class="line">18    0.010148</span><br><span class="line">19    0.011596</span><br><span class="line">20    0.008084</span><br><span class="line">21    0.013342</span><br><span class="line">22    0.013533</span><br><span class="line">23    0.016344</span><br><span class="line">Name: drugs_related_stop, dtype: float64</span><br></pre></td></tr></table></figure><p>show it!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.groupby(ri.stop_datetime.dt.hour).drugs_related_stop.mean().plot()</span><br></pre></td></tr></table></figure><p>output:</p><p><img src="https://mcwywq.bn.files.1drv.com/y4mkRchu7eh5ClZ_5hMguC0V-k3KY7tnt0-KpbEoif1EgVMEXCdt5VIxstOsVv-urRgNOdK6ebfF1SfkOyqWmxjcfz1a6F9_uQQpW79nkbZmYiKGVvAr1M6vXbh9ly0DNOSCIkNgyrDwQkjpDXtfRMwtfsZkhyd7UqsZJeKMxSsGfClSDqucjlFGZ3A7xkFxLDzORpau6TMPGXIkjjDjMkXHw/drugs_related.png?psid=1" alt=""></p><p>if you want the notebook auto show the img, make sure you imported the packge.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><p>then when you type .plot() the img will show automatically.</p><p>Lesssons:</p><ul><li>Consider removing chunks of data that may be biased</li><li>Use the datetime data type for dates and times</li></ul><h2 id="8-Do-most-stops-occur-at-night"><a href="#8-Do-most-stops-occur-at-night" class="headerlink" title="8. Do most stops occur at night?"></a>8. Do most stops occur at night?</h2><p>Let do this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_datetime.dt.hour.value_counts().plot()</span><br></pre></td></tr></table></figure><p>you will get an error img, because the plot is generated by the value, not the index(in here is the hour),<br>so you need to sort with index first,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_datetime.dt.hour.value_counts().sort_index().plot()</span><br></pre></td></tr></table></figure><p>ouput:</p><p><img src="https://mcwywq.bn.files.1drv.com/y4mkRchu7eh5ClZ_5hMguC0V-k3KY7tnt0-KpbEoif1EgVMEXCdt5VIxstOsVv-urRgNOdK6ebfF1SfkOyqWmxjcfz1a6F9_uQQpW79nkbZmYiKGVvAr1M6vXbh9ly0DNOSCIkNgyrDwQkjpDXtfRMwtfsZkhyd7UqsZJeKMxSsGfClSDqucjlFGZ3A7xkFxLDzORpau6TMPGXIkjjDjMkXHw/drugs_related.png?psid=1" alt=""></p><p>and there is a details version:</p><p><img src="https://bn1301files.storage.live.com/y4mfDJ5BskfJi6Bl_KlVmBzKUzosUMz4c6sJtnFknHh-mKevDycVq5ghobnTWVfINyG-pQDAIfZK6UNCZOSpUP2IxLJJtgkpS4TN9lmc0VN0OcINS3bjH7EoGLkpNl0gsmiIlcTiyxb7K_qZyjTjmGu3-rCJ52mGcepghI8NxsInK-WUiy51tw0vQJGV-vKmdX78YOBeACPpGGemOYrpTmCcg/stop_hour_details.png?psid=1&amp;width=1278&amp;height=852" alt=""></p><p>bt, how to define the night, In my view 22-4 is night, I want to filter the hours:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ri[(ri.stop_datetime.dt.hour &gt; 4) &amp; (ri.stop_datetime.dt.hour &lt; 22)].shape</span><br></pre></td></tr></table></figure><p>if you have a category, want to apply the hours, you can define a method and map to the hours.</p><h2 id="9-Find-the-bad-data-in-the-stop-duration-column-and-fix-it"><a href="#9-Find-the-bad-data-in-the-stop-duration-column-and-fix-it" class="headerlink" title="9. Find the bad data in the stop_duration column and fix it"></a>9. Find the bad data in the stop_duration column and fix it</h2><p>Check this value counts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.stop_duration.value_counts()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0-15 Min     69543</span><br><span class="line">16-30 Min    13635</span><br><span class="line">30+ Min       3228</span><br><span class="line">2                1</span><br><span class="line">1                1</span><br><span class="line">Name: stop_duration, dtype: int64</span><br></pre></td></tr></table></figure><p>We want to turn the stop_duration value equals ‘1’ to ‘NAN’, how?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri[(ri.stop_duration == &apos;1&apos;) | (ri.stop_duration == &apos;2&apos;)].stop_duration == &apos;NAN&apos;</span><br></pre></td></tr></table></figure><p>that looks make sense,but check the value counts, it does’nt work.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0-15 Min     69543</span><br><span class="line">16-30 Min    13635</span><br><span class="line">30+ Min       3228</span><br><span class="line">2                1</span><br><span class="line">1                1</span><br><span class="line">Name: stop_duration, dtype: int64</span><br></pre></td></tr></table></figure><p>why? acturlly, you may get a warnning,</p><blockquote><p><em>A value is trying to be set on a copy of a slice from a DataFrame.</em></p></blockquote><p>You should use loc.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ri.loc[(ri.stop_duration == &apos;1&apos;) | (ri.stop_duration == &apos;2&apos;),&apos;stop_duration&apos;] = &apos;NAN&apos;</span><br></pre></td></tr></table></figure><p>check again:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0-15 Min     69543</span><br><span class="line">16-30 Min    13635</span><br><span class="line">30+ Min       3228</span><br><span class="line">NAN              2</span><br><span class="line">Name: stop_duration, dtype: int64</span><br></pre></td></tr></table></figure><p>注意比较一下这两者用法上的区别，如果想要了解更多loc的用法，可以关注该作者的另一个单独介绍的视频，<a href="https://www.youtube.com/watch?v=xvpNA7bC8cs" target="_blank" rel="noopener">油管链接</a>。</p><p>but you get two string format ‘NAN’, you want get a really NAN value, okay, let fix it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">ri.loc[ri.stop_duration == &apos;NAN&apos;,&apos;stop_duration&apos;] = np.nan</span><br></pre></td></tr></table></figure><p>there you go!</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 0-15 Min     69543</span><br><span class="line">16-30 Min    13635</span><br><span class="line">30+ Min       3228</span><br><span class="line">Name: stop_duration, dtype: int64</span><br></pre></td></tr></table></figure><h1 id="生词"><a href="#生词" class="headerlink" title="生词"></a>生词</h1><ul><li>search：这里应该理解为警察的搜查</li><li>hypothetical: 假设</li><li>slick way,精明的小技巧</li><li>registration searched: 车牌造假违章</li><li>conducted: 处理、行为</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一次偶然的机会看到&lt;a href=&quot;&quot;&gt;王树义&lt;/a&gt;老师的推荐YouTube上的这个pandas视频教程，于是花了点时间学习了一下，也就有了这篇笔记，因为课程是英文的，也没有提供&lt;br&gt;中文字幕，所以我的笔记也就懒得再用中文写了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="Data Science" scheme="http://wittyfans.com/tags/Data-Science/"/>
    
      <category term="Pandas" scheme="http://wittyfans.com/tags/Pandas/"/>
    
      <category term="Big Data" scheme="http://wittyfans.com/tags/Big-Data/"/>
    
  </entry>
  
  <entry>
    <title>Pandas常用操作</title>
    <link href="http://wittyfans.com/coding/Pandas%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html"/>
    <id>http://wittyfans.com/coding/Pandas常用操作.html</id>
    <published>2018-12-29T04:16:02.000Z</published>
    <updated>2018-12-31T03:38:10.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>常用的操作与命令，记录一下</p></blockquote><a id="more"></a><h1 id="Pandas-常用操作"><a href="#Pandas-常用操作" class="headerlink" title="Pandas 常用操作"></a>Pandas 常用操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 更改列的顺序</span><br><span class="line">pdusersInfo = pdusersInfo[[&apos;username&apos;,&apos;sex&apos;,&apos;platform&apos;]]</span><br><span class="line"></span><br><span class="line">2. 从字典构造DataFrame</span><br><span class="line">usersInfo = &#123;&apos;username&apos;:username,&apos;sex&apos;:usersex,&apos;platform&apos;:platform&#125;</span><br><span class="line">pdusersInfo = pd.DataFrame.from_dict(usersInfo)</span><br><span class="line"></span><br><span class="line">3. 本地json转换成pd数据</span><br><span class="line">import json</span><br><span class="line">with open(&quot;path/filename.json&quot;,encoding=&quot;utf-8&quot;) as jsonFile:</span><br><span class="line">    data = json.load(jsonFile)</span><br><span class="line">pdJson = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">4.数据分段统计，bins是分段的标记，ages为数据，数据将会按照18-25,25-35等分段统计，right为控制数据偏向哪一边</span><br><span class="line">ages = [20,22,21,27,47,33,67,42,100,60,60]</span><br><span class="line">bins = [18,25,35,60,100]</span><br><span class="line"></span><br><span class="line">cats = pd.cut(ages,bins,right=False)</span><br><span class="line">pd.value_counts(cats)</span><br><span class="line"></span><br><span class="line">5. 去重复</span><br><span class="line">data.drop_duplicates() -&gt; 去掉所有列的数据都一样的</span><br><span class="line">data.drop_duplicates([&quot;name&quot;,&quot;age&quot;]) -&gt; 去除名字和年龄一样的数据</span><br><span class="line"></span><br><span class="line">6. 合并两个表</span><br><span class="line">c = a.append(b)</span><br><span class="line">c.data.drop_duplicates()</span><br><span class="line"></span><br><span class="line">7. 统计列中某个值出现的次数</span><br><span class="line">pd.value_counts(colname.value)</span><br><span class="line"></span><br><span class="line">8. Excel交互</span><br><span class="line">&gt; 这三条代码的意思是，导入pandas，读取文件，并简要显示文件内容。</span><br><span class="line">import pandas as pd</span><br><span class="line">data = pd.read_excel(&quot;C://Users/username/path/filename.xlsx&quot;)</span><br><span class="line">data.tail</span><br><span class="line">data.dtypes</span><br><span class="line"></span><br><span class="line">&gt; 导出</span><br><span class="line">out_path = &quot;/Users/wittyfans/Desktop/4F/PhoneData.xlsx&quot;</span><br><span class="line">writer = pd.ExcelWriter(out_path , engine=&apos;xlsxwriter&apos;)</span><br><span class="line">data.to_excel(writer, sheet_name=&apos;Sheet1&apos;)</span><br><span class="line">writer.save()</span><br><span class="line"></span><br><span class="line">9. 过滤</span><br><span class="line">&gt; 过滤前五条数据：</span><br><span class="line">data.ID[:5]</span><br><span class="line"></span><br><span class="line">10. 丢弃空值</span><br><span class="line"> data.dropna()</span><br><span class="line"></span><br><span class="line">11. 类型转换</span><br><span class="line">int = double.astype(int)</span><br><span class="line"></span><br><span class="line">13. 从html请求表</span><br><span class="line">url = &apos;/Users/wittyfans/Desktop/a.html&apos;</span><br><span class="line">dfs = pd.read_html(url,header=0)</span><br><span class="line"></span><br><span class="line">14. 从字典构造DataFrame</span><br><span class="line">users = &#123;&apos;names&apos;:usernames,&apos;sex&apos;:usersexs,&apos;platform&apos;:userplatform&#125;</span><br><span class="line">users = pd.DataFrame(users)</span><br><span class="line"></span><br><span class="line">15. 根据指定值分组</span><br><span class="line">data.groupby(&apos;platform&apos;)</span><br><span class="line"></span><br><span class="line">16. 根据指定列排序</span><br><span class="line">data.sort_values(&apos;names&apos;,ascending=False)</span><br><span class="line"></span><br><span class="line">17. csv交互</span><br><span class="line">pd.read_csv(&quot;/Users/wittyfans/Desktop/example.csv&quot;)</span><br><span class="line"></span><br><span class="line">18. 选择数据</span><br><span class="line">- [参考](https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/3-2-pd-indexing/)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;常用的操作与命令，记录一下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="Data" scheme="http://wittyfans.com/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>V2ray Quick Start</title>
    <link href="http://wittyfans.com/coding/V2ray-Quick-Start.html"/>
    <id>http://wittyfans.com/coding/V2ray-Quick-Start.html</id>
    <published>2018-10-20T09:47:39.000Z</published>
    <updated>2018-12-29T04:20:15.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Deploy v2ray is so simple, but speed is not fast in my server.</p></blockquote><a id="more"></a><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>In Debian , Just input the command in below:</p><blockquote><p>bash &lt;(curl -L -s <a href="https://install.direct/go.sh" target="_blank" rel="noopener">https://install.direct/go.sh</a>)</p></blockquote><p>And you just need to wait, all things will get done automatically.</p><h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><p>First, Find the config file’s location:</p><blockquote><p>vi /etc/v2ray/config.json</p></blockquote><p>you will see this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;inbound&quot;: &#123;</span><br><span class="line">    &quot;port&quot;: you_port_nums,</span><br><span class="line">    &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      &quot;clients&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;id&quot;: &quot;the_id_that_generate_for_you&quot;,</span><br><span class="line">          &quot;level&quot;: 1,</span><br><span class="line">          &quot;alterId&quot;: 64</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  and more code</span><br></pre></td></tr></table></figure><p>Change the port if you need, copy the id in clients.</p><p>It’s time to start the v2ray, just type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service v2ray start</span><br></pre></td></tr></table></figure><p>to start the v2ray. Alse you can type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service v2ray start|stop|status|reload|restart|force-reload</span><br></pre></td></tr></table></figure><p>to get more control of the  v2ray service.</p><p>Untill now, It’s ok In server side, Let’s go to the client side.</p><h1 id="Use"><a href="#Use" class="headerlink" title="Use"></a>Use</h1><p>In your application, Click add button, input the port and id that I requires you to copy. Save and you can connect to the server now. </p><p>Enjoy it.</p><h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>The script installs the following files.</p><ul><li>/usr/bin/v2ray/v2ray: V2Ray executable</li><li>/usr/bin/v2ray/v2ctl: Utility</li><li>/etc/v2ray/config.json: Config file</li><li>/usr/bin/v2ray/geoip.dat: IP data file</li><li>/usr/bin/v2ray/geosite.dat: domain data file</li></ul><p>go.sh supports the following parameters.</p><ul><li>-p or –proxy: Use a proxy to download V2Ray packages. Same as curl format, such as “socks5://127.0.0.1:1080” or “<a href="http://127.0.0.1:3128&quot;" target="_blank" rel="noopener">http://127.0.0.1:3128&quot;</a>.</li><li>-f or –force: Force installation. The script will assume V2Ray was not installed at all.</li><li>–version: The version to be installed, such as “v1.13”. Default value is the latest stable release.</li><li>–local: Use a local package for installation.</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.v2ray.com/index.html" target="_blank" rel="noopener">Official site</a></li><li><a href="https://toutyrater.github.io/" target="_blank" rel="noopener">Easy version of official tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Deploy v2ray is so simple, but speed is not fast in my server.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="linux" scheme="http://wittyfans.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows CMD命令记录</title>
    <link href="http://wittyfans.com/coding/Windows-CMD%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95.html"/>
    <id>http://wittyfans.com/coding/Windows-CMD命令记录.html</id>
    <published>2018-10-08T08:11:12.000Z</published>
    <updated>2018-10-08T08:25:33.994Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理了一下常用的CMD命令 📇</p></blockquote><a id="more"></a><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">D: 进入d盘</span><br><span class="line">dir 列举当前目录的文件，类似linux的ls</span><br><span class="line">md 创建目录</span><br><span class="line">rd 删除目录</span><br><span class="line">echo %PROCESSOR_ARCHITECTURE%查看系统版本位数</span><br><span class="line">set查看系统环境变量</span><br><span class="line">netstat -ano查看开放的端口</span><br><span class="line">netstat -an | find &quot;3389&quot;查看3389开放情况</span><br><span class="line">ipconfig /all查询本机IP段，所在域等</span><br><span class="line">net config Workstation当前计算机名，全名，用户名，系统版本，工作站域，登陆域</span><br><span class="line">net user本机用户列表</span><br><span class="line">net localhroup administrators本机管理员[通常含有域用户]</span><br><span class="line">net user /domain查询域用户</span><br><span class="line">net user 用户名 /domain获取指定用户的账户信息</span><br><span class="line">net user /domain b404 pass修改域内用户密码，需要管理员权限</span><br><span class="line">net group /domain查询域里面的工作组</span><br><span class="line">net group 组名 /domain查询域中的某工作组</span><br><span class="line">net group &quot;domain admins&quot; /domain查询域管理员列表</span><br><span class="line">net group &quot;enterprise admins&quot; /domain获得企业管理员列表</span><br><span class="line">net group 组名 /del /domain删除域中的某组</span><br><span class="line">net group 组名 组成员名 /del /domain删除域中的某组的组成员</span><br><span class="line">net localgroup administrators /domain登录本机的域管理员</span><br><span class="line">net group 组名 /add增加域中的组</span><br><span class="line">net localgroup administrators workgroup\user001 /add域用户添加到本机</span><br><span class="line">net group &quot;domain controllers&quot; /domain查看域控制器(如果有多台)</span><br><span class="line">net time /domain判断主域，主域服务器都做时间服务器</span><br><span class="line">net config workstation当前登录域</span><br><span class="line">net session查看当前会话</span><br><span class="line">net use \\ip\ipc$ pawword /user:username@domain建立IPC会话[空连接-***]</span><br><span class="line">net view \\ip查询某IP共享</span><br><span class="line">net use z: \\192.168.200.21\文件夹名建立映射到本机Z盘</span><br><span class="line">net share查看SMB指向的路径[即共享]</span><br><span class="line">at \\192.168.200.21:50 c:\windows\fuxk.exe在共享主机上执行</span><br><span class="line">net view查询同一域内机器列表</span><br><span class="line">net view /domain查询域列表</span><br><span class="line">net view /domain:test查看test域中计算机列表</span><br><span class="line">net view \\DC的机器名字查看域控共享情况</span><br><span class="line">nltest /domain_trusts获取域信任信息</span><br><span class="line">net session查看当前会话</span><br><span class="line">net start查看当前运行的服务</span><br><span class="line">net time /domain查询主域服务器的时间</span><br><span class="line">net time \\192.168.200.21查看192.168.200.21机器的时间</span><br><span class="line">echo %logonserver%查看登陆到这台服务器的计算机</span><br><span class="line">net accounts查看本地密码策略</span><br><span class="line">net accounts /domain查看域密码策略</span><br><span class="line">nbtstat –A ipnetbios 查询</span><br><span class="line">netstat –an/ano/anb网络连接查询</span><br><span class="line">netsh firewall show config查看防火墙策略</span><br><span class="line">netsh firewall show state查看防火墙策略</span><br><span class="line">route print路由表</span><br><span class="line">tracert IP路由跟踪</span><br><span class="line">arp -a列出本网段内所有活跃的IP地址</span><br><span class="line">arp -s (ip + mac)绑定mac和IP</span><br><span class="line">arp -d (iP + mac)解绑IP和Mac</span><br><span class="line">tasklist /V查看进程[显示对应用户]</span><br><span class="line">tasklist /S ip /U domain\username /P /V查看远程计算机进程列表</span><br><span class="line">psexec \\192.168.200.21 -u administrator -p b404pass -c gsecdump.exe -u从域服务器密码存储文件windows/ntds/ntds.dit导出hash值出来</span><br><span class="line">gsecdump -a获取域登管理员登录过得hash值，这里gescdump为第三方导出AD域的hash值</span><br><span class="line">tasklist /S IP地址 /U 域名\用户名 /P /V查看远程计算机进程</span><br><span class="line">tasklist /svc查看进程</span><br><span class="line">taskkill /im 进程名称(cmd.exe)结束进程</span><br><span class="line">taskkill /pid[进程码]-t(结束该进程) -f(强制结束该进程以及所有子进程)</span><br><span class="line">ping 主机名显示IP</span><br><span class="line">qprocess *类似tasklist</span><br><span class="line">qprocess /SERVER:IP远程查看计算机进程列表</span><br><span class="line">nslookup –qt-MX Yahoo.com查看邮件服务器</span><br><span class="line">whoami /all查询当前用户权限等</span><br><span class="line">set查看系统环境变量</span><br><span class="line">systeminfo查看系统信息</span><br><span class="line">qwinsta查看登录情况</span><br><span class="line">qwinsta /SERVER:IP查看远程登录情况</span><br><span class="line">fsutil fsinfo drives查看所有盘符</span><br><span class="line">gpupdate /force更新域策略</span><br><span class="line">whoami查询账号所属权限</span><br><span class="line">whoami /all查看sid号</span><br><span class="line">wmic bios查看bios信息</span><br><span class="line">wmic qfe查看补丁信息</span><br><span class="line">wmic qfe get hotfixid查看补丁-Patch号，很实用</span><br><span class="line">wmic qfe list full /format:htable &gt; hotfixes.htm详细的补丁安装</span><br><span class="line">wmic share get name,path查看SMB指向路径</span><br><span class="line">wmic startup查看启动项</span><br><span class="line">wmic service查看服务</span><br><span class="line">wmic os查看OS信息</span><br><span class="line">wmic service list brief查看进程服务</span><br><span class="line">wmic process list brief查看进程</span><br><span class="line">wmic startup list brief启动程序信息</span><br><span class="line">wmic product list brief查看安装程序和版本信息（漏洞利用线索）</span><br><span class="line">wmic startup list full识别开机启动的程序</span><br><span class="line">wmic process where(description=&quot;mysqld.exe&quot;)&gt;&gt;mysql.log获取软件安装路径</span><br><span class="line">dir \\DC\SYSVOL /s /a &gt; sysvol.txt列出sysvol日志记录</span><br><span class="line">xcopy \\dc2.backlion.com\sysvol.txt sysvol.txt /i /e /c拷贝sysvol.txt到本地</span><br><span class="line">REG query HKCU /v &quot;pwd&quot; /s获取到存到注册表中的密码</span><br><span class="line">dir /b/s config.*查看所在目录所有前缀为config的文件</span><br><span class="line">findstr /si password *.xml *.ini *.txt查看后缀名文件中含有password关键字的文件</span><br><span class="line">findstr /si login *.xml *.ini *.txt查看后缀名文件中含有login关键字的文件</span><br><span class="line">copy con ftp.bat创建ftp.bat批处理，然后输入ifconfig等命令，按ctr+z退出，并创建成功</span><br><span class="line">copy con test.vbs创建test.vbs脚本，输入脚本后，按ctr+z退出，并创建成功</span><br><span class="line">ASSOC 显示文件扩展对应的程序</span><br><span class="line">cipher 删除文件，但并不立即删除</span><br><span class="line">driverquery -v 显示所有装了的驱动</span><br><span class="line">fc 对比两个文件</span><br><span class="line">netstat -an 显示IP与开放的端口</span><br><span class="line">Tracert、pathping 看路由表</span><br><span class="line">tasklist 正在运行的任务</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://xstarcd.github.io/wiki/windows/windows_cmd_summary_commands.html" target="_blank" rel="noopener">windows_cmd_summary</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理了一下常用的CMD命令 📇&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="cmd" scheme="http://wittyfans.com/tags/cmd/"/>
    
      <category term="shell" scheme="http://wittyfans.com/tags/shell/"/>
    
      <category term="windows" scheme="http://wittyfans.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Auto assign ticket with Jira python api</title>
    <link href="http://wittyfans.com/coding/Auto-assign-ticket-with-Jira-python-api.html"/>
    <id>http://wittyfans.com/coding/Auto-assign-ticket-with-Jira-python-api.html</id>
    <published>2018-10-05T14:40:07.000Z</published>
    <updated>2018-10-08T08:23:28.011Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>再也不用担心jira工单超时了 🤟</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">from collections import Counter</span><br><span class="line">from jira import JIRA</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># The notifier function</span><br><span class="line">def run_once(f):</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        if not wrapper.has_run:</span><br><span class="line">            wrapper.has_run = True</span><br><span class="line">            return f(*args, **kwargs)</span><br><span class="line">    wrapper.has_run = False</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def notify(title, subtitle, message):</span><br><span class="line">    t = &apos;-title &#123;!r&#125;&apos;.format(title)</span><br><span class="line">    s = &apos;-subtitle &#123;!r&#125;&apos;.format(subtitle)</span><br><span class="line">    m = &apos;-message &#123;!r&#125;&apos;.format(message)</span><br><span class="line">    v = &apos;-sound glass&apos;</span><br><span class="line">    os.system(&apos;terminal-notifier &#123;&#125;&apos;.format(&apos; &apos;.join([m, t, s, v])))</span><br><span class="line"></span><br><span class="line">def timer(n):</span><br><span class="line">    print(&quot;初始化&quot;)</span><br><span class="line">    print(&quot;开始监测工单...&quot;)</span><br><span class="line">    jira = JIRA(&apos;你的jira服务器地址&apos;,basic_auth=(&apos;用户名&apos;, &apos;密码&apos;))</span><br><span class="line">    while True:</span><br><span class="line">        tickets = jira.search_issues(&apos;The JQL for search jira ticket，搜索工单的jql&apos;)</span><br><span class="line">        for issue in tickets:</span><br><span class="line">            # jira.assign_issue(issue, &apos;需要assign的用户名&apos;)</span><br><span class="line">            print(&apos;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&apos;.format(issue.key,issue.fields.creator,issue.fields.summary,str(issue.fields.customfield_10208),issue.fields.priority.name))</span><br><span class="line">            notify(title    = &apos;JIRA&apos;,</span><br><span class="line">                   subtitle = issue.key,</span><br><span class="line">                   message  = issue.fields.summary)</span><br><span class="line">            jira.assign_issue(issue, &apos;需要assign的用户名&apos;)</span><br><span class="line">        time.sleep(n)</span><br><span class="line">timer(120)</span><br></pre></td></tr></table></figure><ul><li>使用之前，需要先安装相关的包（主要是jira），使用pip安装即可</li><li>在Mac OS上运行，将会有通知提示，提示音都可以自定义，如果在windows上运行，将<em> The notifier function</em>函数和相关语句删除即可</li><li>timer（120），每隔120S请求一次数据，可以自定义</li><li>可以自定义一个userlist，实现多个assigner自动、随机分配</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;再也不用担心jira工单超时了 🤟&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
      <category term="jira" scheme="http://wittyfans.com/tags/jira/"/>
    
      <category term="python" scheme="http://wittyfans.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell Encrypting Credentials Generator</title>
    <link href="http://wittyfans.com/coding/PowerShell-Encrypting-Credentials-Generator.html"/>
    <id>http://wittyfans.com/coding/PowerShell-Encrypting-Credentials-Generator.html</id>
    <published>2018-10-05T14:11:51.000Z</published>
    <updated>2018-10-08T15:02:58.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用PowerShell运行，输入密码，生存的String会自动复制到剪贴板，直接去需要的地方粘贴即可。</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Add-Type -AssemblyName System.Windows.Forms</span><br><span class="line"></span><br><span class="line">function Read-MessageBoxDialog</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    param ([string]$Message,</span><br><span class="line"></span><br><span class="line">        [string]$WindowTitle,</span><br><span class="line"></span><br><span class="line">        [System.Windows.Forms.MessageBoxButtons]$Buttons = [System.Windows.Forms.MessageBoxButtons]::OK,</span><br><span class="line"></span><br><span class="line">        [System.Windows.Forms.MessageBoxIcon]$Icon = [System.Windows.Forms.MessageBoxIcon]::None)</span><br><span class="line"></span><br><span class="line">    Add-Type -AssemblyName System.Windows.Forms</span><br><span class="line"></span><br><span class="line">    return [System.Windows.Forms.MessageBox]::Show($Message, $WindowTitle, $Buttons, $Icon)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">write-host &quot;请输入原始密码：↓↓↓↓&quot;</span><br><span class="line">$inputPWD = Read-Host | ConvertTo-SecureString -AsPlainText -Force</span><br><span class="line">$encryptedPWD = $inputPWD | ConvertFrom-SecureString</span><br><span class="line">[Windows.Forms.Clipboard]::SetText($encryptedPWD)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Read-MessageBoxDialog -Message &quot;已拷贝到剪贴板&quot; -WindowTitle &quot;安全密码制作工具&quot; -Buttons OK -Icon Information</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用PowerShell运行，输入密码，生存的String会自动复制到剪贴板，直接去需要的地方粘贴即可。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
      <category term="PowerShell" scheme="http://wittyfans.com/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>Groovy Jira 笔记</title>
    <link href="http://wittyfans.com/coding/Groovy-Jira-%E7%AC%94%E8%AE%B0.html"/>
    <id>http://wittyfans.com/coding/Groovy-Jira-笔记.html</id>
    <published>2018-10-05T13:56:12.000Z</published>
    <updated>2018-10-05T13:59:33.605Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Groovy是一门Java系的脚本语言，在Jira系统中，配合ScriptRunner，可以对Jira的ticket实现非常高级的自动化功能。</p></blockquote><a id="more"></a><p>Groovy 笔记</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>byte</li><li>char</li><li>short</li><li>int</li><li>long</li><li>java.lang.BigInteger</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// primitive types</span><br><span class="line">byte  b = 1</span><br><span class="line">char  c = 2</span><br><span class="line">short s = 3</span><br><span class="line">int   i = 4</span><br><span class="line">long  l = 5</span><br><span class="line"></span><br><span class="line">// infinite precision</span><br><span class="line">BigInteger bi =  6</span><br><span class="line"></span><br><span class="line">//布尔</span><br><span class="line"></span><br><span class="line">def myBooleanVariable = true</span><br><span class="line">boolean untypedBooleanVar = false</span><br></pre></td></tr></table></figure><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def numbers = [1, 2, 3]         </span><br><span class="line"></span><br><span class="line">assert numbers instanceof List  </span><br><span class="line">assert numbers.size() == 3</span><br></pre></td></tr></table></figure><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arrStr = [&apos;Ananas&apos;, &apos;Banana&apos;, &apos;Kiwi&apos;]</span><br><span class="line">def numArr = [1, 2, 3] as int[]      </span><br><span class="line">def matrix3 = new Integer[3][3]</span><br></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def colors = [red: &apos;#FF0000&apos;, green: &apos;#00FF00&apos;, blue: &apos;#0000FF&apos;]   </span><br><span class="line"></span><br><span class="line">assert colors[&apos;red&apos;] == &apos;#FF0000&apos;    </span><br><span class="line">assert colors.green  == &apos;#00FF00&apos;    </span><br><span class="line"></span><br><span class="line">colors[&apos;pink&apos;] = &apos;#FF00FF&apos;           </span><br><span class="line">colors.yellow  = &apos;#FFFF00&apos;           </span><br><span class="line"></span><br><span class="line">assert colors.pink == &apos;#FF00FF&apos;</span><br><span class="line">assert colors[&apos;yellow&apos;] == &apos;#FFFF00&apos;</span><br><span class="line"></span><br><span class="line">assert colors instanceof java.util.LinkedHashMap</span><br></pre></td></tr></table></figure><h1 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">println &quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">def name = &apos;Guillaume&apos; // a plain string</span><br><span class="line">def greeting = &quot;Hello $&#123;name&#125;&quot;</span><br><span class="line"></span><br><span class="line">assert greeting.toString() == &apos;Hello Guillaume&apos;</span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* a standalone multiline comment</span><br><span class="line">   spanning two lines */</span><br></pre></td></tr></table></figure><h1 id="一切都是对象"><a href="#一切都是对象" class="headerlink" title="一切都是对象"></a>一切都是对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def message = 12</span><br><span class="line">println message.class</span><br></pre></td></tr></table></figure><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(i = 0; i &lt; 5; i++)&#123;</span><br><span class="line">  println val</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h1><blockquote><p>范围是一系列的值。例如 “0..4” 表明包含 整数 0、1、2、3、4。Groovy 还支持排除范围，“0..&lt;4” 表示 0、1、2、3。还可以创建字符范围：“a..e” 相当于 a、b、c、d、e。”a..&lt;e”包括小于 e 的所有值.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(i in 0..5)&#123;</span><br><span class="line">  println val</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="设置默认参数"><a href="#设置默认参数" class="headerlink" title="设置默认参数"></a>设置默认参数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def repeat(val, repeat=5)&#123;</span><br><span class="line"> for(i in 0..&lt;repeat)&#123;</span><br><span class="line">  println val</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def range = 0..4</span><br><span class="line">println range.class</span><br></pre></td></tr></table></figure><blockquote><p>每个 Groovy 集合都是 java.util.Collection 或 java.util.Map 的实例。</p></blockquote><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def coll = [&quot;Groovy&quot;, &quot;Java&quot;, &quot;Ruby&quot;]</span><br><span class="line">coll.add(&quot;Python&quot;)</span><br><span class="line">coll &lt;&lt; &quot;Smalltalk&quot;</span><br><span class="line">return coll</span><br></pre></td></tr></table></figure><h1 id="获取Issue"><a href="#获取Issue" class="headerlink" title="获取Issue"></a>获取Issue</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import com.atlassian.jira.issue.Issue</span><br><span class="line">import com.atlassian.jira.issue.ModifiedValue</span><br><span class="line">import com.atlassian.jira.issue.util.DefaultIssueChangeHolder</span><br><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line"></span><br><span class="line">def issueManager = ComponentAccessor.getIssueManager()</span><br><span class="line">def issue = issueManager.getIssueObject(&quot;AM-17&quot;)</span><br></pre></td></tr></table></figure><p>AM-17为issue的key.</p><h1 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.class</span><br></pre></td></tr></table></figure><h1 id="获取issue和customerField"><a href="#获取issue和customerField" class="headerlink" title="获取issue和customerField"></a>获取issue和customerField</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import com.atlassian.jira.issue.Issue</span><br><span class="line">import com.atlassian.jira.issue.ModifiedValue</span><br><span class="line">import com.atlassian.jira.issue.util.DefaultIssueChangeHolder</span><br><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line">def issueManager = ComponentAccessor.getIssueManager()</span><br><span class="line">def issue = issueManager.getIssueObject(&quot;AM-17&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def String myval = &quot;my new text&quot;</span><br><span class="line"></span><br><span class="line">def customFieldManager = ComponentAccessor.getCustomFieldManager()</span><br><span class="line">def textCf2 = customFieldManager.getCustomFieldObjects(issue).find&#123;it.name == &quot;Assigned Group&quot;&#125;</span><br><span class="line">def assignGroupValue = issue.getCustomFieldValue(textCf2)</span><br><span class="line"></span><br><span class="line">return assignGroupValue.class</span><br><span class="line"></span><br><span class="line">// Change the value of customerField</span><br><span class="line">//if (textCf2) &#123;</span><br><span class="line">  //  def changeHolder = new DefaultIssueChangeHolder()</span><br><span class="line">    //textCf2.updateValue(null, issue, new ModifiedValue(issue.getCustomFieldValue(textCf2), myval),changeHolder)</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure><h1 id="获取分类"><a href="#获取分类" class="headerlink" title="获取分类"></a>获取分类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import com.atlassian.jira.issue.*</span><br><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line">import com.atlassian.jira.issue.CustomFieldManager</span><br><span class="line">import java.lang.String</span><br><span class="line"></span><br><span class="line">def category = [:]</span><br><span class="line"></span><br><span class="line">category[&quot;account management&quot;] = [</span><br><span class="line">    &quot;sap ess account-unlock/passwordreset&quot;,</span><br><span class="line">    &quot;fiori account-unlock/passwordreset&quot;,</span><br><span class="line">    &quot;much account-unlock/passwordreset&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">category[&quot;helpdesk cn&quot;] = [</span><br><span class="line">    &quot;windows account-unlock/passwordreset&quot;,</span><br><span class="line">    &quot;homer account-unlock/passwordreset&quot;,</span><br><span class="line">    &quot;wde account-unlock/passwordreset&quot;,</span><br><span class="line">    &quot;other access&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">def getCategory(Map&lt;String,List&gt; category,String type)&#123;</span><br><span class="line">    lowerCaseType = type.toLowerCase()</span><br><span class="line">    for (i in category)&#123;</span><br><span class="line">        for(j in i.value)&#123;</span><br><span class="line">            if (lowerCaseType == j.toString())&#123;</span><br><span class="line">                return i.key</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                return &apos;error category&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ScriptRunner中log信息"><a href="#ScriptRunner中log信息" class="headerlink" title="ScriptRunner中log信息"></a>ScriptRunner中log信息</h1><blockquote><p>See also <a href="https://mraddon.blog/2015/05/27/configure-groovy-scriptrunner-logs/" target="_blank" rel="noopener">ScriptRunner Log intro</a> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.log4j.Category</span><br><span class="line"> </span><br><span class="line">def Category log = Category.getInstance(&quot;com.onresolve.jira.groovy&quot;)</span><br><span class="line">log.setLevel(org.apache.log4j.Level.DEBUG)</span><br><span class="line">log.debug &quot;debug statements&quot;</span><br></pre></td></tr></table></figure><h1 id="自动根据标题确定分类"><a href="#自动根据标题确定分类" class="headerlink" title="自动根据标题确定分类"></a>自动根据标题确定分类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line">import com.atlassian.jira.issue.CustomFieldManager</span><br><span class="line">import com.atlassian.jira.issue.fields.CustomField</span><br><span class="line">import com.atlassian.jira.ComponentManager</span><br><span class="line">import com.atlassian.jira.issue.customfields.manager.OptionsManager</span><br><span class="line">import org.apache.log4j.Category</span><br><span class="line"></span><br><span class="line">// log config</span><br><span class="line">def Category log = Category.getInstance(&quot;com.onresolve.jira.groovy&quot;)</span><br><span class="line">log.setLevel(org.apache.log4j.Level.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def category = [:]</span><br><span class="line">category[&quot;Account Management&quot;] = [</span><br><span class="line">    &quot;SAP ESS Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Fiori Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;MUCH Account-Unlock/PasswordReset&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">category[&quot;Helpdesk CN&quot;] = [</span><br><span class="line">    &quot;Windows Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Homer Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;WDE Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Password Reset - Other Access&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">def getCategory(Map&lt;String,List&gt; category,String type)&#123;</span><br><span class="line">    def upperType = type.toUpperCase()</span><br><span class="line">    for (i in category)&#123;</span><br><span class="line">        for(j in i.value)&#123;</span><br><span class="line">            def catItem = j.toString().toUpperCase()</span><br><span class="line">            if (upperType == catItem)&#123;</span><br><span class="line">                return i.key</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更新CustomerField"><a href="#更新CustomerField" class="headerlink" title="更新CustomerField"></a>更新CustomerField</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line">import com.atlassian.jira.issue.CustomFieldManager</span><br><span class="line">import com.atlassian.jira.issue.util.DefaultIssueChangeHolder</span><br><span class="line">import com.atlassian.jira.issue.ModifiedValue</span><br><span class="line">import com.atlassian.crowd.embedded.api.Group</span><br><span class="line"></span><br><span class="line">//get Issue</span><br><span class="line">def issueManager = ComponentAccessor.getIssueManager()</span><br><span class="line">def am120 = issueManager.getIssueObject(&quot;AM-120&quot;)</span><br><span class="line"></span><br><span class="line">// get CustomerField Manager</span><br><span class="line">def customFieldManager = ComponentAccessor.getCustomFieldManager()</span><br><span class="line"></span><br><span class="line">//get groupManager</span><br><span class="line">def groupManager = ComponentAccessor.getGroupManager()</span><br><span class="line"></span><br><span class="line">//get issue&apos;s group</span><br><span class="line">def textCf2 = customFieldManager.getCustomFieldObjects(am120).find &#123;it.name == &quot;Assigned Group&quot;&#125;</span><br><span class="line"></span><br><span class="line">//create a group object</span><br><span class="line">def hdcn = groupManager.getGroup(&quot;HelpDesk CN&quot;)</span><br><span class="line"></span><br><span class="line">// set group&apos;s value</span><br><span class="line"></span><br><span class="line">if (textCf2) &#123;</span><br><span class="line">    def changeHolder = new DefaultIssueChangeHolder()</span><br><span class="line">    textCf2.updateValue(null, am120, new ModifiedValue(am120.getCustomFieldValue(textCf2), [hdcn]),changeHolder)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设置Components"><a href="#设置Components" class="headerlink" title="设置Components"></a>设置Components</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import com.atlassian.jira.component.ComponentAccessor</span><br><span class="line">import com.atlassian.jira.issue.CustomFieldManager</span><br><span class="line">import com.atlassian.jira.issue.fields.CustomField</span><br><span class="line">import com.atlassian.jira.ComponentManager</span><br><span class="line">import com.atlassian.jira.issue.util.DefaultIssueChangeHolder</span><br><span class="line">import com.atlassian.jira.issue.ModifiedValue</span><br><span class="line">import com.atlassian.crowd.embedded.api.Group</span><br><span class="line">import com.atlassian.jira.project.Project </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def category = [:]</span><br><span class="line">category[&quot;SAP&quot;] = [</span><br><span class="line">    &quot;SAP ESS Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Fiori Account-Unlock/PasswordReset&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">category[&quot;IT Helpdesk&quot;] = [</span><br><span class="line">    &quot;Windows Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Homer Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;WDE Account-Unlock/PasswordReset&quot;,</span><br><span class="line">    &quot;Password Reset - Other Access&quot;,</span><br><span class="line">    &quot;MUCH Account-Unlock/PasswordReset&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">def getCategory(Map&lt;String,List&gt; category,String type)&#123;</span><br><span class="line">    def upperType = type.toUpperCase()</span><br><span class="line">    for (i in category)&#123;</span><br><span class="line">        for(j in i.value)&#123;</span><br><span class="line">            def catItem = j.toString().toUpperCase()</span><br><span class="line">            if (upperType == catItem)&#123;</span><br><span class="line">                return i.key</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def issueManager = ComponentAccessor.getIssueManager()</span><br><span class="line">def issue = issueManager.getIssueObject(&quot;AM-122&quot;)</span><br><span class="line">def comCat = getCategory(category,issue.getSummary())</span><br><span class="line">Project project = issue.getProjectObject()</span><br><span class="line">def component = ComponentAccessor.getProjectComponentManager().findByComponentName(project.getId(),comCat.toString())</span><br><span class="line">issue.setComponent([component]);</span><br></pre></td></tr></table></figure><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Groovy是一门Java系的脚本语言，在Jira系统中，配合ScriptRunner，可以对Jira的ticket实现非常高级的自动化功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="Jira" scheme="http://wittyfans.com/tags/Jira/"/>
    
      <category term="Groovy" scheme="http://wittyfans.com/tags/Groovy/"/>
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
  </entry>
  
  <entry>
    <title>kafka分布式集群部署</title>
    <link href="http://wittyfans.com/coding/kafka%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2.html"/>
    <id>http://wittyfans.com/coding/kafka分布式集群部署.html</id>
    <published>2018-06-08T03:13:19.000Z</published>
    <updated>2018-06-08T03:17:50.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个高吞吐量的消息队列系统，可以达到高效的流处理，借助zookeeper确保了证数据的安全。</p></blockquote><a id="more"></a><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载官网 kafka.2.10-0.8.2.1.tgz 版本</span><br></pre></td></tr></table></figure><h1 id="kafka集群配置"><a href="#kafka集群配置" class="headerlink" title="kafka集群配置"></a>kafka集群配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 传输数据到集群 -&gt; scp -r ***.tgz opt/software/</span><br><span class="line"># 解压 -&gt; /opt/modules</span><br><span class="line"># 配置</span><br><span class="line"></span><br><span class="line">1. Server.propertis文件</span><br><span class="line">-&gt; broker.id -&gt; 1或则2，nod1 -&gt; 1,node2 -&gt; 2</span><br><span class="line">-&gt; port=9092</span><br><span class="line">-&gt; host.name -&gt; userhostname</span><br><span class="line">-&gt; 修改日志路径 -&gt; log.dirs = /tmp/kafka-logs</span><br><span class="line">-&gt; zookeeper.connect=master,node1,node2;</span><br><span class="line">2. 分发到其他机器</span><br><span class="line"></span><br><span class="line">3. 修改其他机器上的server.properties文件</span><br></pre></td></tr></table></figure><h1 id="启动并测试"><a href="#启动并测试" class="headerlink" title="启动并测试"></a>启动并测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. bin/zookeeper-server-start.sh config/zookeeper.properties</span><br><span class="line">2. bin/kafka-server-start.sh config/server.properties</span><br><span class="line">3. 创建 Topic -&gt; &gt; bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br><span class="line">4. 创建生产端和消费端</span><br><span class="line">-&gt; bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br><span class="line">-&gt; bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure><p>创建好了的topic可以在zookeeper的目录下的brokers/topics里面去查看。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li>host.name要改成跟本机对应的hostname,才能在第二、三台机器上启动server</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://kafka.apache.org/quickstart" target="_blank" rel="noopener">Kafka QuickStart</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个高吞吐量的消息队列系统，可以达到高效的流处理，借助zookeeper确保了证数据的安全。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="BigData" scheme="http://wittyfans.com/tags/BigData/"/>
    
      <category term="Kafka" scheme="http://wittyfans.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Windows自动化AutoIT动手玩</title>
    <link href="http://wittyfans.com/coding/Windows%E8%87%AA%E5%8A%A8%E5%8C%96AutoIT%E5%8A%A8%E6%89%8B%E7%8E%A9.html"/>
    <id>http://wittyfans.com/coding/Windows自动化AutoIT动手玩.html</id>
    <published>2018-06-03T08:40:29.000Z</published>
    <updated>2018-06-03T08:44:18.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>AutoID 是一个 Windows 上的一个而自动化软件。可以实现模拟键盘按键、鼠标移动、对窗口的控制，采用类似Basic的语言，很简单，写好之后还可以发布成exe程序，工作中很多机械的步骤终于可以一键搞定了。</p></blockquote><a id="more"></a><h1 id="windows-自动化动手玩"><a href="#windows-自动化动手玩" class="headerlink" title="windows 自动化动手玩"></a>windows 自动化动手玩</h1><p>惯例，来一个HelloWord！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; 这是我的第一个脚本</span><br><span class="line">MsgBox(0, &quot;我的第一个脚本!&quot;, &quot;Hello World!&quot;)</span><br></pre></td></tr></table></figure><p>; 是注释，相当于其他语言中的 //</p><p>这个语句也可以使用函数来调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">; 这是我的第二个脚本 (使用函数)</span><br><span class="line">MsgBox(0, &quot;我的第二个脚本!&quot;, &quot;主脚本: Hello!&quot;)</span><br><span class="line">TestFunc()</span><br><span class="line"></span><br><span class="line">Func TestFunc()</span><br><span class="line">    MsgBox(0, &quot;我的第二个脚本!&quot;, &quot;主脚本: Hello!&quot;)</span><br><span class="line">EndFunc</span><br></pre></td></tr></table></figure><h1 id="识别窗口"><a href="#识别窗口" class="headerlink" title="识别窗口"></a>识别窗口</h1><p>通常我们在窗口上, 能看到的东西大多都是以下控件的一种: 按钮, 列表框, 文本编辑框, 静态文本等. AutoIT可以根据窗口的标题，甚至是内部的文字去识别窗口，进而该应用程序交互，例如，给在记事本中输入一段字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ControlSend(&quot;无标题 - 记事本&quot;, &quot;&quot;,&quot;[CLASS:Edit; INSTANCE:1]&quot;,&quot;This is some text&quot;)</span><br></pre></td></tr></table></figure><p>点击一个窗口中，ID名为254的控件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ControlClick(&quot;我的窗口&quot;, &quot;&quot;,&quot;[ID:254]&quot;)</span><br></pre></td></tr></table></figure><p>为了避免找窗口出错，AutoIT还特地给我们开发了一个识别工具，只要按住Finder Tool中的小球拖到指定窗口上，这个窗口的所有信息都会显示出来，很贴心。</p><p>比如，我首先要运行一个程序(比如记事本)，那么直接输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Run(&quot;notepad.exe&quot;)</span><br></pre></td></tr></table></figure><p>然后等它启动完成，也就是属于active状态(这一步的untitled - Notepad) 可以通过autoIT的工具获得，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WinWaitActive(&quot;Untitled - Notepad&quot;)</span><br></pre></td></tr></table></figure><p>然后直接把 <em>ctr+c</em> 复制过来的东西放进来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$text = ClipGet()</span><br><span class="line">Send($text)</span><br></pre></td></tr></table></figure><p>这样就会在记事本文件中输入你复制过来的文字啦，是不是很简单？如果是那些需要点击的操作，你也可以通过自带的工具获取按钮的id，或者是类名与实例的组合，然后通过ControlClick方法去点击，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ControlClick(&quot;A&quot;,&quot;&quot;,&quot;[CLASS:classname; INSTANCE:1]&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>点击窗口名为A中，类名下实例号码为1的区域</p></blockquote><p>然后当我们输入完成之后，就要对数据进行保存啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WinClose(&quot;Untitled - Notepad&quot;) -&gt; 关掉名为 Untitled - Notepad 的窗口</span><br><span class="line">WinWaitActive(&quot;Notepad&quot;, &quot;Do you want to save&quot;) -&gt; 等待确认窗口的出现</span><br><span class="line">Send(&quot;!n&quot;) -&gt; 点击确定</span><br></pre></td></tr></table></figure><p>需要注意的是，如果你要输出数据，不可以使用A(int)+B(string)的方式，AutoIT会自动对数据进行处理，所以如果你是想要把两个数据按文本结合，你需要使用 <em>&amp;</em> 这个join符号。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;AutoID 是一个 Windows 上的一个而自动化软件。可以实现模拟键盘按键、鼠标移动、对窗口的控制，采用类似Basic的语言，很简单，写好之后还可以发布成exe程序，工作中很多机械的步骤终于可以一键搞定了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
      <category term="windows" scheme="http://wittyfans.com/tags/windows/"/>
    
      <category term="自动化" scheme="http://wittyfans.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="效率" scheme="http://wittyfans.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>初探HBase</title>
    <link href="http://wittyfans.com/coding/%E5%88%9D%E6%8E%A2HBase.html"/>
    <id>http://wittyfans.com/coding/初探HBase.html</id>
    <published>2018-06-03T08:38:26.000Z</published>
    <updated>2018-06-03T08:39:39.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>BigData学习历程之HBase部分。</p></blockquote><a id="more"></a><p>初探 HBase</p><h1 id="HBase能做什么？"><a href="#HBase能做什么？" class="headerlink" title="HBase能做什么？"></a>HBase能做什么？</h1><ol><li>海量数据存储，百万、百亿级别的列与行</li><li>数据量非常大的时候，能非常快速的准实时查询</li></ol><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ol><li>交通、比如船只、车辆的GPS信息</li><li>金融、比如取款、交易、信息</li><li>电商、比如浏览日志、物流</li><li>电话、短信、通话记录等</li></ol><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>容量大，HBase面向列，它的列是动态增加的</li><li>多版本，每一个列的数据可以有多个版本</li><li>稀疏性，空列并不占用存储空间，表可以设计的非常稀疏</li><li>扩展性，底层是依赖于HDFS的，也就是说如果存储空间不够，增加DataNOde就可以了</li><li>高可靠性，依赖HDFS的副本机制</li><li>高性能、LSM数据结构和Rowkey有序排列的架构的独特设计，使得它具有非常高的写入性能</li></ul><h1 id="体系与设计模型"><a href="#体系与设计模型" class="headerlink" title="体系与设计模型"></a>体系与设计模型</h1><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><table><thead><tr><th style="text-align:left">列簇1</th><th style="text-align:left"></th><th style="text-align:left">列簇2</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">列1</td><td style="text-align:left">列2</td><td style="text-align:left">列3</td><td style="text-align:left">列4</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">x</td><td style="text-align:left">x</td><td style="text-align:left">x</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">x</td><td style="text-align:left">x</td><td style="text-align:left">x</td></tr></tbody></table><p>在HBase的数据模型中：</p><ol><li>一张表的列簇不会超过五个</li><li>每个列簇中的列书没有限制</li><li>列只有插入数据后存在，是动态增加的</li><li>列在列簇中是有序的</li></ol><h2 id="与关系数据库的对比"><a href="#与关系数据库的对比" class="headerlink" title="与关系数据库的对比"></a>与关系数据库的对比</h2><table><thead><tr><th style="text-align:left">HBase</th><th style="text-align:left">关系数据库</th></tr></thead><tbody><tr><td style="text-align:left">列动态增加</td><td style="text-align:left">不支持</td></tr><tr><td style="text-align:left">数据自动切分</td><td style="text-align:left">不支持</td></tr><tr><td style="text-align:left">高并发读写</td><td style="text-align:left">不支持</td></tr><tr><td style="text-align:left">不支持条件查询</td><td style="text-align:left">支持</td></tr></tbody></table><h1 id="设计模型"><a href="#设计模型" class="headerlink" title="设计模型"></a>设计模型</h1><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><table><thead><tr><th style="text-align:left">列簇1</th><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left">列簇2</th><th style="text-align:left"></th><th></th><th>列簇3</th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:left">col</td><td style="text-align:left">col</td><td style="text-align:left">col</td><td style="text-align:left">col</td><td style="text-align:left">col</td><td>col</td><td>col</td><td>col</td><td>col</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td></tr></tbody></table><p>col在创建的时候，是不需要指定的，只需要指定列簇。</p><h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><p>把安装文件放到 <em>opt/softwares/</em> 下面。<em> chmod U+X</em> 更改权限。</p><p>再解压到 <em>modules</em> 目录下:</p><p><em>tar -zxf filename</em></p><p>检查一下系统空间 <em>df</em></p><p>在HBase中，有一个Region的划分，可以把他理解为关系数据库中的分区，每一个Regiono中有一个regionservier的服务，统一由Master管理，这个模式也是依赖于HDFS+Zookeeper来完成的。</p><table><thead><tr><th style="text-align:left">Node Name</th><th style="text-align:left">Master</th><th style="text-align:left">Zookeeper</th><th style="text-align:left">RegiinServer</th></tr></thead><tbody><tr><td style="text-align:left">Node-A</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td><td style="text-align:left">no</td></tr><tr><td style="text-align:left">Node-B</td><td style="text-align:left">backup</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td></tr><tr><td style="text-align:left">Node-C</td><td style="text-align:left">no</td><td style="text-align:left">yes</td><td style="text-align:left">yes</td></tr></tbody></table><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd hbase</span><br><span class="line">hbase-env.sh</span><br><span class="line">export JAVA_HOME = ***</span><br><span class="line">export HBASE_MANAGES_ZK = false</span><br></pre></td></tr></table></figure><h2 id="hbase配置文件"><a href="#hbase配置文件" class="headerlink" title="hbase配置文件"></a>hbase配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim hbase-site.xml</span><br><span class="line"></span><br><span class="line">hbase.rootdir -&gt; hdfs://master:8020/hbase</span><br><span class="line">hbase.cluster.distributed -&gt; true</span><br><span class="line">hbase.zookeeper.quorum-&gt; master;node1;node2;</span><br></pre></td></tr></table></figure><p>切换成之前的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mv hadoop/ hadoop-ha</span><br><span class="line">mv dist-hadoop hadoop</span><br><span class="line">cd data/</span><br><span class="line">mv tmp/ tmp-ha</span><br><span class="line">mv dist-tmp/ tmp</span><br><span class="line"></span><br><span class="line"># 第二台和第三台同理</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1: hadoop-daemon.sh start datanode</span><br><span class="line">2: hadoop-daemon.sh start datanode</span><br><span class="line">3: hadoop-daemon.sh start datanode</span><br><span class="line"></span><br><span class="line">1: zookeeper*.start</span><br><span class="line">2: zookeeper*.start</span><br><span class="line">3: zookeeper*.start</span><br><span class="line"></span><br><span class="line">1: hbase-daemon.sh start master</span><br><span class="line">1: hbase-daemon.sh start regionserver</span><br><span class="line"></span><br><span class="line">2: hbase-daemon.sh start regionserver</span><br><span class="line">3: hbase-daemon.sh start regionserver</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 第一步要链接（客户端和服务器的）-&gt; hbase shell</span><br><span class="line">2. 查看表 -&gt; list</span><br><span class="line">3. 帮助 -&gt; help </span><br><span class="line">4. 创建表 -&gt; create &apos;test&apos;,&apos;info&apos;</span><br><span class="line">5. 加入数据 :</span><br><span class="line">-&gt; </span><br><span class="line">put &apos;test&apos;,&apos;001&apos;,&apos;info:username&apos;,&apos;wittyfans&apos;</span><br><span class="line">scan &apos;test&apos;</span><br><span class="line">put &apos;test&apos;,&apos;0001&apos;,&apos;info:age&apos;,&apos;30&apos;</span><br><span class="line">put &apos;test&apos;,&apos;0001&apos;,&apos;info:sex&apos;,&apos;male&apos;</span><br><span class="line">6. 禁用 -&gt; disable &apos;test&apos;</span><br><span class="line">7. 删除 -&gt; drop &apos;test&apos; (禁用后才能删除)</span><br></pre></td></tr></table></figure><h2 id="Master-Backup配置"><a href="#Master-Backup配置" class="headerlink" title="Master-Backup配置"></a>Master-Backup配置</h2><p>这个Master-Backup，其实就是相当于HA的实现，实现一个故障备份机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 创建配置文件 -&gt; touch backup-masters</span><br><span class="line">2. 编辑 -&gt; vi backup-masters</span><br><span class="line"># 把二号机器作为备用</span><br><span class="line">node2</span><br><span class="line"></span><br><span class="line"># 分发到别的机器上去</span><br><span class="line">3. 启动测试 -&gt; start-hbase.sh</span><br></pre></td></tr></table></figure><p>应该可以看到两个master，一个是standby一个是active.</p><h1 id="基于业务创建表结构"><a href="#基于业务创建表结构" class="headerlink" title="基于业务创建表结构"></a>基于业务创建表结构</h1><h2 id="下载元数据"><a href="#下载元数据" class="headerlink" title="下载元数据"></a>下载元数据</h2><ul><li><a href="http://www.sogou.com/labs/resource/q.php" target="_blank" rel="noopener">搜狗实验室-用户查询日志</a></li></ul><p>根据元数据创建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br><span class="line">create &apos;weblogs&apos;,&apos;info&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;BigData学习历程之HBase部分。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="BigData" scheme="http://wittyfans.com/tags/BigData/"/>
    
      <category term="HBase" scheme="http://wittyfans.com/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop2.x HA架构学习与配置</title>
    <link href="http://wittyfans.com/coding/Hadoop2-x-HA%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E9%85%8D%E7%BD%AE.html"/>
    <id>http://wittyfans.com/coding/Hadoop2-x-HA架构学习与配置.html</id>
    <published>2018-05-29T14:57:17.000Z</published>
    <updated>2018-05-29T14:58:13.529Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HA，即一套宕机解决方案，用来实现分布式系统中的自动故障转移。</p></blockquote><a id="more"></a><h1 id="HA是什么？"><a href="#HA是什么？" class="headerlink" title="HA是什么？"></a>HA是什么？</h1><blockquote><p>我们说DataNode存储数据, NameNode是目录，而yarn中,ResourceManager, 相当于是任务的总指挥，项目管理，那么这个HDFS中的NameNode和Yarn中的ResourceManager其实是非常重要的，如果一台挂了，那么整个集群都会没法提供服务，HA就是为这种故障提供一套解决方案。</p></blockquote><h1 id="HA原理"><a href="#HA原理" class="headerlink" title="HA原理"></a>HA原理</h1><p>在NameNode的目录更新的时候，会在本地的edits和fsImage中保存更新记录，所以我们可以设置多个NameNode，然后设置一个中间节点去保存这个edits和fsImage文件，这样每个NameNode有更新，这个中间节点就会记录，确保一台NameNode宕机的时候能及时的把数据转移到其他Node上去。</p><p>这个中间节点就叫做JournalNode，它也有副本，即多份Namenode的日志。</p><h1 id="HDFS-HA配置"><a href="#HDFS-HA配置" class="headerlink" title="HDFS HA配置"></a>HDFS HA配置</h1><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>先看一下之前的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NameNode</span><br><span class="line">DataNode1 DataNode2 DataNode3</span><br></pre></td></tr></table></figure><p>规划了HA的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NameNode  NameNode</span><br><span class="line">DataNode1 DataNode2 DataNode3</span><br><span class="line">Journalnode Journalnode Journalnode</span><br></pre></td></tr></table></figure><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>备份原来的配置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -r hadoop/ dist-hadoop</span><br><span class="line">mv tmp/ dist-tmp</span><br></pre></td></tr></table></figure><p>再在原来的目录中重新创建tmp文件夹。</p><h2 id="配置hdfs-site-xml"><a href="#配置hdfs-site-xml" class="headerlink" title="配置hdfs-site.xml"></a>配置hdfs-site.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. dfs.nameservice -&gt; 取个名字</span><br><span class="line">2. dfs.ha.namenodes.上面的名字 -&gt;nn1,nn2</span><br><span class="line">3. rpc.address.ns.nn1 -&gt; hostname:8020</span><br><span class="line">4. rpc.address.ns.nn2 -&gt; hostname:8020</span><br><span class="line">5. http-address.ns.nn1 -&gt; hostname:50070</span><br><span class="line">6. http-address.ns.nn2 -&gt; hostname:50070</span><br><span class="line">7. Shared.edits.dir -&gt; qjournal://master:8485;node1:8485;node2:8485;</span><br><span class="line">8. dfs.journalnode.edits.dir -&gt; /opt/modules/hadoop/data/jn</span><br><span class="line">9. failover.proxy.provider.mycluster -&gt; : 设置成默认值即可</span><br><span class="line">10. Fecing.methods -&gt; sshfence : 隔离机制</span><br><span class="line">11. Private-key-files -&gt; hadoop : 用户名</span><br></pre></td></tr></table></figure><h2 id="配置core-site-xml"><a href="#配置core-site-xml" class="headerlink" title="配置core-site.xml"></a>配置core-site.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. fs.defaultFS -&gt; hdfs://ns</span><br></pre></td></tr></table></figure><h2 id="配置其他机器"><a href="#配置其他机器" class="headerlink" title="配置其他机器"></a>配置其他机器</h2><p>目录与配置都与第一台一样。</p><h1 id="HDFS中HA启动与测试"><a href="#HDFS中HA启动与测试" class="headerlink" title="HDFS中HA启动与测试"></a>HDFS中HA启动与测试</h1><h2 id="启动HA"><a href="#启动HA" class="headerlink" title="启动HA"></a>启动HA</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 启动1,2,3机器 -&gt; sbin/hadoop-daemon.sh start journalnode</span><br><span class="line">2. 格式化 -&gt; bxn/hdfs namenode -format</span><br><span class="line">3. 重启NameNode</span><br><span class="line">4. 在nn2上，同步nn1的原数据信息 -&gt; bin/hdfs namenode -bootstrpStandby</span><br><span class="line">5. 启动nn2</span><br><span class="line">6. 将nn1的状态改为active -&gt; bin/hdfs haadmin -transitionToActive nn1</span><br><span class="line">7. 启动测试 -&gt;</span><br></pre></td></tr></table></figure><h2 id="测试人工故障转移"><a href="#测试人工故障转移" class="headerlink" title="测试人工故障转移"></a>测试人工故障转移</h2><p>测试的原理是，先上传一个文件到DataNode，然后这个时候把NN1干掉，再去取数据，观察其是否会自动切换NameNode.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 创建目录 -&gt; bin/hdfs dfs -mkdir -p /path/</span><br><span class="line">2. 上传目录 -&gt; bin/hdfs dfs -put /path/</span><br><span class="line">3. 尝试读取文件 -&gt; hdfs dfs -text /user/kfk/data/filename</span><br><span class="line">4. 干掉nn1观察 -&gt; jps:21319 -&gt; kill -8 21317</span><br><span class="line">5. Nn2改成active -&gt; hdfs haadmin -transitionToActive nn2</span><br><span class="line">--forceactive</span><br><span class="line">6. 再从nn1尝试读取文件观察是否成功 -&gt; hdfs dfs -text /user/kfk/data/filename</span><br></pre></td></tr></table></figure><p>以上的切换的过程，是人工手动切换的方式，但如果借助Zookeeper，就可以实现自动故障转移了。</p><h2 id="自动故障转移"><a href="#自动故障转移" class="headerlink" title="自动故障转移"></a>自动故障转移</h2><p>首先需要配置hdfs-site文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. dfs.ha.automic-failover.enabled.youmaster -&gt; true</span><br><span class="line">2. ha.zookeeper.quorum -&gt; master:2181,node1:2181,node:2181</span><br></pre></td></tr></table></figure><p>停掉所有服务，然后启动集群的zookeeper.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. zkserver.sh start</span><br><span class="line">2. 初始化HA再Zookeeper中状态bin/hdfs zkfc -formatZK</span><br><span class="line">3. start-dfs.sh</span><br><span class="line">4. 各个机器上启动 -&gt; Hadooop-daemon.sh start zkfc</span><br></pre></td></tr></table></figure><p>配置完成之后，启动集群后，如果有多个nanonode，系统会自动帮我们选一个active。</p><p>如果ZKFC没有启动起来，可以去log里面找 <em>zkfc-bigdata-pro02.master.logs</em> 日志。</p><p>配置完成之后，HDFS中的HA分布如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">namenode    namenode</span><br><span class="line">datanode    datanode    datanode</span><br><span class="line">journalnode journalnode journalnode</span><br><span class="line">zkfc        zkfc</span><br></pre></td></tr></table></figure><h1 id="Yarn中HA"><a href="#Yarn中HA" class="headerlink" title="Yarn中HA"></a>Yarn中HA</h1><h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>对于Yarn来说，ResourceManager是最重要的，所以需要多台ResourceManager，实现一台RM宕机后，可以自动切换到另一台RM.</p><p>同样，Yarn中实现HA，也是借助于Zookeeper。</p><p>先来看一下规划:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RM RM</span><br><span class="line">NM NM NM</span><br></pre></td></tr></table></figure><h2 id="Yarn-site配置"><a href="#Yarn-site配置" class="headerlink" title="Yarn-site配置"></a>Yarn-site配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 删除yarn.resourcemanager.hostname项，因为多台rm之后就不需要再指定rm了</span><br><span class="line">2. yarn.resourcemanager.ha.enabled -&gt; true</span><br><span class="line">3. cluster-id -&gt; rs</span><br><span class="line">4. ha.rm-ids -&gt; rm1,rm2</span><br><span class="line">5. hostname.rm1 -&gt; yourhostname</span><br><span class="line">6. hostname.rm2 -&gt; yourhostname</span><br><span class="line">7. zk.address -&gt;master:2181;node1:2181;node2:2181</span><br><span class="line">8. recovery.enabled -&gt; true</span><br><span class="line">9. 配置数据恢复为zookeeper: *.store.class -&gt; default_config</span><br></pre></td></tr></table></figure><p>按照这个顺序配置，再分发到其他的节点，然后就可以测试了。</p><h2 id="Yarn-HA-启动与测试"><a href="#Yarn-HA-启动与测试" class="headerlink" title="Yarn HA 启动与测试"></a>Yarn HA 启动与测试</h2><ol><li>启动RM两个</li><li>启动NM三个</li><li>测试 <em>MapReduce WordCount</em> 程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. yarn-daemon.sh start resourcemanager (in nn1 and nn2)</span><br><span class="line">2. yarn-daemon.sh start nodemanager(in master nd1 nd2)</span><br></pre></td></tr></table></figure><p>测试 <em>MapReduce</em> 就不赘述啦，至此 <em>HA</em> 在 <em>Hadoop</em> 中的配置结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HA，即一套宕机解决方案，用来实现分布式系统中的自动故障转移。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="hadoop" scheme="http://wittyfans.com/tags/hadoop/"/>
    
      <category term="bigdata" scheme="http://wittyfans.com/tags/bigdata/"/>
    
      <category term="HA" scheme="http://wittyfans.com/tags/HA/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell批量改密码</title>
    <link href="http://wittyfans.com/coding/PowerShell%E6%89%B9%E9%87%8F%E6%94%B9%E5%AF%86%E7%A0%81.html"/>
    <id>http://wittyfans.com/coding/PowerShell批量改密码.html</id>
    <published>2018-05-28T15:05:49.000Z</published>
    <updated>2018-05-28T15:11:57.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近接了个活，公司有1200多个人的域账号密码需要更改，遂自己写了个批量的脚本实现，效率美滋滋。</p></blockquote><a id="more"></a><p>首先是要去拿到用户的信息，然后改一个随机的密码，再捞出用户的手机号码，把密码发送出去。</p><p>用户的账号我已经有了，那就把他们放到文本文件里面，直接就可以把里面的信息取出来，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users = Get-Content $userListPath</span><br></pre></td></tr></table></figure><p>但发现每次写死路径很不方便，改来改去的，那就直接调用系统选择文件对话框嘛，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Add-Type -AssemblyName System.Web</span><br><span class="line"></span><br><span class="line">Function Get-FileName($initialDirectory)</span><br><span class="line">&#123;</span><br><span class="line">    [System.Reflection.Assembly]::LoadWithPartialName(&quot;System.windows.forms&quot;) | Out-Null</span><br><span class="line">    </span><br><span class="line">    $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog</span><br><span class="line">    $OpenFileDialog.initialDirectory = $initialDirectory</span><br><span class="line">    $OpenFileDialog.filter = &quot;TXT (*.txt)| *.txt&quot;</span><br><span class="line">    $OpenFileDialog.ShowDialog() | Out-Null</span><br><span class="line">   return $OpenFileDialog.FileName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这个函数，调用一次就会出现选择文件对话框。通过$OpenFileDialog.filter来控制，可以自定义要过滤的文件类型，选择完了之后，默认会输出成功与失败的提示。我不想看到这个提示，就直接在后面加个管道out-null了，选择好文件，该函数就会返回该文件的路径，拿到这个路径，就可以用get-content拿到其中的名字了。</p><p>拿到名字得先处理一下，因为在域里面名字中间有空格容易出错，得先把它们的空格替换成.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$UserName = $rawUserName -replace &quot; &quot;,&quot;.&quot;</span><br></pre></td></tr></table></figure><p>拿到名字了，继续捞其他信息, 首先是名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$aduser = get-aduser -server yourdomain.com $UserName</span><br></pre></td></tr></table></figure><p>然后是手机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$aduserPhone = (Get-ADUser -Server server.com $UserName -Properties mobile | select mobile).mobile</span><br></pre></td></tr></table></figure><p>接下先创建凭证，这样才能改密码，因为脚本还要给同事用嘛，把密码直接写进去还是不太好，所以得加密。</p><p>我写了个小脚本，把输入密码进去，就会把生成好的加密字符串复制到剪贴板，很方便，下面是代码，复制保存为ps1后缀的文件就可以用啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Add-Type -AssemblyName System.Windows.Forms</span><br><span class="line"></span><br><span class="line">function Read-MessageBoxDialog</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    param ([string]$Message,</span><br><span class="line"></span><br><span class="line">        [string]$WindowTitle,</span><br><span class="line"></span><br><span class="line">        [System.Windows.Forms.MessageBoxButtons]$Buttons = [System.Windows.Forms.MessageBoxButtons]::OK,</span><br><span class="line"></span><br><span class="line">        [System.Windows.Forms.MessageBoxIcon]$Icon = [System.Windows.Forms.MessageBoxIcon]::None)</span><br><span class="line"></span><br><span class="line">    Add-Type -AssemblyName System.Windows.Forms</span><br><span class="line"></span><br><span class="line">    return [System.Windows.Forms.MessageBox]::Show($Message, $WindowTitle, $Buttons, $Icon)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">write-host &quot;请输入原始密码：↓↓↓↓&quot;</span><br><span class="line">$inputPWD = Read-Host | ConvertTo-SecureString -AsPlainText -Force</span><br><span class="line">$encryptedPWD = $inputPWD | ConvertFrom-SecureString</span><br><span class="line">[Windows.Forms.Clipboard]::SetText($encryptedPWD)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Read-MessageBoxDialog -Message &quot;已拷贝到剪贴板&quot; -WindowTitle &quot;安全密码制作工具&quot; -Buttons OK -Icon Information</span><br></pre></td></tr></table></figure><p>拿到密码之后，就可以制作自己的凭证了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$User = &quot;yourAccount&quot;</span><br><span class="line">$Pwd = &quot;加密密码&quot; | ConvertTo-SecureString</span><br><span class="line">$Credential = New-Object -TypeName &quot;System.Management.Automation.PSCredential&quot; -ArgumentList $User, $Pwd</span><br></pre></td></tr></table></figure><p>需要注意的是，本机制作的凭证，只可以在自己的机器上用，如果要在别的机器用，需要解锁，这个有点复杂，挖个坑以后再研究。</p><p>接下来就可以改密码了，我们先把随机密码准备好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$PasswordLength = 16</span><br><span class="line">$SpecialCharCount = 8</span><br><span class="line">$Password =[System.Web.Security.Membership]::GeneratePassword($PasswordLength, $SpecialCharCount)</span><br></pre></td></tr></table></figure><p>直接一个for循环遍历所有名单，更改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Get-ADUser -Server wittyfans.com -Identity $UserName | Set-ADAccountPassword -NewPassword $SecPaswd -Server wittyfans.com -Credential $Credential </span><br><span class="line">        </span><br><span class="line">Set-ADUser -Identity $UserName -ChangePasswordAtLogon $false -Server wittyfans.com -Credential $Credential |Unlock-ADAccount -Verbose -Server wittyfans.com -Credential $Credential</span><br></pre></td></tr></table></figure><p>这个语句会直接给用户设一个新密码，并解锁他的账户。需要把其中的wittyfans.com变成你们自己的配置，其中有一个步骤需要注意的是，如果你去拿用户的信息，但这个名字错了，拿不到的话，会直接报错造成程序中断，这个时候得用try-catch语句处理，然后设置一个标记，通过这个标记去判断域中是否有这个用户。</p><p>最后就是输出数据啦，直接把所有数据保存起来，用out-file语句就可以保存成文本文件了，加上-Append，这样才不会把数据重写哦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Out-File -FilePath .\Desktop\ResetedPassWord.txt -Append</span><br></pre></td></tr></table></figure><p>完工！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近接了个活，公司有1200多个人的域账号密码需要更改，遂自己写了个批量的脚本实现，效率美滋滋。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
      <category term="PowerShell" scheme="http://wittyfans.com/tags/PowerShell/"/>
    
      <category term="AD" scheme="http://wittyfans.com/tags/AD/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper安装、配置、启动</title>
    <link href="http://wittyfans.com/coding/Zookeeper%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E5%90%AF%E5%8A%A8.html"/>
    <id>http://wittyfans.com/coding/Zookeeper安装、配置、启动.html</id>
    <published>2018-05-28T14:18:59.000Z</published>
    <updated>2018-05-28T14:20:34.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>An effort to develop and maintain an open-source server which enables highly reliable distributed coordination.</p></blockquote><a id="more"></a><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>要找特定的版本，可以去这个两个链接 </p><ul><li>官方归档<a href="http://archive.apache.org/dist/" target="_blank" rel="noopener"> 🔗</a> </li><li>CDN <a href="http://archive.cloudera.com/cdh5/cdh/5/" target="_blank" rel="noopener">🔗</a></li></ul><p>CDN版本更多的考虑了兼容性的问题，建议尽可能用CDN的版本，下载后，scp到opt/softwares/,然后解压，如果发现显示是红色的，可以使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chmod u+x filename</span><br></pre></td></tr></table></figure><p>来使它具备可执行的权限，然后解压 <em>tar -zxf zookeeper -C /path/</em> 到modules文件夹中去。</p><p>然后进入，主要有几个目录，bin, sbin, 等，跟hadoop是差不多的。</p><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><p>配置一般都是在conf目录下面，里面有三个文件:</p><ul><li>configuration.xsl</li><li>log4j.properties (日志)</li><li>zoo_sample.cfg (主要需要配置的)</li></ul><p>首先把zoo_sample.cfg改名成zoo.cfg, 进去配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime #心跳时间</span><br><span class="line">initLimit #初始化时间最久能忍多久，心跳时间为单位</span><br><span class="line">syneLimit #平时发消息延迟能忍多久 </span><br><span class="line">dataDir #保存数据的目录</span><br><span class="line">clientPort #客户端链接zookeeper服务器的端口，zookeeper会监听这个端口接受客户端请求</span><br><span class="line"># 把三个节点的信息添加进来：</span><br><span class="line">server.1=host1name:2888:3888</span><br><span class="line">server.2=host2name:2888:3888</span><br><span class="line">server.3=host3name:2888:3888</span><br></pre></td></tr></table></figure><p>创建一个文件夹，路径为 <em>opt/modules/zookeeper/zkData</em>，然后在zkData文件夹中，创建一个名为 <em>myid</em> 的文件，并在其中标示为对应的id，master为1，然后分发到其他机器，再修改相应的 <em>myid</em> 文件，node1为2，node2为3.</p><p>这样，zookeeper就配置完成了。</p><h1 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">zkserver.sh start</span><br><span class="line"></span><br><span class="line"># 链接（需要把全部节点启动方可链接成功）</span><br><span class="line">zkcli.sh</span><br></pre></td></tr></table></figure><p>启动完成之后，集群会自动选举出一位老大作为tl，如果只有1台机器，会连接失败，因为集群中，可损坏的机器为N，它要满足一个算法： <em>2N+1</em> ，也就是说最少要有三台机器，如果只有一台启动，那集群会以为其他两台机器损坏了。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>链接成功后，就进入到了zookeeper终端界面，可以创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 创建 Create /foldername</span><br><span class="line"># 查看 get /foldername </span><br><span class="line"># 查看tl和flow zkserver.sh status</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>官方归档<a href="http://archive.apache.org/dist/" target="_blank" rel="noopener"> 🔗</a> </li><li>CDN <a href="http://archive.cloudera.com/cdh5/cdh/5/" target="_blank" rel="noopener">🔗</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;An effort to develop and maintain an open-source server which enables highly reliable distributed coordination.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="bigdata" scheme="http://wittyfans.com/tags/bigdata/"/>
    
      <category term="zookeeper" scheme="http://wittyfans.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>运行Hadoop WordCount 出错</title>
    <link href="http://wittyfans.com/coding/%E8%BF%90%E8%A1%8CHadoop-WordCount-%E5%87%BA%E9%94%99.html"/>
    <id>http://wittyfans.com/coding/运行Hadoop-WordCount-出错.html</id>
    <published>2018-05-22T04:48:36.000Z</published>
    <updated>2018-05-22T04:52:17.176Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一个WordCount程序竟然跑失败了，:(。</p></blockquote><a id="more"></a><p>配置好系统环境之后，准备开始跑第一个WordCount任务，jps后,各机器的输出如下：</p><p>Master:</p><ul><li>NameNode</li><li>DataNode</li><li>ResourceManager</li><li>NodeManager</li><li>jobHistoryServer</li><li>jps</li></ul><p>Node1:</p><ul><li>DataNode</li><li>NodeManager</li></ul><p>Node2:</p><ul><li>DataNode</li><li>NodeManager</li></ul><p>服务全都正常，于是开始执行WordCount,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/yarn jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.0.0.jar wordcount /user/master/data/wc.input /user/master/data/result</span><br></pre></td></tr></table></figure><p>失败，提示: <em>Exception from container launch, pre launch.err</em>,去logs里面看，也没什么异常。</p><p>Google了一圈，没找到什么资料，去yarn的追踪界面，发现一个异常，找不到或无法加载主类，<em>**</em>。</p><p>于是怀疑是路径的问题，马上cd到bin目录下，</p><p>执行Hadoop Classpath，获取一个输出，并将该输出内容设置为Yarn-siet.xml 中Yarn.application.classpath的值。</p><p>查了一下资料，发现，</p><p><em>这个配置为map、reduce task指定其所需要的hadoop包存在与本地的什么位置，以便在task启动时，能根据该配置找到所需要的hadoop相关class。 如果配置错误，就会class not found（就是你的错误中的那个中文：错误: 找不到或无法加载主类</em></p><p>成功解决 :)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一个WordCount程序竟然跑失败了，:(。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="hadoop" scheme="http://wittyfans.com/tags/hadoop/"/>
    
      <category term="bigdata" scheme="http://wittyfans.com/tags/bigdata/"/>
    
      <category term="yarn" scheme="http://wittyfans.com/tags/yarn/"/>
    
      <category term="wordcount" scheme="http://wittyfans.com/tags/wordcount/"/>
    
  </entry>
  
  <entry>
    <title>mysql使用笔记</title>
    <link href="http://wittyfans.com/coding/mysql%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0.html"/>
    <id>http://wittyfans.com/coding/mysql使用笔记.html</id>
    <published>2018-04-24T09:23:35.000Z</published>
    <updated>2018-12-29T03:36:10.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>针对常用的一些操作与命令，做个笔记，仅供参考 👨‍💻</p></blockquote><a id="more"></a><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 查看数据库版本</span><br><span class="line">SELECT VERSION();</span><br><span class="line"></span><br><span class="line"># 配置my.cnf文件</span><br><span class="line">my.cnf可能在电脑上的不同的位置，例如/etc/my.cnf,或/user/local/mysql/my.cnf,我的电脑就是在第二个目录。如果没找到该文件，需要手动创建，这里给一个example模版：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建表</span><br><span class="line">create table issues(NO varchar(25),summary TINYTEXT,description TEXT,priority varchar(20),creator varchar(35),assignee varchar(35),created datetime,updated datetime,status varchar(25));</span><br><span class="line"></span><br><span class="line"># 数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"># 切换库</span><br><span class="line">use databasesname;</span><br><span class="line"></span><br><span class="line"># 显示库构造</span><br><span class="line">describe databasesname；</span><br><span class="line"></span><br><span class="line"># 显示表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line"># 过滤</span><br><span class="line"></span><br><span class="line">SELECT DISTINCT</span><br><span class="line">    columns</span><br><span class="line">FROM</span><br><span class="line">    table_name</span><br><span class="line">WHERE</span><br><span class="line">    where_conditions;</span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line">1. select * from worklog where name = &quot;Fan.ZhangFZ&quot;;</span><br><span class="line">2. select num,count(num) from worklog;</span><br><span class="line">3. select num,count(num) from worklog group by num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看表信息</span><br><span class="line">describe table_name;</span><br></pre></td></tr></table></figure><h1 id="导出为CSV"><a href="#导出为CSV" class="headerlink" title="导出为CSV"></a>导出为CSV</h1><p>secure-file-priv参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的,ure_file_priv的值为null ，表示限制mysqld 不允许导入|导出,可以通过<br>show variables like ‘%secure%’;/show global variables like ‘%secure%’; 来查看它的值,如需修改，打开my.ini文件</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;针对常用的一些操作与命令，做个笔记，仅供参考 👨‍💻&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="big data" scheme="http://wittyfans.com/tags/big-data/"/>
    
      <category term="sql" scheme="http://wittyfans.com/tags/sql/"/>
    
      <category term="mysql" scheme="http://wittyfans.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop The Effective Guide 笔记</title>
    <link href="http://wittyfans.com/coding/Hadoop%20The%20Effective%20Guide%20%E7%AC%94%E8%AE%B0.html"/>
    <id>http://wittyfans.com/coding/Hadoop The Effective Guide 笔记.html</id>
    <published>2018-04-16T08:49:29.000Z</published>
    <updated>2018-04-17T03:58:43.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Big data is here, Let’s learn how to store and analyze it.</p></blockquote><a id="more"></a> <h1 id="Hadoop-The-Effective-Guide-Notes"><a href="#Hadoop-The-Effective-Guide-Notes" class="headerlink" title="Hadoop The Effective Guide Notes"></a><em>Hadoop The Effective Guide</em> Notes</h1><h1 id="Meet-Hadoop"><a href="#Meet-Hadoop" class="headerlink" title="Meet Hadoop"></a>Meet Hadoop</h1><ul><li>作者主要说明，大数据的时代已经到来，而且时时刻刻影响着我们的生活，对于这么庞大的数据。</li><li>The good news is that big data is here. The bad news is that we are struggling to store and analyze it.</li><li>A common way of avoiding data loss is through replication</li></ul><h1 id="What’s-in-this-book"><a href="#What’s-in-this-book" class="headerlink" title="What’s in this book?"></a>What’s in this book?</h1><ul><li>Chapter 1 a high-level introduction to Hadoop</li><li>Chapter 2 provides an introduction to MapReduce. </li><li>Chapter 3 looks at Hadoop filesystems, and in particular HDFS, in depth. </li><li>Chapter 4 discusses YARN, Hadoop’s cluster resource management system.</li><li>Chapter 5 covers the I/O building blocks in Hadoop: data integrity, compression, serialization, and file-based data structures.</li></ul><h2 id="关于HBase"><a href="#关于HBase" class="headerlink" title="关于HBase"></a>关于HBase</h2><ul><li>A component to provide online access was HBase, a key-value store that uses HDFS for its underlying storage</li><li>Provides both online read/write access of individual rows and batch operations for reading and writing data in bulk, making it a good solution for building applications on</li></ul><h2 id="关于YARN"><a href="#关于YARN" class="headerlink" title="关于YARN"></a>关于YARN</h2><p>即，Yet Another Resource Negotiator，YARN is a cluster resource management system, which allows any distributed program (not just MapRe‐duce) to run on data in a Hadoop cluster.</p><h2 id="对比其他的系统"><a href="#对比其他的系统" class="headerlink" title="对比其他的系统"></a>对比其他的系统</h2><p>下面介绍一下Hadoop特有的特性</p><ol><li>关系型数据库管理系统<br>对于数据，我们要知道，seek time is improving more slowly than transfer rate.关于影响数据检索效率的因素可以看<a href="https://segmentfault.com/a/1190000002884077" target="_blank" rel="noopener">这篇文章</a></li><li>Grid Computing</li><li>Volunteer Computing</li></ol><h2 id="Hadoop简介"><a href="#Hadoop简介" class="headerlink" title="Hadoop简介"></a>Hadoop简介</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ol><li><p>bin：Hadoop最基本的管理脚本和使用脚本的目录，这些脚本是sbin目录下管理脚本的基础实现，用户可以直接使用这些脚本管理和使用Hadoop。</p></li><li><p>sbin：Hadoop管理脚本所在的目录，主要包含HDFS和YARN中各类服务的启动/关闭脚本。</p></li><li><p>etc：Hadoop配置文件所在的目录，包括core-site.xml、hdfs-site.xml、mapred-site.xml等从Hadoop1.0继承而来的配置文件和yarn-site.xml等Hadoop2.0新增的配置文件。</p></li><li><p>本地平台相关库（include、lib、libexec），include：对外提供的编程库头文件（具体动态库和静态库在lib目录中），这些头文件均是用C++定义的，通常用于C++程序访问HDFS或者编写MapReduce程序。lib：该目录包含了Hadoop对外提供的编程动态库和静态库，与include目录中的头文件结合使用。libexec：各个服务对用的shell配置文件所在的目录，可用于配置日志输出、启动参数（比如JVM参数）等基本信息。</p></li><li><p>share：Hadoop各个模块编译后的jar包所在的目录。</p></li></ol><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h1><p>什么是一个MapReduce的作业呢？一个完整的作业包括了输入数据、MapReduce程序和配置信息。Hadoop会把作业分为若干个小作业，其中包含两类任务：map任务和reduce任务。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>查看java的jdk路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home</span><br></pre></td></tr></table></figure><p>编辑别名</p><ol><li>vim ~/.bash_profile</li><li>再运行 source ~/.bash_profile</li><li>source 或小数点 （.） 可以将配置文件的内容读进来目前的 shell 环境中,不需要登出。</li></ol><p>参考：</p><ul><li><a href="http://hanslen.me/2018/01/19/How-to-install-Hadoop-on-macOS-High-Sierra/" target="_blank" rel="noopener">Install Hadoop</a></li></ul><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alias hstart=&quot;/usr/local/Cellar/hadoop/2.8.2/sbin/start-all.sh&quot;</span><br><span class="line"></span><br><span class="line">alias hstop=&quot;/usr/local/Cellar/hadoop/2.8.2/sbin/stop-all.sh&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JobTracker:http://localhost:8088</span><br><span class="line"></span><br><span class="line">Specific Node Information:http://localhost:8042, you will see</span><br></pre></td></tr></table></figure><h1 id="Hadoop节点"><a href="#Hadoop节点" class="headerlink" title="Hadoop节点"></a>Hadoop节点</h1><p>用户的数据进来，会把数据分成一份一份的block</p><ul><li><a href="https://yuerblog.cc/2017/01/22/understand-bridge-and-dhcp/" target="_blank" rel="noopener">关于桥接与NAT的介绍不错的文章</a></li></ul><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CentOS7 已经废除了ipconfig命令</span><br><span class="line"># 查看网卡信息</span><br><span class="line">1. 网卡细节，输入ip addr</span><br><span class="line">2. 查看网络接口统计数据,输入ip link或ip -s link</span><br><span class="line"></span><br><span class="line"># 如果你不知道在哪里可以找到ifconfig命令，请按照以下简单的步骤来找到它。首先，让我们找出哪个包提供了ifconfig命令：</span><br><span class="line">yum provides ifconfig</span><br><span class="line"></span><br><span class="line"># 安装ipconfig</span><br><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure><h2 id="配置Hadoop"><a href="#配置Hadoop" class="headerlink" title="配置Hadoop"></a>配置Hadoop</h2><p>主要有三个文件用来配置，这些配置文件都在conf子目录中：</p><ul><li>core-site.xml，指定默认文件系统和工作空间，类似tmp目录需要最创建</li><li>hdfs-site.xml，配置HDFS属性</li><li>mapred-site.xml，配置mapReduce属性</li><li>workers,写上slaves的host（这个问题困扰我好几天，我看的教程是2.几的）</li></ul><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">entos从7开始默认用的是firewalld，这个是基于iptables的，虽然有iptables的核心，但是iptables的服务是没安装的。所以你只要停止firewalld服务即可：</span><br><span class="line">sudo systemctl stop firewalld.service &amp;&amp; sudo systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line">如果你要改用iptables的话，需要安装iptables服务：</span><br><span class="line">yum install iptables-services</span><br><span class="line">sudo systemctl enable iptables &amp;&amp; sudo systemctl enable ip6tables</span><br><span class="line">sudo systemctl start iptables &amp;&amp; sudo systemctl start ip6tables</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.zybuluo.com/Emptyset/note/220230" target="_blank" rel="noopener">Hadoop完全分布式集群搭建手记</a></li><li><a href="https://zhangchenchen.github.io/2018/01/30/record-for-hdfs/" target="_blank" rel="noopener">Hadoop学习之HDFS</a></li><li><a href="https://www.jianshu.com/p/7e1460c931d0" target="_blank" rel="noopener">Hadoop搭建与概念介绍</a></li><li><a href="https://www.jianshu.com/p/ea0ffb832161" target="_blank" rel="noopener">HDFS的shell操作及基本工作机制</a></li></ul><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li>cluster：集群</li><li>estimate:估计</li><li>forecasting:预测</li><li>tenfold：十倍</li><li>avd：热衷于</li><li>growing apace：增长迅速</li><li>notoriously challenging：众所周知的挑战</li><li>In a nutshell：简而言之</li><li>evolved：进化</li><li>ad hoc analysis</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Big data is here, Let’s learn how to store and analyze it.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="big data" scheme="http://wittyfans.com/tags/big-data/"/>
    
      <category term="hadoop" scheme="http://wittyfans.com/tags/hadoop/"/>
    
      <category term="hive" scheme="http://wittyfans.com/tags/hive/"/>
    
      <category term="大数据" scheme="http://wittyfans.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>阅读：Java虚拟机</title>
    <link href="http://wittyfans.com/writing/%E9%98%85%E8%AF%BB%EF%BC%9AJava%E8%99%9A%E6%8B%9F%E6%9C%BA.html"/>
    <id>http://wittyfans.com/writing/阅读：Java虚拟机.html</id>
    <published>2018-03-18T14:11:59.000Z</published>
    <updated>2018-03-18T14:14:31.995Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JVM(Java虚拟机)是一个抽象机器。 它提供了一个可以执行Java字节码的运行环境，让Java可以在不同的硬件软件平台运行，它的工作是什么呢？</p></blockquote><a id="more"></a><h1 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h1><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><h2 id="Java虚拟机是什么？"><a href="#Java虚拟机是什么？" class="headerlink" title="Java虚拟机是什么？"></a>Java虚拟机是什么？</h2><p>JVM(Java虚拟机)是一个抽象机器。 它提供了一个可以执行Java字节码的运行环境，让Java可以在不同的硬件软件平台运行，它的工作是什么呢？简单的说就是加载代码、验证代码、执行代码、提供运行时环境。它通过内部许多的组件来实现这些功能，这些组件包括：</p><ol><li>类加载器</li><li>方法区，就是存放已经被虚拟机加载了的信息，如类信息，常量，静态变量等。</li><li>Java虚拟堆，就是存放Java对象实例的地方；也是垃圾收集器主要管理的地方，所以也叫GC堆，一般都采用分代收集算法去管理。</li><li>Java虚拟机栈，定义了内存模型，java中每个方法执行的时候都会创建一个栈来存储局部变量，动态链接等数据，在java中，进入一个方法的时候，该方法需要的内存空间是已经确认了的，不可中途修改；如果申请的内存超过限制，就会报StackOverflow错误。</li><li>程序计数器寄存器</li><li>本地方法堆栈</li><li>执行引擎</li><li>虚拟处理器<ul><li>解释器：读取字节码流，然后执行指令。</li><li>即时(JIT)编译器：它用于提高性能，JIT编译的同时有类似字节代码部分的功能，从而减少编译所需的时间。编译器是指从Java虚拟机(JVM)的指令集到特定CPU的指令集的转换器。</li></ul></li></ol><h2 id="常用的Java虚拟机"><a href="#常用的Java虚拟机" class="headerlink" title="常用的Java虚拟机"></a>常用的Java虚拟机</h2><ul><li>Sun Classic/Exact VM，世界上第一款商用 Java 虚拟机</li><li>Sun HotSpot VM，Sun推出的优化版</li><li>BEA JRockit /IBM J9 VM，专注于服务器端应用</li><li>IBM J9 ，一款设计上从服务器端到桌面应用再到嵌 入式都全面考虑的多用途虚拟机。</li><li>Azul VM/BEA Liquid VM，特定硬件平台专有的虚拟机，特点是高性能，可直接管理硬件</li><li>Apache Harmony/Google Android Darvik VM，Android 平台的核心组成部分之一</li><li>Microsoft JVM及其他。</li></ul><h1 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h1><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>检测到New指令的时候，首先检测是否已经存在该参数（是否能在常量池中定位到一个类的符号引用，是否已经被加载、解析和初始化过），如果没有，就执行相应的类加载过程。</p><p>但是有一个问题，在进行内存分配的是，如果A线程给一个对象分配了内存，但此时还没有修改内存指向的指针，与此同时B线程又吧这个内存分配了出去，这就会报错。</p><p>有两种方式解决，第一种是排队，按顺序来。第二种是，这些线程放到不同的内存区域去分配资源，也就是说线程一开始管的地盘（本地线程分配缓冲（TLAB））就不一样，如果这个TLAB用完了，再排队，可通过-XX:+/-UseTLAB参数来设定排不排队。</p><p>接下来就处理，对象是哪个类的实例、如何才能找到类的元 数据信息、对象的哈希码、对象的GC分代年龄等信息。</p><p>然后就按照程序猿的意思去初始化对象咯。</p><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>主要有三个部分：对象头、实例数据和对齐 填充。</p><p>先介绍对象头，主要有两个部分：</p><ul><li><p>第一部分用于存储对象自身的运行时数据（哈希 码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的 存储官方称为Mark Word）</p></li><li><p>另一部分是类型指针（即对象指向它的类元数据的指针，JVM通 过这个指针来确定这个对象是哪个类的实例）。</p></li><li>如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据。</li></ul><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>Java程序需要通过Java虚拟机栈（定义了内存模型）上的Reference数据来操作堆（Java虚拟堆，就是存放Java对象实例的地方）上的具体对象，Reference访问对象的方式有两种，句柄和直接指针。</p><ol><li>如果直接使用句柄访问，java堆中将会划分出一块内存来作为句柄池，reference中存储的是对象的句柄地址，而句柄中包含了对象数据与类型数据各自的具体地址信息。</li><li>如果使用直接指针访问，那么java堆对象的布局中就必须考虑如何放置访问类型数据的相 关信息，而reference中存储的直接就是对象地址。</li></ol><h2 id="OutOfMemoryError异常"><a href="#OutOfMemoryError异常" class="headerlink" title="OutOfMemoryError异常"></a>OutOfMemoryError异常</h2><p><strong>学习目标</strong></p><ul><li>了解内存区域</li><li>根据异常快速定位是哪个区域溢出</li><li>什么样的代码会导致溢出</li><li>如何处理溢出</li></ul><p><strong>Java堆溢出</strong><br>我们在JVM参数中，加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8</span><br></pre></td></tr></table></figure><ul><li>堆的大小固定为20M且不可扩展</li></ul><h2 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h2><p>由于运行时常量池是方法区的一部分，因此这两个区域的溢出测试就放在一起进行。</p><p>方法区用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。 对于这些区域的测试，基本的思路是运行时产生大量的类去填满方法区，直到溢出。</p><h2 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h2><p>本机内存可以通过-XX:MaxDirectMemorySize指定，如果不指定，则默认与Java堆 最大值（-Xmx指定）一样。</p><h1 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h1><p>GC（即Garbage Collection，垃圾收集，垃圾回收）要完成3件事：</p><ol><li>哪些内存需要回收？</li><li>什么时候回收？</li><li>如何回收？</li></ol><h2 id="概览-1"><a href="#概览-1" class="headerlink" title="概览"></a>概览</h2><p>Java内存的<strong>程序计数器、虚拟机栈、本地方法栈</strong>，3个区域随线程而生，随线程而灭；</p><p>栈中的栈帧随着方法的进入和退出而有条不紊地执行着入栈和出栈操作。每一个栈帧中分配多少内存 基本上是在类结构确定下来时就已知的，因此这几个区域的内存分配和回收都具备确定性， 在这几个区域内就不需要过多考虑回收的问题，因为方法结束或者线程结束，内存自然就跟 随着回收了。</p><p>而Java堆和方法区则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，只有在程序处于运行期间时才能知道会创建哪些对象，这部分内存的分配和回收是动态的，垃圾收集器所关注的是这部分的内存。</p><h2 id="对象已死吗"><a href="#对象已死吗" class="headerlink" title="对象已死吗"></a>对象已死吗</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>无法解决互相引用循环的问题，主流的Java虚拟机已经放弃这种方法。</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>就是搜素引用链，如果发现某个对象没有被引用了，就可能要被销毁，但是真正的销毁还是要看一些条件，即对象被引用的情况：</p><ul><li>强引用（Strong Reference）</li><li>软引用（Soft Reference）</li><li>弱引用（Weak Reference）</li><li>虚引用（Phantom Reference）</li></ul><p>要真正宣告一个对象死亡，至少要经历两次标记过程：</p><ol><li>第一次，即发现对象没有与GC Roots相连接，这时候会去判断是否有必要执行finalize方法，如果有必要就会放入F-Queue队列，随后会由一个虚拟机 自动建立的、低优先级的Finalize线程去执行它。这个执行并不会等待其运行结束，防止阻塞 和崩溃。</li><li>finalize方法是对象逃过死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize方法中拯救自己—只要重新与引用链上的任何 一个对象建立关联即可。但是一个对象的finalize方法只能被执行一次</li></ol><h3 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h3><p>方法区的回收率很低。一般回收只回收两部分的内容，一是废弃的常量。而是无用的类。第一种简单，而无用的类就需要去判读了，需要满足3个条件：</p><ol><li>该类的所有实例都已经被回收，也就是说java堆中不存在这个类的任何实例。</li><li>加载这个类的ClassLoader也已经被回收。</li><li>这个类对应的对象没有在任何地方被引用。</li></ol><p>可以通过了-Xnoclassgc参数对类的回收进行配置。</p><ul><li>新生代GC（Minor GC）：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝 生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。 </li><li>老年代GC（Major GC / Full GC）：指发生在老年代的GC，出现了Major GC，经常会伴 随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直 接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li></ul><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>也即是，先标记需要回收的对象，然后标记完成后统一回收，这个标记的过程就是使用可达性算法来实现的。<br>但是也有缺点：</p><ul><li>标记和清除的效率都不高</li><li>清除后的标记会产生碎片</li></ul><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>就是将内存分区，每次只使用其中的一部分，当这个部分用完了，就把还存活的对象复制到另一个地区去，再把使用过的内存清理掉。<br>这种办法不需要考虑碎片的问题，只需要动一动指针就好了。</p><h3 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h3><p>跟标记清除一样，但是标记完成了之后，它会让所有的存活对象向一边移动，然后直接清除掉另外一边的内存。</p><h3 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h3><p>即根据对象的特征去分开管理。存活时间短的放在新生代，长的放在老年代。时间短的可以采用复制算法，而老年代存活率高，可以使用标记清理或者标记整理。</p><h2 id="HotSopt的算法实现"><a href="#HotSopt的算法实现" class="headerlink" title="HotSopt的算法实现"></a>HotSopt的算法实现</h2><h3 id="枚举根节点"><a href="#枚举根节点" class="headerlink" title="枚举根节点"></a>枚举根节点</h3><p>枚举根节点也就是去找到引用的对象，但进行这个操作的时候，会停顿所有的Java执行线程，GC不可能经常去做中断这个操作，会加重系统的负荷，但也不能一直不做这个操作，让枚举操作等待很久，所以需要有一个频率去控制，而HotSpot实现的方式就是在“特定的位置”放置安全点，也就是说在特定的位置记录OopMap（一种数据结构，用来找到引用对象）。<br>我们一般采用主动式中断的思想，即简单设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。</p><h3 id="Serial-Collecor收集器"><a href="#Serial-Collecor收集器" class="headerlink" title="Serial Collecor收集器"></a>Serial Collecor收集器</h3><p>这是一个单线程的分代收集器。它在进行垃圾搜集的时候，必须暂停其他所有的工作的线程，直到它收集结束。</p><p>新生代：单线程复制收集算法；<br>老年代：单线程标记整理算法；</p><p>Serial一般在单核的机器上用。</p><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><p>Serial无法充分利用物理及的资源，因此出现了ParNew收集器。它跟Serial的区别主要是在新生代的收集方式上，一个是多线程，一个是单线程。</p><h3 id="parallel-Scavenge收集器"><a href="#parallel-Scavenge收集器" class="headerlink" title="parallel Scavenge收集器"></a>parallel Scavenge收集器</h3><p>新生代的收集齐，使用复制算法，又是并行的多线程收集器。</p><h3 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h3><p>Serial的老年代版本，单线程。使用标记整理算法。</p><h3 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h3><p>老年代版本的收集器，使用多线程和标记整理算法。</p><h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h3><p>基于标记，清除。了解决老年代暂停时间过长而设计，同样基于收集器“标记-算法”实现。</p><ul><li>新生代：收集和Parallel Collector新生代收集方式一致。</li><li>老年代：GC和程序同时进行。</li></ul><p>分四个阶段：</p><ul><li>初始标记(initial mark):暂停一会，找出所有活着对象的初始集合。 </li><li><p>并行标记(concurrent marking)：根据初始集合，标记出所有的存活对象，由于程序在 运行，一部分存活对象无法标出。此过程标记操作和程序同时执行。</p></li><li><p>重新标记(remark):程序暂停一会，多线程进行重新标记所有在②中没有被标记的存活对 象。</p></li><li><p>并行清理concurrent sweep：回收所有被标记的垃圾区域。和程序同时进行。</p></li></ul><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><p>面向服务端的垃圾收集齐，CMS的替代版。特点是能充分利用多CPU、多核环境下的硬件优势，并且中断造成的停顿是可以预测的。</p><h2 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h2><ul><li>对象优先在Eden分配，大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将 发起一次Minor GC；</li><li>大对象直接进入老年代，那些需要大量连续内存空间的Java对象，比如很长的字符串、数组，这些对象会直接分配在老年代；</li><li>长期存活的对象将进入老年代，虚拟机其实给每个对象都定义了一个对象年龄计数器。对象在Survivor区中，每“熬过”一次Minor GC，年龄就增加1岁。当它的年龄增加到一定程度（默认为15岁），就将 会被晋升到老年代中。</li></ul><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么就是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许<strong>担保失败</strong>。</p><p>如果允许，那么会继续检查老年代最大 可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不 允许冒险，那这时也要改为进行一次Full GC。</p><h1 id="虚拟机性能监控与故障处理工具"><a href="#虚拟机性能监控与故障处理工具" class="headerlink" title="虚拟机性能监控与故障处理工具"></a>虚拟机性能监控与故障处理工具</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>知识、经验是关键基础，数据是依据，<strong>工具</strong>是运用知识处理数 据的手段。</p><h2 id="JDK命令行工具"><a href="#JDK命令行工具" class="headerlink" title="JDK命令行工具"></a>JDK命令行工具</h2><p>这些JDk工具就是对jdk/lib/jar的类库做个包装，主要的实现代码都在tools类库中，例如:</p><ul><li>虚拟机进程状况工具jps，列出正在运行的虚拟机进程，并显示本地虚拟机唯一ID。</li><li>虚拟机统计信息监视工具jstat，它可以显示本地或者远程虚拟机进程 中的类装载、内存、垃圾回收、JIT编译等运行数据</li><li>java配置信息工具jinfo，实时的查看和调整虚拟机各项参数。</li><li>Java内存映像工具jmap，也可以获取dump文件，查询 finalize执行队列、java堆和永久代的详细信息。如空间使用率、当前用的是哪种收集器等。</li><li>虚拟机堆转储快照分析工具jhat，与jmap搭配使用的，用来分析dump生成的快找，jhat内置了</li><li>java堆栈跟踪工具jstack，这个命令用来生成虚拟机当前的线程快照，一般会生成threaddump或者是javacore文件。</li></ul><h2 id="JDK可视化工具"><a href="#JDK可视化工具" class="headerlink" title="JDK可视化工具"></a>JDK可视化工具</h2><p>JDK中主要有两个可视化工具，JConsole和VisualVM。</p><p>JConsole 在 JDK/bin目录下，启动JConsole后，会自动搜索jvm进程。</p><p>VisualVM 多合一故障处理工具，这是一个集成多个JDK命令行工具的可视化工具。可以通过插件扩展许多功能，比如显示环境信息，进程配置，监视CPU，GC，堆，等等。</p><h1 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h1><p>任何一个 Class 文件都对应着唯一一个类或接口的定义信息，但反过来说，类或接口并不一 定都得定义在文件里。Class 文件是一组以 8 位字节为基础单位的二进制流。</p><p>Class 文件格式采用一种类似于 C 语言结构体的伪结构来存 储数据，这种伪结构中只有两种数据类型：无符号数和表</p><p>Class文件格式不依赖于特定硬件及操作系 统、紧凑、稳定和可扩展的特点，是Java技术体系实现平台无关、语言无关两项特性的重要支柱。</p><h2 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h2><p>就是把类的数据从Class文件加载到内存，然后对数据进行校验，转换解析，初始化，最后就可以被虚拟机直接使用了。</p><h3 id="类是怎么加载的？"><a href="#类是怎么加载的？" class="headerlink" title="类是怎么加载的？"></a>类是怎么加载的？</h3><ol><li>加载</li><li>验证</li><li>准备</li><li>解析</li><li>初始化</li><li>使用</li><li>卸载</li></ol><p>其中</p><ul><li>验证、准备、解析 3 个部分统称为连接（ Linking）</li><li>加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的</li><li>解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开 始，这是为了支持 Java 语言的运行时绑定</li></ul><p>虚拟机规定，有且只有5种情况必须对类进行初始化：</p><ul><li>1） 遇到 new、 getstatic、 putstatic 或 invokestatic 这 4 条指令时</li><li>2） 使用 java.lang.reflect 包的方法对类进行反射调用的时候。 </li><li>3） 当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类 的初始化。 </li><li>4） 当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类）， 虚拟机会先初始化这个主类。 </li><li>5） 当使用 JDK1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例 最后的解析结果 REF_getStatic、 REF_putStatic、 REF_invokeStatic 的方法句柄，并且 这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li></ul><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><ul><li>加载，就是找到要怎么加载这个数据的方法（通常是静态的），然后根据这个数据转化成可以运行的数据机构，再放到方法区。</li><li>验证，即确保Class文件中的数据符合虚拟机的要求</li><li>文件格式验证</li><li>元数据验证，字节码的语义分析</li><li>字节码验证，数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</li><li>符号引用验证</li><li>准备，这个阶段进行内存分配的仅包括类变量（被 static 修饰的变量），而不包括实例变量，实例变 量将会在对象实例化时随着对象一起分配在 Java 堆中。</li><li>解析，虚拟机将常量池内的符号引用替换为直接引用的过程。</li><li>初始化，执行类构造器<clinit>方法。</clinit></li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><ul><li>让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。</li><li>即使两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不 同，那这两个类就必定不相等。每一个类加载器，都拥有一个独立的类空间。</li><li>从 Java 虚拟机的角度来讲，只存在两种不同的类加载器：<ul><li>一种是启动类加载器（ Bootstrap ClassLoader）， 这个类加载器使用 C++ 语言实现[ 1]， 是虚拟机自身的一部分；</li><li>另一种就 是所有其他的类加载器，这些类加载器都由 Java 语言实现，独立于虚拟机外部，并且全都继 承自抽象类java.lang.ClassLoader。</li><li>有三种系统提供的类加载器，启动类加载器（Bootstrap ClassLoader），扩展类加载器（Extension ClassLoader），应用程序类加载器（Application ClassLoader）。</li></ul></li></ul><hr><p>To be continued.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JVM(Java虚拟机)是一个抽象机器。 它提供了一个可以执行Java字节码的运行环境，让Java可以在不同的硬件软件平台运行，它的工作是什么呢？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OmniGraffle使用记录</title>
    <link href="http://wittyfans.com/writing/OmniGraffle%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html"/>
    <id>http://wittyfans.com/writing/OmniGraffle使用记录.html</id>
    <published>2018-03-18T13:54:47.000Z</published>
    <updated>2018-03-18T13:58:35.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>OmniGraffle是一款运行在Mac OS X 和iPad平台之上的设计软件。它曾获得2002年的苹果设计奖。 可以用来绘制图表， 流程图，组织结构图以及插图，也可以用来来组织头脑中思考的信息，组织头脑风暴的结果，绘制心智图，作为样式管理器，或设计网页或PDF文档的原型。</p></blockquote><a id="more"></a><h1 id="工具栏和检查器"><a href="#工具栏和检查器" class="headerlink" title="工具栏和检查器"></a>工具栏和检查器</h1><p><img src="https://cdn.sspai.com/2017/11/22/6e57ab13fbc4f6d43ce1366a981354b8.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><ul><li>不同的工具，单机、双击、长按快捷键对应不同的操作模式，分别是单次使用、保持状态、临时调用。</li><li>所有工具，使用一次后会自动回到选择工具。</li><li>按一次和按两次数字键与用鼠标点击一次或双击效果一样，决定是使用一次后返回「选择」，还是一直处于激活状态；</li></ul><p><img src="https://cdn.sspai.com/2017/11/22/e528997c9c6278bfa4729cdfa47e9da0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><ul><li>⌘1-⌘6 快捷键快速切换对应的检查器面板。</li><li>按住 Option 键可以把一个对象的属性吸取保存下来，再点击就可以直接复制或应用属性到其他对象</li><li>格式刷可以「吸取」的格式非常多，而且可以自定义。</li><li>对象的外观（⌘1）、字体标签设置（⌘2）、连接磁化点（⌘3）、页面属性和图表布局（⌘4）、页边距和文档属性（⌘5）以及模具面板（⌘6）。</li></ul><h1 id="版面、目录、检查器"><a href="#版面、目录、检查器" class="headerlink" title="版面、目录、检查器"></a>版面、目录、检查器</h1><p><img src="https://cdn.sspai.com/2017/11/22/b1784c84b490e467caffdf9c03adeb0e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><h2 id="图层"><a href="#图层" class="headerlink" title="图层"></a>图层</h2><ul><li>锁定图层，可以避免误操作</li><li>「眼睛」图标隐藏或显示图层</li><li>「打印机」图标决定打印输出时是否包含这个图层。</li><li>激活「共享图层」图标（呈黄色显示），可以将共享图层的内容显示在其他页面，从而实现特定内容的共用</li><li>图层和页一样，通过拖移可以调整顺序，按住Option可以复制，按住Command可以选择多个页面或图层</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>「目录」面板中提供了三种显示对象的方式：对象列表、大纲层级、近似对象：</p><ul><li>「对象列表」视图按扁平方式列出所有的对象、群组及其层叠顺序，便于快速找到某个具体的对象，通过拖动或点击底部的箭头可以调整对象的层叠顺序，针对复杂的组合形状从列表视图中选择会更方便；</li><li>「大纲层级」按对象之间隶属关系来显示，大纲视窗中不包含线条，只包含形状或图片等元素。大纲视图中输入对象包含的文字内容会很方便，例如，创建组织结构图或者思维导图时直接在大纲视图中输入内容，最后选择自动排版，马上就能获得一个漂亮的结果；</li><li>「近似对象」中更可以一次选中所有相似的对象，对于批量的修改和调整非常有帮助。</li></ul><h1 id="对象控制和样式托盘"><a href="#对象控制和样式托盘" class="headerlink" title="对象控制和样式托盘"></a>对象控制和样式托盘</h1><p><img src="https://cdn.sspai.com/2017/11/22/90656b48f4a6a7f6962c256c5e92955f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt=""></p><h2 id="控制对象"><a href="#控制对象" class="headerlink" title="控制对象"></a>控制对象</h2><p>这里有一些建议记下来的快捷键：</p><ul><li>前移对象「⌥⌘F」</li><li>后移对象「⌥⌘B」</li><li>移到最前「⇧⌘F」</li><li>置于最后「⇧⌘B」</li></ul><blockquote><p>F 和 B 取的是英文单词的 Front和 Back 的首字母</p></blockquote><h2 id="样式托盘"><a href="#样式托盘" class="headerlink" title="样式托盘"></a>样式托盘</h2><p>检查器底栏的「样式托盘」是 OmniGraffle 中一个非常值得称道的设计，当你选中对象时，「样式托盘」中会分解出当前对象采用的各种格式，和工具栏中的「格式刷」作用一样，不过操作交互上，「样式托盘」更直观和方便，你可以按住托盘中的某一个格式拖拽到其他对象，也可以按住第一个图标拖拽将当前对象的所有格式应用到其他对象。</p><p>按住 command 键，你可以在「样式托盘」中选择多个格式然后拖拽到其他对象，被选中的格式项背景会显示为浅灰色。</p><h1 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h1><h2 id="选择对象"><a href="#选择对象" class="headerlink" title="选择对象"></a>选择对象</h2><p>单击选择对象，按住 Shift 键或 Command 键可以将对象添加到选择或者从选择集合去掉。</p><h2 id="圈选对象"><a href="#圈选对象" class="headerlink" title="圈选对象"></a>圈选对象</h2><p>直接拖一个范围，按住Option键则只有完全选中的才会选择进来。</p><h2 id="对象旋转"><a href="#对象旋转" class="headerlink" title="对象旋转"></a>对象旋转</h2><p>按住Command键，再拖动旋转指针，再按住shift会吸附在特定的角度。</p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>按住Command，双指滑动。<br>按住 option 控制句柄    基于中心缩放</p><h2 id="划线"><a href="#划线" class="headerlink" title="划线"></a>划线</h2><ul><li>选择线条工具，单击开始绘制，再次单机添加中间点，双击完成绘制。</li><li>线条分四种类型：直线（Straight）、曲线（Curved）、折线（Orthogonal）和贝塞曲线（Bezier），通过工具栏的「收藏夹」图标可以固定默认的绘制类型。</li><li>针对绘制中遇到的线条交叉情况，面板中提供了多种「穿越模式」的样式供选择，默认情况下是「Do nothing」。</li><li>选中线条并在线条上双击可以添加「中间点」，按住 Option 键双击则是添加文本标签。</li></ul><hr><p><em>To be continued</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;OmniGraffle是一款运行在Mac OS X 和iPad平台之上的设计软件。它曾获得2002年的苹果设计奖。 可以用来绘制图表， 流程图，组织结构图以及插图，也可以用来来组织头脑中思考的信息，组织头脑风暴的结果，绘制心智图，作为样式管理器，或设计网页或PDF文档的原型。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="writing" scheme="http://wittyfans.com/categories/writing/"/>
    
    
      <category term="设计" scheme="http://wittyfans.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="画图" scheme="http://wittyfans.com/tags/%E7%94%BB%E5%9B%BE/"/>
    
      <category term="原型图" scheme="http://wittyfans.com/tags/%E5%8E%9F%E5%9E%8B%E5%9B%BE/"/>
    
      <category term="App" scheme="http://wittyfans.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>Linux阅读笔记</title>
    <link href="http://wittyfans.com/coding/Linux%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html"/>
    <id>http://wittyfans.com/coding/Linux阅读笔记.html</id>
    <published>2018-03-18T13:17:51.000Z</published>
    <updated>2018-03-18T13:19:29.239Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>鸟哥的Linux私房菜阅读笔记，截取了重要的概念与常用的命令。</p></blockquote><a id="more"></a><h1 id="按下开机键后发生了什么？"><a href="#按下开机键后发生了什么？" class="headerlink" title="按下开机键后发生了什么？"></a>按下开机键后发生了什么？</h1><ol><li>按下开机键<br>BIOS 步骤：<br>计算机从主板的 BIOS(Basic Input/Output System) 中读取存储的程序</li><li>MBR 步骤：<br>该程序从存储设备中读取起始的 512 字节数据（称为主引导记录 Master Boot Record, MBR）</li><li>Boot Loader 步骤：MBR 告诉计算机从哪个分区(Partition)来载入引导加载程序(Boot Loader)，Boot Loader 保存了操作系统的相关信息</li><li>Kernel 步骤：Boot Loader 根据所存储的信息加载内核(Kernel)，内核主要的任务是管理计算机的硬件资源</li><li>Init 步骤：内核会为自己预留内存空间，然后进行硬件检测，之后启动 init 进程（1 号进程），之后的操作会由 init 进程来接管<br>初始化脚本步骤：如果没有进入单用户模式，就会为操作系统启动做各种初始化工作，包括计算机基本信息、文件系统、硬盘、清理临时文件、设置网络等等</li><li>登录步骤：操作系统准备好之后，我们就可以用用户名和密码登录到计算机中，我们成为了一个用户，属于某个用户组</li></ol><h1 id="终端与仿真器"><a href="#终端与仿真器" class="headerlink" title="终端与仿真器"></a>终端与仿真器</h1><p>在大型机时代，终端是一个硬件设备，用来进行输入输出，而随着计算机硬件的发展，终端已经慢慢从实体变成了一个概念。现在的终端已经变成了一种软件层面的模拟，所以可以这样理解，现代计算中的终端是一个用软件仿真的终端，我们在这上面输入输出的命令会传给具体执行这些命令的 shell 程序，再由 shell 程序执行对应的系统调用。重要的事情说三遍：终端不是 shell，终端不是 shell，终端不是 shell。</p><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><ul><li>文件系统是一个树结构，树的根就是我们常常能看到的根目录 /。</li><li>对于目录来说，里面至少会包含两个条目：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. 当前目录</span><br><span class="line">.. 指向上级目录</span><br></pre></td></tr></table></figure><ul><li>当一个文件被放入到目录中，实际上就是建立了一个到该文件的硬链接(hard link)，当对这个文件的硬链接数目为零的时候，文件实际上就被删除了。不过现在基本都使用软链接(soft link)，类似于 windows 中的快捷方式，不会影响链接数目。</li></ul><h2 id="文件系统的实现"><a href="#文件系统的实现" class="headerlink" title="文件系统的实现"></a>文件系统的实现</h2><p>存储设备的前 512 字节是 MBR，用于开机启动，剩余的空间可能会被分为多个分区(partition)，每个分区有对应的分区表(partition table)来记录分区的相关信息（比如起始位置和分区大小）。需要注意的是，分区表并不保存在该分区中，不然万一分区挂了，连最关键的分区表都找不到了。<br>看一张图：</p><p><img src="http://wittyfans.com/images/14590056997684.jpg" alt="文件系统的实现"></p><p>Boot block 是为计算机启动而准备的，在 MBR 指定启动分区之后，就会把 Boot block 部分的程序读入内存执行。为了方便管理，即使该分区没有操作系统，仍然会预留 Boot block<br>Super block 存储文件系统的信息，比如类型、inode 数目和数据块的数目<br>inodes 是文件存储的关键，每个文件对应一个 inode，inode 中包含指向具体数据的指针，读取的时候根据这些指针进行数据读取即可<br>Data blocks 就是具体的数据了，我们通过 inode 中的指针来进行访问</p><h2 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h2><ul><li>读取 Read: 获取数据</li><li>写入 Write: 创建新文件或在旧文件中写入数据</li><li>运行 Execute: 文件是可执行的二进制代码，那么会被载入内存进行执行</li><li>每一个文件都有三种权限，对应三种用户的读、写、可执行权限，例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--  1 wittyfans  staff  0 Feb  3 20:24 HelloWord.txt</span><br></pre></td></tr></table></figure><ul><li>解释如下：<ul><li>第一个字符，如果是 - 表示常规文件，如果是 d 表示目录</li><li>当为[ d ]则是目录，例如上表文件名为“.config”的那一行；</li><li>当为[ - ]则是文件，例如上表文件名为“initial-setup-ks.cfg”那一行；</li><li>若是[ l ]则表示为链接文件（link file）；</li><li>若是[ b ]则表示为设备文件里面的可供储存的周边设备（可随机存取设备）；</li><li>若是[ c ]则表示为设备文件里面的序列埠设备，例如键盘、鼠标（一次性读取设</li><li>备）。</li><li>后面的九个字符表示 所有者, 群组 和 其他人 的权限</li><li>rwx 分别代表读取、写入和执行，如果是 - 则表示没有对应的权限</li><li>第二列的数字是 hard link 的数目</li><li>第三、四列是所属的用户和用户所在的用户组</li><li>第五列是文件大小，单位是字节 byte</li><li>最后的是上一次写入的时间</li></ul></li></ul><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><p>用于群组、拥有者、各种身份的权限之修改的指令：</p><ul><li>chgrp ：改变文件所属群组</li><li>chown ：改变文件拥有者</li><li>chmod ：改变文件的权限, SUID, SGID, SBIT等等的特性</li><li>改变所属群组, chgrp</li></ul><p>改变群组的命令，这个群组必须要存在才可以，否则会失败，改变用户的命令同理<br>对于chmod命令，如果要连目录下的所有次目录或文件同时更改文件拥有者的话，直接加上 -R 的选项<br>如果用root用户复制一个文件给其他的用户，默认会复制所有的权限属性，所以复制完了之后需要更改权限</p><h3 id="用数字类型改变文件权限"><a href="#用数字类型改变文件权限" class="headerlink" title="用数字类型改变文件权限"></a>用数字类型改变文件权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">owner = rwx = 4+2+1 = 7 &gt; group = rwx = 4+2+1 = 7 &gt; others= --- = 0+0+0 = 0</span><br><span class="line">chmod 770 filename</span><br></pre></td></tr></table></figure><h3 id="符号类型改变文件权限"><a href="#符号类型改变文件权限" class="headerlink" title="符号类型改变文件权限"></a>符号类型改变文件权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod u=rwx,go=rx .bashrc</span><br><span class="line">chmod u=rwx,g=rx,o=r filename</span><br><span class="line"></span><br><span class="line">u = user</span><br><span class="line">g/o = group与others</span><br></pre></td></tr></table></figure><p>也可以直接再原来的权限上增加或者删除权限，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+w filename</span><br></pre></td></tr></table></figure><p>给a(所有人)增加写权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a-x filename</span><br></pre></td></tr></table></figure><h2 id="文件和目录权限的不同"><a href="#文件和目录权限的不同" class="headerlink" title="文件和目录权限的不同"></a>文件和目录权限的不同</h2><p>对于文件：<br>r （read）：可读取此一文件的实际内容，如读取文本文件的文字内容等；<br>w （write）：可以编辑、新增或者是修改该文件的内容（但不含删除该文件）；可执行在windows中由扩展名决定，而linux中由x这个权限来控制。<br>x （eXecute）：该文件具有可以被系统执行的权限。</p><p>对于目录：<br>目录主要的内容在记录文件名清单，所以：</p><p><strong>r （read contents in directory）：</strong></p><p>表示具有读取目录结构清单的权限，所以当你具有读取（r）一个目录的权限时，表示你<br>可以查询该目录下的文件名数据。 所以你就可以利用 ls 这个指令将该目录的内容列表显示出来！</p><p><strong>w （modify contents of directory）：</strong></p><p>这个可写入的权限对目录来说，是很了不起的！ 因为他表示你具有异动该目录结构清单<br>的权限，也就是下面这些权限：<br>创建新的文件与目录；<br>删除已经存在的文件与目录（不论该文件的权限为何！）<br>将已存在的文件或目录进行更名；<br>搬移该目录内的文件、目录位置。 总之，目录的w权限就与该目录下面的文件名异<br>动有关就对了啦！</p><p><strong>x （access directory）：</strong></p><p>咦！目录的执行权限有啥用途啊？目录只是记录文件名而已，总不能拿来执行吧？没<br>错！目录不可以被执行，目录的x代表的是使用者能否进入该目录成为工作目录的用途！<br>所谓的工作目录（work directory）就是你目前所在的目录啦！举例来说，当你登陆Linux<br>时， 你所在的主文件夹就是你当下的工作目录。而变换目录的指令是“cd”（change<br>directory）啰！</p><p>若A对X的目录是rwx，x下面有一个y目录，A对y的权限是—，因为y是x的子目录，A可以删除这个目录，但不可以读写或者执行。</p><h2 id="文件系统常用操作"><a href="#文件系统常用操作" class="headerlink" title="文件系统常用操作"></a>文件系统常用操作</h2><p>###　复制 cp<br>选项与参数：</p><ul><li>-a ：相当于 -dr –preserve=all 的意思，至于 dr 请参考下列说明；（常用）</li><li>-d ：若来源文件为链接文件的属性（link file），则复制链接文件属性而非文件本身；</li><li>-f ：为强制（force）的意思，若目标文件已经存在且无法打开，则移除后再尝试一次；</li><li>-i ：若目标文件（destination）已经存在时，在覆盖时会先询问动作的进行（常用）</li><li>-l ：进行硬式链接（hard link）的链接文件创建，而非复制文件本身；</li><li>-p ：连同文件的属性（权限、用户、时间）一起复制过去，而非使用默认属性（备份常用）；</li><li>-r ：递回持续复制，用于目录的复制行为；（常用）</li><li>-s ：复制成为符号链接文件 （symbolic link），亦即“捷径”文件；</li><li>-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制。</li><li>–preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了。</li><li>最后需要注意的，如果来源文件有两个以上，则最后一个目的文件一定要是“目录”才行！</li></ul><h3 id="移动-mv"><a href="#移动-mv" class="headerlink" title="移动 mv"></a>移动 mv</h3><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 （destination） 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会更新 （update）</li></ul><h3 id="删除-rm"><a href="#删除-rm" class="headerlink" title="删除 rm"></a>删除 rm</h3><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告讯息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递回删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul><h3 id="文件内容查阅"><a href="#文件内容查阅" class="headerlink" title="文件内容查阅"></a>文件内容查阅</h3><ul><li>cat 由第一行开始显示文件内容（Concatenate）<ul><li>-A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字符 $ 显示出来；</li><li>-n ：打印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul></li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl 显示的时候，顺道输出行号！<ul><li>-b ：指定行号指定的方式，主要有两种：</li><li>-b a ：表示不论是否为空行，也同样列出行号（类似 cat -n）；</li><li>-b t ：如果有空行，空的那一行不要列出行号（默认值）；</li><li>-n ：列出行号表示的方法，主要有三种：</li><li>-n ln ：行号在屏幕的最左方显示；</li><li>-n rn ：行号在自己字段的最右方显示，且不加 0 ；</li><li>-n rz ：行号在自己字段的最右方显示，且加 0 ；</li><li>-w ：行号字段的占用的字符数。</li></ul></li><li>more 一页一页的显示文件内容（快捷键如下）<ul><li>空白键 （space）：代表向下翻一页；</li><li>Enter ：代表向下翻“一行”；</li><li>/字串 ：代表在这个显示的内容当中，向下搜寻“字串”这个关键字，搜了之后按n往下面匹配；</li><li>:f ：立刻显示出文件名以及目前显示的行数；</li><li>q ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul></li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！（使用pageup和pagedn）<ul><li>空白键 ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>/字串 ：向下搜寻“字串”的功能；</li><li>?字串 ：向上搜寻“字串”的功能；</li><li>n ：重复前一个搜寻 （与 / 或 ? 有关！）</li><li>N ：反向的重复前一个搜寻 （与 / 或 ? 有关！）</li><li>g ：前进到这个数据的第一行去；</li><li>G ：前进到这个数据的最后一行去 （注意大小写）；</li></ul></li></ul><h3 id="取文件的数据"><a href="#取文件的数据" class="headerlink" title="取文件的数据"></a>取文件的数据</h3><ul><li>head 只看头几行<ul><li>若没有加上 -n 这个选项时，默认只显示十行，若只要一行呢？那就加入“head -n 1 filename ”即可！</li><li>-n -100时，代表列前的所有行数， 但不包括后面100行。</li></ul></li><li>tail 只看尾巴几行<ul><li>“tail -n +100/etc/man_db.conf” 代表该文件从100行以后都会被列出</li></ul></li><li>od 以二进制的方式读取文件内容！<ul><li>-t ：后面可以接各种“类型 （TYPE）”的输出，例如：<ul><li>a ：利用默认的字符来输出；</li><li>c ：使用 ASCII 字符来输出</li><li>d[size] ：利用十进制（decimal）来输出数据，每个整数占用 size Bytes ；</li><li>f[size] ：利用浮点数值（floating）来输出数据，每个数占用 size Bytes ；</li><li>o[size] ：利用八进位（octal）来输出数据，每个整数占用 size Bytes ；</li><li>x[size] ：利用十六进制（hexadecimal）来输出数据，每个整数占用 size Bytes ；</li></ul></li></ul></li></ul><p>例如：我不想找 google，想要立刻找到 password 这几个字的 ASCII 对照，该如何通过 od<br>来判断？答：其实可以通过刚刚上一个小节谈到的管线命令来处理！如下所示： echo<br>password | od -t oCc echo 可以在屏幕上面显示任何信息，而这个信息不由屏幕输出，而是传<br>给 od 去继续处理！就可以得到 ASCII code 对照啰！</p><h3 id="修改文件时间、创建新文件"><a href="#修改文件时间、创建新文件" class="headerlink" title="修改文件时间、创建新文件"></a>修改文件时间、创建新文件</h3><p>查看时间按的时候主要有三个时间，mtime、ctime、atime，即修改时间，状态改变的时间，内容上次取用时间。<br>touch命令：<br>-a ：仅修订 access time；<br>-c ：仅修改文件的时间，若该文件不存在则不创建新文件；<br>-d ：后面可以接欲修订的日期而不用目前的日期，也可以使用 –date=”日期或时间”<br>-m ：仅修改 mtime ；<br>-t ：后面可以接欲修订的时间而不用目前的时间，格式为[YYYYMMDDhhmm]</p><h3 id="文件与目录的默认权限与隐藏权限"><a href="#文件与目录的默认权限与隐藏权限" class="headerlink" title="文件与目录的默认权限与隐藏权限"></a>文件与目录的默认权限与隐藏权限</h3><p>使用umask 指定 “目前使用者在创建文件或目录时候的权限默认值“<br>查阅的方式有两种，</p><ul><li>一种可以直接输入 umask ，就可以看到数字体态的权限设置分数， </li><li>一种则是加入 -S （Symbolic） 这个选项，就会以符号类型的方式来显示出权限了！</li></ul><h3 id="file命令"><a href="#file命令" class="headerlink" title="file命令"></a>file命令</h3><p>File 命令可以用来查看某个文件的类型</p><ul><li>每个 filesystem 都有独立的 inode / block / superblock 等信息，这个文件系统要能够链接到目 录树才能被我们使用。 将文件系统与目录树结合的动作我们称为“挂载”。</li><li>文件名只与目录有关，但是文件内容则与 inode</li><li>多个文件名对应到同一个 inode,即Hard-link</li></ul><h2 id="关于PATH"><a href="#关于PATH" class="headerlink" title="关于PATH"></a>关于PATH</h2><p>将一些常用的路径添加到PATH后，就可以直接再任何目录下执行该命令，而不必使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/xxx</span><br></pre></td></tr></table></figure><p>的格式了。将命令添加到PATH的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;$&#123;PATH&#125;:/root&quot;</span><br></pre></td></tr></table></figure><p>某些情况下，即使你已经将 ls 搬回 /bin 了，不过系统还是会告知你无法处理 /root/ls。很<br>可能是因为指令参数被高速缓存的关系。 不要紧张，只要登出 （exit） 再登陆 （su -） 就可<br>以继续快乐的使用 ls 了！</p><h1 id="管道与流"><a href="#管道与流" class="headerlink" title="管道与流"></a>管道与流</h1><p>Linux 在执行程序的时候，会自动打开三个流：</p><ul><li>标准输入(Standard Input)</li><li>标准输出(Standard Output)</li><li>标准错误(Standard Error)</li></ul><p>比如我们想要把一个命令的输出变成另外一个程序的输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat hello.txt | wc -w</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><ul><li>最基础的操作是指令，一堆指令在一起就是程序，而进程就是程序的具体实现，也就是把程序载入到内存中并执行的过程。</li><li>操作系统的重要功能之一便是对进程进行从摇篮（分配内存空间）到坟墓（回收）的管理。</li></ul><p><img src="http://wittyfans.com/images/14807437718754.jpg" alt="ps -eo pid,comm,cmd（列出全部进程并展示 pid, command 和 cmd 信息）"></p><ul><li>第一列是 pid，相当于身份证号；</li><li>第二列是进程的简称；</li><li>第三列是进程启动时候的命令。</li><li>如果我们往上滚动，就会找到这样的一行 1 init /sbin/init，这个就是内核建立的唯一一个进程了，剩下的进程都是 init 通过 fork 方式创建的，也就是说，所有的其他进程都是 init 的子进程。</li><li>父子进程：子进程终结的时候会通知父进程进行内存空间的回收，而如果父进程比子进程还早终结，那么这个子进程就会被过继给 init 进程，并由 init 进程通过调用 wait 函数进行回收。如果无法正确回收，那么这个子进程就成为了僵尸进程，所占据的内存空间就无法被访问了。</li><li>进程组(process group)：每个进程组中有多个进程，进程组的 pid 由进程组 leader 的 pid 决定。而多个进程组还可以组成一个会话(session)，会话使得前台和后台程序得以展示出来。当我们创建了多个终端窗口，实际上就创建了多个会话，每个会话都有其前台和后台进程。<h2 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h2></li><li>进程间用信号交流，所谓信号就是一个整数，一个由进程 A 发送给进程 B 的整数。因为一个整数所能携带的信息量有限，所以一般用于系统管理。</li><li>信号的传递机制也很简单，由内核，或者由其他进程经由内核往目标进程发送信号，实际上是在该进程对应的表中写入信号。当进程执行完系统调用退出内核的时候，就会查看这个信号，然后根据信号的不同执行不同的操作。</li></ul><p>具体什么整数表示什么意思可以通过 man 7 signal 来查看，常见的有：</p><ul><li>SIGINT: 当键盘按下 CTRL+C 从 shell 中发出信号，信号被传递给 shell 中前台运行的进程，对应该信号的默认操作是中断(INTERRUPT)该进程</li><li>SIGQUIT: 当键盘按下 CTRL+\ 从 shell 中发出信号，信号被传递给 shell 中前台运行的进程，对应该信号的默认操作是退出(QUIT)该进程</li><li>SIGTSTP: 当键盘按下 CTRL+Z 从 shell 中发出信号，信号被传递给 shell 中前台运行的进程，对应该信号的默认操作是暂停(STOP)该进程</li><li>SIGCONT: 用于通知暂停的进程继续</li><li>SIGALRM: 起到定时器的作用，通常是程序在一定的时间之后才生成该信号</li></ul><p>上面的介绍说『默认』操作，那么也就意味着我们是可以采取其他操作的，比方说直接无视掉，或者执行我们自定义的操作。</p><p>除了信号，消息队列(message queue)和共享内存(shared memory)也可以在进程间进行信息共享。不过因为这种机制比较复杂，尤其是涉及到同步的问题，所以在使用的时候需要多加注意。</p><h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1><h2 id="HelloWord"><a href="#HelloWord" class="headerlink" title="HelloWord"></a>HelloWord</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;Hello World! This is wittyfans.&quot;</span><br><span class="line"># 显示时间</span><br><span class="line">echo &quot;Today is: &quot; $(date)</span><br></pre></td></tr></table></figure><ul><li>第一行叫 shebang，用来告知系统如何执行该脚本，这句话的意思就是说要用 /bin/bash 这个程序来跑这段代码。有意思的是，这一句也可以带参数，如果我们想开启调试功能，可以把第一句改为 #!/bin/bash -xv 即可</li><li>用 # 表示这个符号之后同一行是注释</li><li>每一句指令用换行或分号隔开</li><li>可以用 echo 命令来输出字符串，默认添加一个换行符</li><li>可以用 date 命令来获取当前的时间</li><li>如果想在一条指令里插入另一条指令，可以把另一条指令用 $() 包住（就像 date 那样）</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li>Tab 能够自动补全，从命令名称到文件夹到路径，多按两下还能出个列表方便我们输入，是居家旅行必备操作，如果只能记住一个快捷键，那么记住 Tab 即可</li><li>Ctrl+R 用来搜索，按下之后就可以输入搜索的关键词，再按一次 Ctrl+R 可以切换到下一个匹配的结果，如果找到合适的，按下 Enter 就可以执行，按下 → 会把查询结果放到当前行，我们可以进行编辑</li><li>Ctrl+W 删除该行最后一个单词，至于怎么定义一个单词呢？常见的分隔符有 空格, _, ,, :, - 等等（基本上不是字母和数字就可以认为是分隔符）</li><li>Ctrl+U 删除整行</li><li>Ctrl+A 将光标移到行首</li><li>Ctrl+E 将光标移到行尾</li><li>Ctrl+K 删除从光标处到行尾的所有内容</li><li>Ctrl+L 清屏</li><li>输入 history 可以查看命令行的历史</li><li>输入 !$ 查看最后输入的参数</li><li>输入 !! 查看上一条命令</li><li>输入 cd - 可以回到上一个工作路径</li><li>如果想要设定 bash 的提示文本，需要修改 ~/.bashrc 中的 PS1 环境变量</li><li>好！了解了这些我们就可以继续旅程了，我们就从前面出现的 echo 命令说起吧！</li></ul><h2 id="打印文本"><a href="#打印文本" class="headerlink" title="打印文本"></a>打印文本</h2><h3 id="Echo"><a href="#Echo" class="headerlink" title="Echo"></a>Echo</h3><p>前面我们输出字符串时，用的命令是 echo “Hello World! This is wittyfans.”，其中字符串是用双引号包住的，但其实不带双引号，或者用单引号也可以完成这样的效果，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ echo Hello World</span><br><span class="line">Hello World</span><br><span class="line">$ echo &apos;Hello World&apos;</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><p>那么问题来了，这三种用什么区别呢？</p><ul><li>不带引号的 echo 没办法显示 ;，因为分号是用来分隔命令的<br>使用单引号 echo 不会对命令中的变量求值，只按照原样显示（变量会在下一节说明，这里简单有个概念即可）</li><li>使用双引号 echo 有些值需要进行转义（使用 \），比方说感叹号<br>printf</li></ul><p>除了 echo 命令，我们其实还可以用 printf 命令来进行格式化输出，不过需要注意的是这里我们需要自己添加换行符，我们在前面的脚本文件中添加如下三行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%-5s %-10s %4s\n&quot; No. Name Score</span><br><span class="line">printf &quot;%-5s %-10s %4.2f\n&quot; 1 wittyfans 99.9999</span><br><span class="line">printf &quot;%-5s %-10s %4.2f\n&quot; 43 dawang 66.6566</span><br></pre></td></tr></table></figure><p>然后我们再执行一下，结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./hw.sh</span><br><span class="line">Hello World! This is wittyfans.</span><br><span class="line">Today is:  Tue Aug 2 16:58:16 CST 2016</span><br><span class="line">No.   Name       Score</span><br><span class="line">1     wittyfans     100.00</span><br><span class="line">43    dawang     66.66</span><br></pre></td></tr></table></figure><p>这里能学到的套路是什么呢？</p><ul><li>%s, %c, %d, %f 是格式替代符，就是和 C 语言一样的方式</li><li>%-5s 指明了一个左对齐且宽度为 5 的字符串，如果内容不足 5 个字符，则会以空格填充</li><li>%4.2f 表示保留两位小数可以看到是默认四舍五入的</li><li>最后要加上 \n 才能正确换行</li></ul><h3 id="cat-head-tail-uniq-cut"><a href="#cat-head-tail-uniq-cut" class="headerlink" title="cat, head, tail, uniq, cut"></a>cat, head, tail, uniq, cut</h3><p>打印文本常用的命令还有 cat, head, tail, uniq, cut，这里主要针对文件的输出，我们先创建一个文本文件 sample.txt，其内容为</p><ul><li>1 hohoho .yo</li><li>1 hohoho .max</li><li>2 ohohoh .I</li><li>2 ohohoh .I</li><li>3 hahaha .want</li><li>4 ahahah .to</li><li>5 wowwow .see</li><li>6 mummum .you</li></ul><p>接下来给出几个简单的实例，具体命令的用法，可以使用 man command 来进行查询，或者用 TLDR 命令来查询（我更推荐后者）</p><ul><li>打印文件内容 cat sample.txt</li><li>打印后 4 行 tail -n 4 sample.txt</li><li>打印头 4 行 head -n 4 sample.txt</li><li>忽略重复的行 uniq sample.txt</li><li>显示重复的行 uniq -d sample.txt</li><li>打印每行 . 之前的内容 cut -d ‘.’ -f 1 sample.txt</li></ul><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>首先要了解的是环境变量，我们可以通过 env 命令查看系统当前的环境变量，也就是那些不需要在脚本中显式声明就可以直接使用的变量。和之前一样，我们先来看一个例子，在之前的脚本中加入下面几行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#export 设置环境变量，在该 shell 脚本执行阶段有效</span><br><span class="line">export MY_WEB=http://www.wittyfans.com</span><br><span class="line">echo &quot;My home is $HOME&quot;</span><br><span class="line">web=&quot;wittyfans.com&quot;</span><br><span class="line">echo &quot;My website is $&#123;web&#125;&quot;</span><br><span class="line">echo &apos;This is not $MY_WEB&apos;</span><br><span class="line">echo $&#123;web/com/cn&#125;</span><br><span class="line">echo &quot;上一个程序的返回值: $?&quot;</span><br><span class="line">echo &quot;脚本的 PID: $$&quot;</span><br><span class="line">echo &quot;参数个数: $#&quot;</span><br><span class="line">echo &quot;脚本参数: $@&quot;</span><br><span class="line">echo &quot;分隔好的脚本参数 第一个:$1 第二个:$2&quot;</span><br></pre></td></tr></table></figure><p>我们执行的时候带两个参数试试看 ./hw.sh hello world，结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ./hw.sh hello world</span><br><span class="line">#前面部分省略</span><br><span class="line">#..........</span><br><span class="line">My home is /Users/dawang</span><br><span class="line">My website is wittyfans.com</span><br><span class="line">This is not $MY_WEB</span><br><span class="line">Wittfyans.com</span><br><span class="line">上一个程序的返回值: 0</span><br><span class="line">脚本的 PID: 9782</span><br><span class="line">参数个数: 2</span><br><span class="line">脚本参数: hello world</span><br><span class="line">分隔好的脚本参数 第一个:hello 第二个:world</span><br></pre></td></tr></table></figure><ul><li>变量声明 web=”wittyfans.com” 即可</li><li>使用变量的时候需要加上 $ 或者 ${}，我更推荐后者，看起来更清晰</li><li>单引号不会展开变量，参考 echo ‘This is not $MY_WEB’</li><li>在变量内部进行字符串替换 echo ${web/com/cn} 就可以把原来的 wittyfans.com 中的 com 换成 cn</li><li>内置的参数很好用，具体可以参考脚本中的内容（已经很详细）</li><li>环境变量中比较常用的有 HOME, PWD, USER, UID, SHELL</li></ul><p>下面再给出一些常见的用法</p><ul><li>获得字符串长度可以在变量前加 #</li><li>识别当前 shell 可以用 echo $SHELL 或 echo $0</li><li>检测是否是超级用户可以通过 $UID 的值判断，如果是超级用户，UID 应为 0</li><li>数组</li></ul><p>Bash 支持普通数组（下标是整数）和关联数组（下标是字符串，类似 Map），我们直接上脚本代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 定义数组</span><br><span class="line">iarray=(1 2 3 4 5 6 7)</span><br><span class="line">iiarray=(&quot;one&quot; &quot;two&quot; &quot;three&quot;)</span><br><span class="line">echo $&#123;iarray[0]&#125;</span><br><span class="line">echo $&#123;iiarray[2]&#125;</span><br><span class="line"># 打印所有值</span><br><span class="line">echo $&#123;iiarray[*]&#125;</span><br><span class="line"># 还是打印所有值</span><br><span class="line">echo $&#123;iiarray[@]&#125;</span><br></pre></td></tr></table></figure><p>打印数组长度只需要在数组变量前加 # 符号。关联数组因为需要 Bash 4.0 以上，这里暂时略过。</p><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><p>通常我们使用 let, (( )) 和 [ ] 来执行基本的算术操作，使用 expr 和 br 来进行高级操作。老规矩，先看脚本代码，在 hw.sh 中添加下面几行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class1=33</span><br><span class="line">class2=44</span><br><span class="line">let total=class1+class2</span><br><span class="line">echo $total</span><br><span class="line">let class1++</span><br><span class="line">let class2--</span><br><span class="line">total=$[ $class1 + class2 ]</span><br><span class="line">echo $total</span><br><span class="line">echo &quot;4 * 3.45&quot; | bc</span><br></pre></td></tr></table></figure><p>执行结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./hw.sh hello world</span><br><span class="line"># 前面部分省略</span><br><span class="line"># ..........</span><br><span class="line">77</span><br><span class="line">77</span><br><span class="line">13.80</span><br></pre></td></tr></table></figure><p>这里我们可以简单了解</p><ul><li>let 之后变量名不需要加 $</li><li>[] 中的变量可以加 $，也可以不加</li><li>let 及 expr 仅支持整数</li><li>bc 支持浮点数，可以通过 stdin 来传给 bc（就是 | 符号）</li></ul><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>这部分我们需要记住三个数字</p><ul><li>0 - stdin 标准输入</li><li>1 - stdout 标准输出</li><li>2 - stderr 标准错误<br>重定向输出所用符号是 &gt; 和 &gt;&gt;，其中 &gt; 会清空文件，而 &gt;&gt; 则是追加。那前面的三个数字在哪里呢？其实 &gt; 相当于 1&gt;，&gt;&gt; 相当于 1&gt;&gt;</li></ul><p>然后我们来看看标准错误输出，一般来说有两种处理方式，一种是和标准输出重定向到一起，那么通过 command &gt; output.txt 2&gt;&amp;1 或 cmd &amp;&gt; output.txt 即可；另一种则是分开两个文件，那么使用 command 2&gt;stderr.txt 1&gt;stdout.txt 即可；如果不想保存任何标准错误输出（甚至都不想在终端中见到），可以 command 2&gt;/dev/null，这里的 /dev/null 是一个特殊的设备文件，接收到的任何数据都会被丢弃。</p><p>标准输入的用法和输出类似，这里不再赘述。另外如果需要把标准输出通过管道运到两个不同的地方时（| 只能重定向到一个地方），可以使用 tee 命令，不过这里暂时略过，留到之后的中级教程中介绍。</p><h3 id="条件流程"><a href="#条件流程" class="headerlink" title="条件流程"></a>条件流程</h3><p>比较常用的就是 if 的套路，格式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition;</span><br><span class="line">then</span><br><span class="line">    commands;</span><br><span class="line">elif condition;</span><br><span class="line">then</span><br><span class="line">    commands;</span><br><span class="line">else</span><br><span class="line">    commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>如果觉得这样写太长，可以利用逻辑操作与短路原理来进行编写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 如果 condition 为真，则执行 action</span><br><span class="line">[ condition ] &amp;&amp; action;  </span><br><span class="line"># 如果 condition 为假，则执行 action</span><br><span class="line">[ condition ] || action;</span><br></pre></td></tr></table></figure><h3 id="算术比较"><a href="#算术比较" class="headerlink" title="算术比较"></a>算术比较</h3><p>条件通常被放置在封闭的中括号内，一定要注意 [ 和 ] 脸变有空格！如果我们需要进行算术比较，就需要使用如下的比较符号</p><ul><li>-gt 大于</li><li>-lt 小于</li><li>-ge 大于等于</li><li>-le 小于等于</li><li>-eq 等于</li><li>-ne 不等于</li><li>-a 逻辑与，例如 [ $var -ne 0 -a $var2 -gt 2 ]</li><li>-o 逻辑或，例如 [ $var -ne 0 -o $var2 -gt 2 ]</li></ul><p>一个实际的例子：检测是否是超级用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [ $UID -ne 0 ]; then</span><br><span class="line">    echo &quot;你不是超级用户(root)，请以 root 身份运行&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;当前是超级用户&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="文件系统测试"><a href="#文件系统测试" class="headerlink" title="文件系统测试"></a>文件系统测试</h3><p>有的时候我们可能需要对不同的文件进行一定的判断，下面是可以使用的比较方法：</p><ul><li>[ -f $file_var ] 如果给定的变量包含正常的文件路径或文件名，则返回真</li><li>[ -x $var ] 如果给定的变量包含的文件可执行，则返回真</li><li>[ -d $var ] 如果给定的变量包含的是目录，则返回真</li><li>[ -e $var ] 如果给定的变量包含的文件存在，则返回真</li><li>[ -c $var ] 如果给定的变量包含的是一个字符设备文件，则返回真</li><li>[ -b $var ] 如果给定的变量包含的是一个块设备文件的路径，则返回真</li><li>[ -w $var ] 如果给定的变量包含的文件可写，则返回真</li><li>[ -r $var ] 如果给定的变量包含的文件可读，则返回真</li><li>[ -L $var ] 如果给定的变量包含的是一个符号链接，则返回真</li></ul><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>比较字符串的时候最好使用双中括号，比较的语法为：</p><ul><li>[[ $str1 = $str2 ]] 文本一样时返回真，注意 = 前后都必须有一个空格</li><li>[[ $str1 == $str2 ]] 文本一样时返回真，和上一个一样，只是写法不同</li><li>[[ $str1 != $str2 ]] 文本不一样时返回真</li><li>[[ $str1 &gt; $str2 ]] 如果 str1 的字母序比 str2 大，则返回真</li><li>[[ $str1 &lt; $str2 ]] 如果 str1 的字母序比 str2 小，则返回真</li><li>[[ -z $str1 ]] 如果 str1 是空字符串，则返回真</li><li>[[ -n $str1 ]] 如果 str1 是非空字符串，则返回真</li><li>可以通过 &amp;&amp; 和 || 来组合多个条件。如果不想写太多的方括号，那么可以用 test 命令，比如 [ $var -eq 0] 等价于 test $var -eq 0</li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>设定 IFS 变量即告诉 shell 脚本要以什么为分隔符，这里的 IFS 表示 Internal Field Separator。我们来看看下面一段脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data=&quot;class1,class2,class3,class4&quot;</span><br><span class="line">IFS=,</span><br><span class="line">for item in $data;</span><br><span class="line">do</span><br><span class="line">    echo Item: $item</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Item: class1</span><br><span class="line">Item: class2</span><br><span class="line">Item: class3</span><br><span class="line">Item: class4</span><br></pre></td></tr></table></figure><p>这里因为指定了分隔符，所以会把字符串用 ,，分隔，然后就可以利用循环来输出了。前面的例子中我们看到了 for 循环，这里我们再来看一段 for 循环的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;a..z&#125;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>这样就可以输出 a-z 了，当然也可以换成其他的，比如 {1..43}, {a..h}, {A..K} 等等</p><p>还可以使用类似 C 语言的 for 循环，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for ((i=0; i&lt;10; i++))</span><br><span class="line">&#123;</span><br><span class="line">    echo $i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外的循环有 while 和 until，其实是类似的，这里只给出格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># while 循环</span><br><span class="line">while condition # 如果 condition 为 true 则是无限循环</span><br><span class="line">do</span><br><span class="line">    commands</span><br><span class="line">done</span><br><span class="line"># until 循环</span><br><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    action</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数的定义和非常简单，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function foo()</span><br><span class="line">&#123;</span><br><span class="line">   echo &quot;Arguments work just like script arguments: $@&quot;</span><br><span class="line">   echo &quot;And: $1 $2...&quot;</span><br><span class="line">   echo &quot;This is a function&quot;</span><br><span class="line">   return 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以省略 function 关键词，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bar ()</span><br><span class="line">&#123;</span><br><span class="line">   echo &quot;Another way to declare functions!&quot;</span><br><span class="line">   return 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的话，直接输入函数名即可，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo</span><br><span class="line">bar</span><br><span class="line">foo hello world</span><br></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>简单来说，别名类似于网上很流行的短链接，只不过我们可以具体设定，比方说我每次写博客都需要进入到某个文件夹，那么我可以这么写 alias blog=”cd ~/Documents/Blog”，我想要快速发布博客时，可以这么写 alias post=”hexo g -d”。这之后我就可以直接用 blog 和 post 命令了，非常方便。</p><p>如果想要在每次打开新的 shell 进程时都能够使用这两个『新』命令，那么可以把前面两句写在 ~/.bashrc 或 ~/.bash_profile 中。</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>Shell 脚本最强大的地方就是能够通过管道把不同的应用程序串起来，这样每个都完成一小部分工作，最终完成一个看起来很复杂的任务。大概的样子是这样的 $ command1 | command2 | command3</p><p>大家可以尝试一下这条命令 ls | cat -n</p><p>小结<br>本文我们从打印文本开始，见到了解了最基本的 Shell 脚本语法和 Bash 的基本操作。之后的系列文章会继续深入下去，用更多例子来进行讲解。</p><h1 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h1><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><ul><li>–help：查看指令信息</li><li>man：查看帮助信息，其中第一个指令后面的数字有特殊意义<ul><li>1:使用者在shell环境中可以操作的指令或可可执行文件</li><li>5：配置文件或者是某些文件的格式</li><li>8: 系统管理员可用的管理指令<br>cal 显示日历</li></ul></li></ul><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p>基本上，man page大致分成下面这几个部分：<br>代号 内容 说明<br>NAME 简短的指令、数据名称说明<br>SYNOPSIS 简短的指令下达语法（syntax）简介<br>DESCRIPTION 较为完整的说明，这部分最好仔细看看！<br>OPTIONS 针对 SYNOPSIS 部分中，有列举的所有可用的选项说明<br>COMMANDS 当这个程序（软件）在执行的时候，可以在此程序（软件）中下达的<br>指令<br>FILES 这个程序或数据所使用或参考或链接到的某些文件<br>SEE ALSO 可以参考的，跟这个指令或数据有相关的其他说明！<br>EXAMPLE 一些可以参考的范例</p><p>man page中<br>利用 / 或 ? 来搜寻字串时，可以用 n 来继续下一个搜寻 （不论是 / 或 ?） ，<br>可以利用 N 来进行“反向”搜寻。举例来说，我以 /vbird 搜寻 vbird 字串， 那么<br>可以 n 继续往下查询，用 N 往上查询。若以 ?vbird 向上查询 vbird 字串， 那<br>我可以用 n 继续“向上”查询，用 N 反向查询。</p><p>man -f [指令]，寻找相关的指令帮助<br>man -k [指令]，寻找描述和名字中包含指令的帮助</p><h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><p>和man差不多，但info是文字模式的网页显示数据<br>按h显示info page页面下的快捷键<br>按n和p，u来去别的节点<br>按空格翻页<br>按q退出</p><h1 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h1><h2 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h2><p>nano 文件名 会直接创建一个文件<br>使用ctrl+x保存文件</p><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>待完成</p><h1 id="正确的关机方法"><a href="#正确的关机方法" class="headerlink" title="正确的关机方法"></a>正确的关机方法</h1><ul><li>syne 命令可以让内存中的信息直接保存到硬盘中，防止数据丢失</li><li>shutdown/poweroff 关机</li><li>halt 进入系统停止的模式，屏幕可能会保留一些讯息，这与你的电源管理模式有关</li><li>poweroff 进入系统关机模式，直接关机没有提供电力喔！</li><li>reboot 直接重新开机</li><li>suspend 进入休眠模式</li></ul><h1 id="附录——常用命令"><a href="#附录——常用命令" class="headerlink" title="附录——常用命令"></a>附录——常用命令</h1><h2 id="压缩解压-tar"><a href="#压缩解压-tar" class="headerlink" title="压缩解压 tar"></a>压缩解压 tar</h2><p>如果要在服务器之间发送大量数据，肯定少不了压缩和解压这两步，但是 tar 这个命令的参数之多，让我很绝望，于是我发明了一个简单的记忆方法。</p><p>使用 tar 命令只要记得参数是『必选+自选+f』即可，我们先来看看『必选！五选一』:</p><ul><li>-c 意为 create，表示创建压缩包</li><li>-x 意为 extract，表示解压</li><li>-t 表示查看内容</li><li>-r 给压缩包追加文件</li><li>-u 意为 update，更新压缩包中的文件</li></ul><p>注意了，上面是一定要五选一的，不能一个都不选，也不能同时选俩。但是自选的部分就可以按照需要挑选了，比如：</p><ul><li>-z 使用 gzip 属性</li><li>-j 使用 bz2 属性</li><li>-Z 使用 compress 属性</li><li>-v 意为 verbose，显示详细的操作过程</li><li>-O 将文件输出到标准输出</li></ul><p>然后最后一个一定要是 f 后面跟压缩包名（无论是要解压还是要压缩，都是指压缩包的名字）。接下来我们看看具体实例，就很容易理解具体的用法了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 假设我们有很多 .md 文件需要打包，那么可以使用</span><br><span class="line">tar -cf posts.tar *.md # c 是创建压缩包，也就是压缩，然后是 f，给出压缩包名，最后是要压缩的文件</span><br><span class="line"># 然后我们发现还有一些 .txt 文件也需要打包进去，那么可以使用</span><br><span class="line">tar -rf posts.tar *.txt # r 是追加文件</span><br><span class="line"># 然后我们发现 hello.md 弄错了，修正后需要更新到压缩包中，可以使用</span><br><span class="line">tar -uf post.tar hello.md # u 是更新</span><br><span class="line"># 压缩好了，我们来看看压缩包的内容，可以使用</span><br><span class="line">tar -tf posts.tar # t 是列出文件内容</span><br><span class="line"># 把压缩包发送到其他位置之后，需要解压，可以使用</span><br><span class="line">tar -xf posts.tar # x 是解压</span><br></pre></td></tr></table></figure><p>加入自选参数后的用法（要不要加 v 可以看个人喜好）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># tar.gz 相关</span><br><span class="line">tar -czf posts.tar.gz *.md # 压缩</span><br><span class="line">tar -xzf posts.tar.gz # 解压</span><br><span class="line"># tar.bz2 相关</span><br><span class="line">tar -cjf posts.tar.bz2 *.md # 压缩</span><br><span class="line">tar -xjf posts.tar.bz2 # 解压</span><br><span class="line"># tar.Z 相关</span><br><span class="line">tar -cZf posts.tar.Z *.md # 压缩</span><br><span class="line">tar -xZf posts.tar.Z # 解压</span><br></pre></td></tr></table></figure><p>总结一波，遇到不同类型的文件，请用不同的套路来应对：</p><ul><li>*.tar -&gt; tar -xf</li><li>*.tar.gz -&gt; tar -xzf</li><li>*.tar.bz2 -&gt; tar -xjf</li><li>*.tar.Z -&gt; tar -xZf</li><li>*.gz -&gt; gzip -d</li><li>*.rar -&gt; unrar e</li><li>*.zip -&gt; unzip</li></ul><h2 id="空间占用-du"><a href="#空间占用-du" class="headerlink" title="空间占用 du"></a>空间占用 du</h2><p>很多时候磁盘被写满了是各种奇怪错误的源头，所以如何快速找到问题所在就很重要了，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前文件下 Top 10 空间占用的文件/目录，</span><br><span class="line"># s 表示不显示每个子目录或文件的大小</span><br><span class="line"># h 表示用更加自然的方式显示（比如 K/M/G 这样）</span><br><span class="line">du -sh * | sort -nr | head</span><br></pre></td></tr></table></figure><h2 id="系统状态-top"><a href="#系统状态-top" class="headerlink" title="系统状态 top"></a>系统状态 top</h2><p>了解系统状态一般少不了 top 命令，虽然基本上不需要做任何操作，但是还是有一些可以自定义的内容的，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 查看某用户的进程</span><br><span class="line">top -u wdxtub</span><br><span class="line"># 进入系统状态显示后，具体值代表的意思是</span><br><span class="line"># PR    进程优先级，越小优先级越高</span><br><span class="line"># VIRT  占用的虚拟内存</span><br><span class="line"># RES   占用的物理内存</span><br><span class="line"># SHR   占用的共享内存</span><br><span class="line"># S     进程状态（S - 休眠，R - 正在运行，Z - 僵死状态，N - 优先级为负数）</span><br><span class="line"># TIME+ 进程启动后占用的总 CPU 时间</span><br><span class="line"># 可以按照不同的指标排序显示，按对应键即可</span><br><span class="line"># P 按照 CPU 使用率排序</span><br><span class="line"># T 按照 MITE+ 排序</span><br><span class="line"># M 按内存使用占比排序</span><br></pre></td></tr></table></figure><p>其他查看进程相关信息的命令有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看进程内存分布</span><br><span class="line">pmap -d 12345 # 12345 是进程号</span><br><span class="line"># 按照内存排序，这里的 grep 可以过滤特定的用户</span><br><span class="line">ps -e -o &apos;pid,comm,srgs,pcpu,rsz,vsz,stime,user,uid&apos; | grep wdxtub | sort nrk5</span><br></pre></td></tr></table></figure></p><h2 id="查找-find"><a href="#查找-find" class="headerlink" title="查找 find"></a>查找 find</h2><p>在命令行界面中进行查找是每个需要在服务器上执行操作的同学都必备的技能，这里用实例来说明常见的实用用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 找出七天前的文件</span><br><span class="line">find / -type f -mtime +7 -print</span><br><span class="line"># / 表示从根目录中查找</span><br><span class="line"># -type f 表示找出系统普通文件，不包含目录</span><br><span class="line"># -mtime +n 表示寻找 n 天前的数据</span><br><span class="line"># -print 打印文件名称</span><br><span class="line"># 找出并删除七天前的文件</span><br><span class="line">find /temp/ -type f -mtime +7 -print -exec rm -f &#123;&#125; \;</span><br><span class="line"># -exec 表示后面执行系统命令</span><br><span class="line"># &#123;&#125; 只有该符号能跟在命令你后面</span><br><span class="line"># \; 结束符号</span><br><span class="line">find /temp/ -type f -mtime +7 -print | xargs rm -f</span><br><span class="line"># 使用管道和 xargs = -exec</span><br><span class="line"># 查找 /var 下最大的十个文件</span><br><span class="line">find /var -type f -ls | sort -k 7 -r -n | head</span><br><span class="line"># 查找 /var/log 下大于 5GB 的文件</span><br><span class="line">find /var/log/ -type f -size +5120M -exec ls -lh &#123;&#125; \;</span><br><span class="line"># 找出今天所有文件并将它们拷贝到另一个目录</span><br><span class="line">find /home/wdxtub/ -ctime 0 -print -exec cp &#123;&#125; /mnt/backup/&#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="远程登录-ssh"><a href="#远程登录-ssh" class="headerlink" title="远程登录 ssh"></a>远程登录 ssh</h2><ul><li>ssh -vvv username@ip ssh 的 debug 模式</li><li>ssh -i key.pem username@ip 用 pem key 登录 ssh</li></ul><h2 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h2><p>这里是一些比较零碎的命令行技巧</p><ul><li>openssl rand -hex n 产生随机的十六进制数，n 是字符数</li><li>source /path/to/filename 在当前 shell 里执行一个文件里的命令</li><li>${variable:0:5} 截取变量的前五个字符</li><li>wget -r –no-parent –reject “index.html*” <a href="http://hostname/" target="_blank" rel="noopener">http://hostname/</a> -P /home/user/dirs 用 wget 抓取完整的网站目录结构，存放到本地目录中</li><li>mkdir -p /home/wdxtub/{test0,test1,test2} 一次创建多个目录</li><li>dd if=/dev/zero of=/tmp/output.img bs=8k count=256k; rm -rf /tmp/output.img 测试硬盘写入速度</li><li>hdparm -Tt /dev/sda 测试硬盘读取速度</li><li>echo -n “test” | md5sum 获取文本的 md5</li><li>curl -I <a href="http://wdxtub.com" target="_blank" rel="noopener">http://wdxtub.com</a> 获取 HTTP 头信息</li><li>netstat -tln4 | awk ‘{print $4}’ | cut -f2 -d: | grep -o ‘[0-9]*’ 显示所有 tcp4 监听端口</li><li>time command 查看命令的运行时间</li><li>export 查看所有的环境变量</li><li>cmp file1 file2 文件内容对比</li><li>cat -n file 内容前面会显示行号</li><li>lsof -i:22 查看 22 端口现在运行的程序</li><li>lsof -c abc 显示 abc 进程现在打开的文件</li><li>lsof -p 12 看进程号为 12 的进程打开了哪些文件</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://wittyfans.com/2016/12/03/bzs-linux-concept-guide/">Linux概念指南——小土刀</a></li><li><a href="https://www.gitbook.com/book/wizardforcel/vbird-linux-basic-4e/details" target="_blank" rel="noopener">鸟哥的Linux私房菜</a></li><li><a href="http://yhhx.tech/2017/06/11/笔记/Arch-Linux安装记录/" target="_blank" rel="noopener">Arch-Linux安装记录/</a></li><li><a href="https://www.ibm.com/developerworks/cn/linux/1507_caojh/index.html" target="_blank" rel="noopener">Linux防火墙firewalld</a></li><li><a href="https://www.jianshu.com/p/37735e3511c2" target="_blank" rel="noopener">Linux常用软件安装</a></li><li><a href="https://wizardforcel.gitbooks.io/network-basic/content/0.html" target="_blank" rel="noopener">网络基础功</a></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;鸟哥的Linux私房菜阅读笔记，截取了重要的概念与常用的命令。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="Linux" scheme="http://wittyfans.com/tags/Linux/"/>
    
      <category term="shell" scheme="http://wittyfans.com/tags/shell/"/>
    
      <category term="coding" scheme="http://wittyfans.com/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell常用命令</title>
    <link href="http://wittyfans.com/coding/Powershell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://wittyfans.com/coding/Powershell常用命令.html</id>
    <published>2017-11-14T15:14:08.000Z</published>
    <updated>2018-03-18T13:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Power shell 作为一门windows平台下的脚本语言，对于系统管理员来说，可以极大的减少我们的工作，作为一流的系统管理员（逃～），不可不学！</p></blockquote><a id="more"></a> <h1 id="Why-Power-Shell"><a href="#Why-Power-Shell" class="headerlink" title="Why Power Shell"></a>Why Power Shell</h1><ul><li>Working in windows</li><li>Support Object </li><li>.NET Support</li><li>Power ! ! ! </li></ul><h1 id="Over-View"><a href="#Over-View" class="headerlink" title="Over View"></a>Over View</h1><p>Power shell 作为一门windows平台下的脚本语言，可以极大的减少我们的工作，它的好处自然不用多说，用过的都知道，下面简单的看一下语法概览。</p><ul><li>查命令的使用：Get-Help</li><li>查对象的方法和属性:Get-Member</li><li><p>查命令历史记录:Get-History</p><ul><li>命令导出为ps1 : xxx | Foreach-Object {$_.CommandLine} &gt; C:\temp\script.ps1</li></ul></li><li><p>查找命令:Get-Command</p></li><li>上一条命令是否成功:$lastExitCode</li><li>一个命令要多久: Measure-Command{ scripts}</li></ul><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="where-object"><a href="#where-object" class="headerlink" title="where-object"></a>where-object</h2><p>使用这个命令可以从列表或者输出中过滤信息，格式为where-object{  } ,where-object回遍历它之前的属性，在{}中，可以使用$_来代表当前遍历的元素，所以，在where-object中，可以进行大量的操作。</p><h2 id="Foreach-Object"><a href="#Foreach-Object" class="headerlink" title="Foreach-Object"></a>Foreach-Object</h2><p>这个命令和where-object差不多，可以用来处理列表中的项，同样可以在其中使用$_命令</p><h1 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h1><p>Get-Content 可以读取csv或者txt文件，读取完成之后可以通过数组的形式访问.</p><h1 id="数据导出到CSV文件"><a href="#数据导出到CSV文件" class="headerlink" title="数据导出到CSV文件"></a>数据导出到CSV文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Powershell Output info to CSV file</span><br><span class="line">$data = @()</span><br><span class="line">$row = New-Object PSObject</span><br><span class="line">$row | Add-Member -MemberType NoteProperty -Name &quot;Username&quot; -Value $username</span><br><span class="line">$row | Add-Member -MemberType NoteProperty -Name &quot;ComputerName&quot; -Value $ComputerName</span><br><span class="line">$row | Add-Member -MemberType NoteProperty -Name &quot;Domain&quot; -Value $domainName</span><br><span class="line">$row | Add-Member -MemberType NoteProperty -Name &quot;monitorSN&quot; -Value $monitorSN</span><br><span class="line">$row | Add-Member -MemberType NoteProperty -Name &quot;ComputerSN&quot; -Value $info.SerialNumber</span><br><span class="line">$row | Add-Member -MemberType NoteProperty -Name &quot;LastTimeLoginUser&quot; -Value $loginInfo.Name</span><br><span class="line">$row | Add-Member -MemberType NoteProperty -Name &quot;LoginCounts&quot; -Value $loginInfo.count</span><br><span class="line"></span><br><span class="line">$data += $row</span><br><span class="line">$data | Export-CSV \\10.65.64.219\soft\Information\infoList.csv -noTypeInformation -Append</span><br></pre></td></tr></table></figure><h2 id="PowerShell与excel文件交互"><a href="#PowerShell与excel文件交互" class="headerlink" title="PowerShell与excel文件交互"></a>PowerShell与excel文件交互</h2><ul><li><a href="http://www.lazywinadmin.com/2014/03/powershell-read-excel-file-using-com.html?m=1" target="_blank" rel="noopener">Read an Excel file using COM Interface</a></li></ul><h1 id="获取登录名"><a href="#获取登录名" class="headerlink" title="获取登录名"></a>获取登录名</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$name=Get-WmiObject -Class Win32_UserAccount -Filter &quot;Name=&apos;$env:username&apos; and Domain=&apos;$env:userdomain&apos;&quot;</span><br></pre></td></tr></table></figure><h1 id="控制csv的语法"><a href="#控制csv的语法" class="headerlink" title="控制csv的语法"></a>控制csv的语法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># CSV:</span><br><span class="line"># a,b,c</span><br><span class="line"># 1,2,3</span><br><span class="line"># 4,5,6</span><br><span class="line"># 7,8,</span><br><span class="line"></span><br><span class="line">$csv = Import-Csv C:\test.txt</span><br><span class="line">$user = &quot;4&quot;</span><br><span class="line">foreach ($row in $csv) &#123;</span><br><span class="line">    if ($row.a -eq $user) &#123; $row.c = &quot;updated&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line">$csv | Export-Csv C:\test.txt</span><br><span class="line"></span><br><span class="line">#Output:</span><br><span class="line">#TYPE System.Management.Automation.PSCustomObject</span><br><span class="line">#&quot;a&quot;,&quot;b&quot;,&quot;c&quot;</span><br><span class="line">#&quot;1&quot;,&quot;2&quot;,&quot;3&quot;</span><br><span class="line">#&quot;4&quot;,&quot;5&quot;,&quot;updated&quot;</span><br><span class="line">#&quot;7&quot;,&quot;8&quot;,&quot;9&quot;</span><br></pre></td></tr></table></figure><h1 id="查看登陆到物理机的用户"><a href="#查看登陆到物理机的用户" class="headerlink" title="查看登陆到物理机的用户"></a>查看登陆到物理机的用户</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Get-WmiObject -Class Win32_ComputerSystem |Select-object -ExpandProperty UserName</span><br><span class="line">``` </span><br><span class="line"> </span><br><span class="line"># 从bat运行powershell</span><br></pre></td></tr></table></figure><p>@echo off</p><p>powershell set-executionpolicy unrestricted<br>powershell -file D:\soft\Scripts\GetUsersPhoneNumber\getUserPhone.ps1</p><p>exit</p><p>CSV-EXCEL <a href="http://www.pstips.net/converting-csv-to-excel-file.html" target="_blank" rel="noopener">http://www.pstips.net/converting-csv-to-excel-file.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 判断操作系统位数</span><br></pre></td></tr></table></figure></p><p>(Get-WmiObject Win32_OperatingSystem).osarchitecture<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 隐藏明文密码</span><br></pre></td></tr></table></figure></p><p>Write-host “text for pwd”<br>$plainText = Read-Host | ConvertTo-SecureString -AsPlainText -Force<br>$encryptedText = $plainText | convertFrom-Securesting<br>Write-host $encryptedText<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 查看域OU信息</span><br></pre></td></tr></table></figure></p><p>Get-ADOrganizationalUnit -Filter ‘Name -like “*”‘<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 参数的定义</span><br></pre></td></tr></table></figure></p><p>function Test-Function<br>{<br>    param($ 参数名 1=’默认参数值 1’, $ 参数名 2=’默认参数值 2’)<br>    Write-Host “参数 1=$ 参数名 1，参数 2=$ 参数名 2”;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 多线程</span><br><span class="line">- [Part1](https://blogs.technet.microsoft.com/heyscriptingguy/2015/11/26/beginning-use-of-powershell-runspaces-part-1/)</span><br><span class="line">- [Part2](https://blogs.technet.microsoft.com/heyscriptingguy/2015/11/27/beginning-use-of-powershell-runspaces-part-2/)</span><br><span class="line">- [Part3](https://blogs.technet.microsoft.com/heyscriptingguy/2015/11/28/beginning-use-of-powershell-runspaces-part-3/)</span><br><span class="line">- [多线程并发](http://blog.51cto.com/beanxyz/1760880)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 通用参数</span><br></pre></td></tr></table></figure></p><p>-Verbose[:{$true | $false}]</p><p>显示有关由该命令执行的操作的详细信息。此信息类似于跟踪或事务日志中的信息。此参数仅在命令生成详细消息时才起作用。例如，此参数在命令中包含 Write-Verbose cmdlet 时起作用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 运行网上下载的ps1文件</span><br></pre></td></tr></table></figure></p><p>Unblock-File -Path “C:\Users\Fan.ZhangFZ\soft\Scripts\Invoke-Parallel-master\Invoke-Parallel\Invoke-Parallel.ps1”<br>. “C:\Users\Fan.ZhangFZ\soft\Scripts\Invoke-Parallel-master\Invoke-Parallel\Invoke-Parallel.ps1”<br><code>`</code></p><h1 id="远程建立ssion，处理powershell命令"><a href="#远程建立ssion，处理powershell命令" class="headerlink" title="远程建立ssion，处理powershell命令"></a>远程建立ssion，处理powershell命令</h1><ul><li><a href="http://www.cnblogs.com/sparkdev/p/7200004.html" target="_blank" rel="noopener">参考地址</a></li></ul><h1 id="关于-cmdletbinding"><a href="#关于-cmdletbinding" class="headerlink" title="关于[cmdletbinding()]"></a>关于[cmdletbinding()]</h1><ul><li><a href="http://blog.51cto.com/shadingyu/1965313" target="_blank" rel="noopener">参考1</a></li></ul><h1 id="Powershell渗透参考"><a href="#Powershell渗透参考" class="headerlink" title="Powershell渗透参考"></a>Powershell渗透参考</h1><ul><li><a href="http://b404.xyz/2017/12/30/exploit-domain/" target="_blank" rel="noopener">exploitDomain</a></li></ul><h1 id="PowerSheel-学习资源"><a href="#PowerSheel-学习资源" class="headerlink" title="PowerSheel 学习资源"></a>PowerSheel 学习资源</h1><ul><li><a href="http://www.pstips.net" target="_blank" rel="noopener">PSTips</a></li><li><a href="https://docs.microsoft.com/zh-cn/powershell/scripting/powershell-scripting?view=powershell-5.1" target="_blank" rel="noopener">微软PowerSheel官方文档</a></li></ul><h1 id="相关书籍"><a href="#相关书籍" class="headerlink" title="相关书籍"></a>相关书籍</h1><ul><li>《Windows PowerShell 应用手册》——Lee Holmes著</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Power shell 作为一门windows平台下的脚本语言，对于系统管理员来说，可以极大的减少我们的工作，作为一流的系统管理员（逃～），不可不学！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="http://wittyfans.com/categories/coding/"/>
    
    
      <category term="HelpDesk" scheme="http://wittyfans.com/tags/HelpDesk/"/>
    
      <category term="PowerShell" scheme="http://wittyfans.com/tags/PowerShell/"/>
    
      <category term="Windows" scheme="http://wittyfans.com/tags/Windows/"/>
    
      <category term="技术支持" scheme="http://wittyfans.com/tags/%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81/"/>
    
  </entry>
  
</feed>
